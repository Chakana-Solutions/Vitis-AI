// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/voxel_generator.proto

#ifndef PROTOBUF_second_2fprotos_2fvoxel_5fgenerator_2eproto__INCLUDED
#define PROTOBUF_second_2fprotos_2fvoxel_5fgenerator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace second {
namespace protos {
class VoxelGenerator;
class VoxelGeneratorDefaultTypeInternal;
extern VoxelGeneratorDefaultTypeInternal _VoxelGenerator_default_instance_;
}  // namespace protos
}  // namespace second

namespace second {
namespace protos {

namespace protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto

// ===================================================================

class VoxelGenerator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.VoxelGenerator) */ {
 public:
  VoxelGenerator();
  virtual ~VoxelGenerator();

  VoxelGenerator(const VoxelGenerator& from);

  inline VoxelGenerator& operator=(const VoxelGenerator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoxelGenerator(VoxelGenerator&& from) noexcept
    : VoxelGenerator() {
    *this = ::std::move(from);
  }

  inline VoxelGenerator& operator=(VoxelGenerator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoxelGenerator& default_instance();

  static inline const VoxelGenerator* internal_default_instance() {
    return reinterpret_cast<const VoxelGenerator*>(
               &_VoxelGenerator_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VoxelGenerator* other);
  friend void swap(VoxelGenerator& a, VoxelGenerator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoxelGenerator* New() const PROTOBUF_FINAL { return New(NULL); }

  VoxelGenerator* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoxelGenerator& from);
  void MergeFrom(const VoxelGenerator& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoxelGenerator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float voxel_size = 1;
  int voxel_size_size() const;
  void clear_voxel_size();
  static const int kVoxelSizeFieldNumber = 1;
  float voxel_size(int index) const;
  void set_voxel_size(int index, float value);
  void add_voxel_size(float value);
  const ::google::protobuf::RepeatedField< float >&
      voxel_size() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_voxel_size();

  // repeated float point_cloud_range = 2;
  int point_cloud_range_size() const;
  void clear_point_cloud_range();
  static const int kPointCloudRangeFieldNumber = 2;
  float point_cloud_range(int index) const;
  void set_point_cloud_range(int index, float value);
  void add_point_cloud_range(float value);
  const ::google::protobuf::RepeatedField< float >&
      point_cloud_range() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_point_cloud_range();

  // repeated uint32 submanifold_size = 5;
  int submanifold_size_size() const;
  void clear_submanifold_size();
  static const int kSubmanifoldSizeFieldNumber = 5;
  ::google::protobuf::uint32 submanifold_size(int index) const;
  void set_submanifold_size(int index, ::google::protobuf::uint32 value);
  void add_submanifold_size(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      submanifold_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_submanifold_size();

  // uint32 max_number_of_points_per_voxel = 3;
  void clear_max_number_of_points_per_voxel();
  static const int kMaxNumberOfPointsPerVoxelFieldNumber = 3;
  ::google::protobuf::uint32 max_number_of_points_per_voxel() const;
  void set_max_number_of_points_per_voxel(::google::protobuf::uint32 value);

  // bool submanifold_group = 4;
  void clear_submanifold_group();
  static const int kSubmanifoldGroupFieldNumber = 4;
  bool submanifold_group() const;
  void set_submanifold_group(bool value);

  // uint32 submanifold_max_points = 6;
  void clear_submanifold_max_points();
  static const int kSubmanifoldMaxPointsFieldNumber = 6;
  ::google::protobuf::uint32 submanifold_max_points() const;
  void set_submanifold_max_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:second.protos.VoxelGenerator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > voxel_size_;
  mutable int _voxel_size_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > point_cloud_range_;
  mutable int _point_cloud_range_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > submanifold_size_;
  mutable int _submanifold_size_cached_byte_size_;
  ::google::protobuf::uint32 max_number_of_points_per_voxel_;
  bool submanifold_group_;
  ::google::protobuf::uint32 submanifold_max_points_;
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoxelGenerator

// repeated float voxel_size = 1;
inline int VoxelGenerator::voxel_size_size() const {
  return voxel_size_.size();
}
inline void VoxelGenerator::clear_voxel_size() {
  voxel_size_.Clear();
}
inline float VoxelGenerator::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.voxel_size)
  return voxel_size_.Get(index);
}
inline void VoxelGenerator::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.voxel_size)
}
inline void VoxelGenerator::add_voxel_size(float value) {
  voxel_size_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.voxel_size)
}
inline const ::google::protobuf::RepeatedField< float >&
VoxelGenerator::voxel_size() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.voxel_size)
  return voxel_size_;
}
inline ::google::protobuf::RepeatedField< float >*
VoxelGenerator::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.voxel_size)
  return &voxel_size_;
}

// repeated float point_cloud_range = 2;
inline int VoxelGenerator::point_cloud_range_size() const {
  return point_cloud_range_.size();
}
inline void VoxelGenerator::clear_point_cloud_range() {
  point_cloud_range_.Clear();
}
inline float VoxelGenerator::point_cloud_range(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.point_cloud_range)
  return point_cloud_range_.Get(index);
}
inline void VoxelGenerator::set_point_cloud_range(int index, float value) {
  point_cloud_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.point_cloud_range)
}
inline void VoxelGenerator::add_point_cloud_range(float value) {
  point_cloud_range_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.point_cloud_range)
}
inline const ::google::protobuf::RepeatedField< float >&
VoxelGenerator::point_cloud_range() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.point_cloud_range)
  return point_cloud_range_;
}
inline ::google::protobuf::RepeatedField< float >*
VoxelGenerator::mutable_point_cloud_range() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.point_cloud_range)
  return &point_cloud_range_;
}

// uint32 max_number_of_points_per_voxel = 3;
inline void VoxelGenerator::clear_max_number_of_points_per_voxel() {
  max_number_of_points_per_voxel_ = 0u;
}
inline ::google::protobuf::uint32 VoxelGenerator::max_number_of_points_per_voxel() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.max_number_of_points_per_voxel)
  return max_number_of_points_per_voxel_;
}
inline void VoxelGenerator::set_max_number_of_points_per_voxel(::google::protobuf::uint32 value) {
  
  max_number_of_points_per_voxel_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.max_number_of_points_per_voxel)
}

// bool submanifold_group = 4;
inline void VoxelGenerator::clear_submanifold_group() {
  submanifold_group_ = false;
}
inline bool VoxelGenerator::submanifold_group() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_group)
  return submanifold_group_;
}
inline void VoxelGenerator::set_submanifold_group(bool value) {
  
  submanifold_group_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_group)
}

// repeated uint32 submanifold_size = 5;
inline int VoxelGenerator::submanifold_size_size() const {
  return submanifold_size_.size();
}
inline void VoxelGenerator::clear_submanifold_size() {
  submanifold_size_.Clear();
}
inline ::google::protobuf::uint32 VoxelGenerator::submanifold_size(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_size)
  return submanifold_size_.Get(index);
}
inline void VoxelGenerator::set_submanifold_size(int index, ::google::protobuf::uint32 value) {
  submanifold_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_size)
}
inline void VoxelGenerator::add_submanifold_size(::google::protobuf::uint32 value) {
  submanifold_size_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.submanifold_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelGenerator::submanifold_size() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.submanifold_size)
  return submanifold_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelGenerator::mutable_submanifold_size() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.submanifold_size)
  return &submanifold_size_;
}

// uint32 submanifold_max_points = 6;
inline void VoxelGenerator::clear_submanifold_max_points() {
  submanifold_max_points_ = 0u;
}
inline ::google::protobuf::uint32 VoxelGenerator::submanifold_max_points() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_max_points)
  return submanifold_max_points_;
}
inline void VoxelGenerator::set_submanifold_max_points(::google::protobuf::uint32 value) {
  
  submanifold_max_points_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_max_points)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_second_2fprotos_2fvoxel_5fgenerator_2eproto__INCLUDED
