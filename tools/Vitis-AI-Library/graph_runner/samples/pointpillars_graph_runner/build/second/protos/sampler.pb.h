// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/sampler.proto

#ifndef PROTOBUF_second_2fprotos_2fsampler_2eproto__INCLUDED
#define PROTOBUF_second_2fprotos_2fsampler_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "second/protos/preprocess.pb.h"
// @@protoc_insertion_point(includes)
namespace second {
namespace protos {
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class Group_NameToMaxNumEntry;
class Group_NameToMaxNumEntryDefaultTypeInternal;
extern Group_NameToMaxNumEntryDefaultTypeInternal _Group_NameToMaxNumEntry_default_instance_;
class Sampler;
class SamplerDefaultTypeInternal;
extern SamplerDefaultTypeInternal _Sampler_default_instance_;
}  // namespace protos
}  // namespace second

namespace second {
namespace protos {

namespace protobuf_second_2fprotos_2fsampler_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_second_2fprotos_2fsampler_2eproto

// ===================================================================


// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Group* other);
  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const PROTOBUF_FINAL { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, uint32> name_to_max_num = 1;
  int name_to_max_num_size() const;
  void clear_name_to_max_num();
  static const int kNameToMaxNumFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
      name_to_max_num() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
      mutable_name_to_max_num();

  // @@protoc_insertion_point(class_scope:second.protos.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class Group_NameToMaxNumEntry : public ::google::protobuf::internal::MapEntry<Group_NameToMaxNumEntry, 
      ::std::string, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Group_NameToMaxNumEntry, 
      ::std::string, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    Group_NameToMaxNumEntry();
    Group_NameToMaxNumEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Group_NameToMaxNumEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Group_NameToMaxNumEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Group_NameToMaxNumEntry,
      ::std::string, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > name_to_max_num_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fsampler_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sampler : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.Sampler) */ {
 public:
  Sampler();
  virtual ~Sampler();

  Sampler(const Sampler& from);

  inline Sampler& operator=(const Sampler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sampler(Sampler&& from) noexcept
    : Sampler() {
    *this = ::std::move(from);
  }

  inline Sampler& operator=(Sampler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sampler& default_instance();

  static inline const Sampler* internal_default_instance() {
    return reinterpret_cast<const Sampler*>(
               &_Sampler_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Sampler* other);
  friend void swap(Sampler& a, Sampler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sampler* New() const PROTOBUF_FINAL { return New(NULL); }

  Sampler* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sampler& from);
  void MergeFrom(const Sampler& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sampler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .second.protos.Group sample_groups = 2;
  int sample_groups_size() const;
  void clear_sample_groups();
  static const int kSampleGroupsFieldNumber = 2;
  const ::second::protos::Group& sample_groups(int index) const;
  ::second::protos::Group* mutable_sample_groups(int index);
  ::second::protos::Group* add_sample_groups();
  ::google::protobuf::RepeatedPtrField< ::second::protos::Group >*
      mutable_sample_groups();
  const ::google::protobuf::RepeatedPtrField< ::second::protos::Group >&
      sample_groups() const;

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 3;
  int database_prep_steps_size() const;
  void clear_database_prep_steps();
  static const int kDatabasePrepStepsFieldNumber = 3;
  const ::second::protos::DatabasePreprocessingStep& database_prep_steps(int index) const;
  ::second::protos::DatabasePreprocessingStep* mutable_database_prep_steps(int index);
  ::second::protos::DatabasePreprocessingStep* add_database_prep_steps();
  ::google::protobuf::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >*
      mutable_database_prep_steps();
  const ::google::protobuf::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >&
      database_prep_steps() const;

  // repeated float global_random_rotation_range_per_object = 4;
  int global_random_rotation_range_per_object_size() const;
  void clear_global_random_rotation_range_per_object();
  static const int kGlobalRandomRotationRangePerObjectFieldNumber = 4;
  float global_random_rotation_range_per_object(int index) const;
  void set_global_random_rotation_range_per_object(int index, float value);
  void add_global_random_rotation_range_per_object(float value);
  const ::google::protobuf::RepeatedField< float >&
      global_random_rotation_range_per_object() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_global_random_rotation_range_per_object();

  // string database_info_path = 1;
  void clear_database_info_path();
  static const int kDatabaseInfoPathFieldNumber = 1;
  const ::std::string& database_info_path() const;
  void set_database_info_path(const ::std::string& value);
  #if LANG_CXX11
  void set_database_info_path(::std::string&& value);
  #endif
  void set_database_info_path(const char* value);
  void set_database_info_path(const char* value, size_t size);
  ::std::string* mutable_database_info_path();
  ::std::string* release_database_info_path();
  void set_allocated_database_info_path(::std::string* database_info_path);

  // float rate = 5;
  void clear_rate();
  static const int kRateFieldNumber = 5;
  float rate() const;
  void set_rate(float value);

  // @@protoc_insertion_point(class_scope:second.protos.Sampler)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::second::protos::Group > sample_groups_;
  ::google::protobuf::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep > database_prep_steps_;
  ::google::protobuf::RepeatedField< float > global_random_rotation_range_per_object_;
  mutable int _global_random_rotation_range_per_object_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr database_info_path_;
  float rate_;
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fsampler_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Group

// map<string, uint32> name_to_max_num = 1;
inline int Group::name_to_max_num_size() const {
  return name_to_max_num_.size();
}
inline void Group::clear_name_to_max_num() {
  name_to_max_num_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
Group::name_to_max_num() const {
  // @@protoc_insertion_point(field_map:second.protos.Group.name_to_max_num)
  return name_to_max_num_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
Group::mutable_name_to_max_num() {
  // @@protoc_insertion_point(field_mutable_map:second.protos.Group.name_to_max_num)
  return name_to_max_num_.MutableMap();
}

// -------------------------------------------------------------------

// Sampler

// string database_info_path = 1;
inline void Sampler::clear_database_info_path() {
  database_info_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sampler::database_info_path() const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.database_info_path)
  return database_info_path_.GetNoArena();
}
inline void Sampler::set_database_info_path(const ::std::string& value) {
  
  database_info_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.Sampler.database_info_path)
}
#if LANG_CXX11
inline void Sampler::set_database_info_path(::std::string&& value) {
  
  database_info_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.Sampler.database_info_path)
}
#endif
inline void Sampler::set_database_info_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_info_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.Sampler.database_info_path)
}
inline void Sampler::set_database_info_path(const char* value, size_t size) {
  
  database_info_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.Sampler.database_info_path)
}
inline ::std::string* Sampler::mutable_database_info_path() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.Sampler.database_info_path)
  return database_info_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sampler::release_database_info_path() {
  // @@protoc_insertion_point(field_release:second.protos.Sampler.database_info_path)
  
  return database_info_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sampler::set_allocated_database_info_path(::std::string* database_info_path) {
  if (database_info_path != NULL) {
    
  } else {
    
  }
  database_info_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database_info_path);
  // @@protoc_insertion_point(field_set_allocated:second.protos.Sampler.database_info_path)
}

// repeated .second.protos.Group sample_groups = 2;
inline int Sampler::sample_groups_size() const {
  return sample_groups_.size();
}
inline void Sampler::clear_sample_groups() {
  sample_groups_.Clear();
}
inline const ::second::protos::Group& Sampler::sample_groups(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.sample_groups)
  return sample_groups_.Get(index);
}
inline ::second::protos::Group* Sampler::mutable_sample_groups(int index) {
  // @@protoc_insertion_point(field_mutable:second.protos.Sampler.sample_groups)
  return sample_groups_.Mutable(index);
}
inline ::second::protos::Group* Sampler::add_sample_groups() {
  // @@protoc_insertion_point(field_add:second.protos.Sampler.sample_groups)
  return sample_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::second::protos::Group >*
Sampler::mutable_sample_groups() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.Sampler.sample_groups)
  return &sample_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::second::protos::Group >&
Sampler::sample_groups() const {
  // @@protoc_insertion_point(field_list:second.protos.Sampler.sample_groups)
  return sample_groups_;
}

// repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 3;
inline int Sampler::database_prep_steps_size() const {
  return database_prep_steps_.size();
}
inline void Sampler::clear_database_prep_steps() {
  database_prep_steps_.Clear();
}
inline const ::second::protos::DatabasePreprocessingStep& Sampler::database_prep_steps(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_.Get(index);
}
inline ::second::protos::DatabasePreprocessingStep* Sampler::mutable_database_prep_steps(int index) {
  // @@protoc_insertion_point(field_mutable:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_.Mutable(index);
}
inline ::second::protos::DatabasePreprocessingStep* Sampler::add_database_prep_steps() {
  // @@protoc_insertion_point(field_add:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >*
Sampler::mutable_database_prep_steps() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.Sampler.database_prep_steps)
  return &database_prep_steps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >&
Sampler::database_prep_steps() const {
  // @@protoc_insertion_point(field_list:second.protos.Sampler.database_prep_steps)
  return database_prep_steps_;
}

// repeated float global_random_rotation_range_per_object = 4;
inline int Sampler::global_random_rotation_range_per_object_size() const {
  return global_random_rotation_range_per_object_.size();
}
inline void Sampler::clear_global_random_rotation_range_per_object() {
  global_random_rotation_range_per_object_.Clear();
}
inline float Sampler::global_random_rotation_range_per_object(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.global_random_rotation_range_per_object)
  return global_random_rotation_range_per_object_.Get(index);
}
inline void Sampler::set_global_random_rotation_range_per_object(int index, float value) {
  global_random_rotation_range_per_object_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.Sampler.global_random_rotation_range_per_object)
}
inline void Sampler::add_global_random_rotation_range_per_object(float value) {
  global_random_rotation_range_per_object_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.Sampler.global_random_rotation_range_per_object)
}
inline const ::google::protobuf::RepeatedField< float >&
Sampler::global_random_rotation_range_per_object() const {
  // @@protoc_insertion_point(field_list:second.protos.Sampler.global_random_rotation_range_per_object)
  return global_random_rotation_range_per_object_;
}
inline ::google::protobuf::RepeatedField< float >*
Sampler::mutable_global_random_rotation_range_per_object() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.Sampler.global_random_rotation_range_per_object)
  return &global_random_rotation_range_per_object_;
}

// float rate = 5;
inline void Sampler::clear_rate() {
  rate_ = 0;
}
inline float Sampler::rate() const {
  // @@protoc_insertion_point(field_get:second.protos.Sampler.rate)
  return rate_;
}
inline void Sampler::set_rate(float value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Sampler.rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_second_2fprotos_2fsampler_2eproto__INCLUDED
