// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/second.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "second/protos/second.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace second {
namespace protos {
class VoxelNet_VoxelFeatureExtractorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VoxelNet_VoxelFeatureExtractor>
     _instance;
} _VoxelNet_VoxelFeatureExtractor_default_instance_;
class VoxelNet_MiddleFeatureExtractorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VoxelNet_MiddleFeatureExtractor>
     _instance;
} _VoxelNet_MiddleFeatureExtractor_default_instance_;
class VoxelNet_RPNDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VoxelNet_RPN>
     _instance;
} _VoxelNet_RPN_default_instance_;
class VoxelNetDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VoxelNet>
     _instance;
} _VoxelNet_default_instance_;

namespace protobuf_second_2fprotos_2fsecond_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_VoxelFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_VoxelFeatureExtractor, module_class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_VoxelFeatureExtractor, num_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_VoxelFeatureExtractor, with_distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_MiddleFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_MiddleFeatureExtractor, module_class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_MiddleFeatureExtractor, num_filters_down1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_MiddleFeatureExtractor, num_filters_down2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, module_class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, layer_nums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, layer_strides_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, num_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, upsample_strides_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, num_upsample_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, use_groupnorm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet_RPN, num_groups_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, num_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, voxel_feature_extractor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, middle_feature_extractor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, rpn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, use_sigmoid_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, encode_rad_error_by_sin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, encode_background_as_zeros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, use_aux_classifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, use_rotate_nms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, use_multi_class_nms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, nms_pre_max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, nms_post_max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, nms_score_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, nms_iou_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, post_center_limit_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, use_direction_classifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, direction_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, pos_class_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, neg_class_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, loss_norm_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, use_bev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, without_reflectivity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, encode_angle_to_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, box_coder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, target_assigner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, lidar_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, num_point_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelNet, voxel_generator_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(VoxelNet_VoxelFeatureExtractor)},
  { 8, -1, sizeof(VoxelNet_MiddleFeatureExtractor)},
  { 16, -1, sizeof(VoxelNet_RPN)},
  { 29, -1, sizeof(VoxelNet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoxelNet_VoxelFeatureExtractor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoxelNet_MiddleFeatureExtractor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoxelNet_RPN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoxelNet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "second/protos/second.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::second::protos::protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  ::second::protos::protobuf_second_2fprotos_2fbox_5fcoder_2eproto::InitDefaults();
  ::second::protos::protobuf_second_2fprotos_2ftarget_2eproto::InitDefaults();
  ::second::protos::protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::InitDefaults();
  _VoxelNet_VoxelFeatureExtractor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VoxelNet_VoxelFeatureExtractor_default_instance_);_VoxelNet_MiddleFeatureExtractor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VoxelNet_MiddleFeatureExtractor_default_instance_);_VoxelNet_RPN_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VoxelNet_RPN_default_instance_);_VoxelNet_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VoxelNet_default_instance_);_VoxelNet_default_instance_._instance.get_mutable()->voxel_feature_extractor_ = const_cast< ::second::protos::VoxelNet_VoxelFeatureExtractor*>(
      ::second::protos::VoxelNet_VoxelFeatureExtractor::internal_default_instance());
  _VoxelNet_default_instance_._instance.get_mutable()->middle_feature_extractor_ = const_cast< ::second::protos::VoxelNet_MiddleFeatureExtractor*>(
      ::second::protos::VoxelNet_MiddleFeatureExtractor::internal_default_instance());
  _VoxelNet_default_instance_._instance.get_mutable()->rpn_ = const_cast< ::second::protos::VoxelNet_RPN*>(
      ::second::protos::VoxelNet_RPN::internal_default_instance());
  _VoxelNet_default_instance_._instance.get_mutable()->loss_ = const_cast< ::second::protos::Loss*>(
      ::second::protos::Loss::internal_default_instance());
  _VoxelNet_default_instance_._instance.get_mutable()->box_coder_ = const_cast< ::second::protos::BoxCoder*>(
      ::second::protos::BoxCoder::internal_default_instance());
  _VoxelNet_default_instance_._instance.get_mutable()->target_assigner_ = const_cast< ::second::protos::TargetAssigner*>(
      ::second::protos::TargetAssigner::internal_default_instance());
  _VoxelNet_default_instance_._instance.get_mutable()->voxel_generator_ = const_cast< ::second::protos::VoxelGenerator*>(
      ::second::protos::VoxelGenerator::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032second/protos/second.proto\022\rsecond.pro"
      "tos\032\032second/protos/losses.proto\032\035second/"
      "protos/box_coder.proto\032\032second/protos/ta"
      "rget.proto\032#second/protos/voxel_generato"
      "r.proto\"\377\013\n\010VoxelNet\022\021\n\tnum_class\030\001 \001(\r\022"
      "N\n\027voxel_feature_extractor\030\002 \001(\0132-.secon"
      "d.protos.VoxelNet.VoxelFeatureExtractor\022"
      "P\n\030middle_feature_extractor\030\003 \001(\0132..seco"
      "nd.protos.VoxelNet.MiddleFeatureExtracto"
      "r\022(\n\003rpn\030\004 \001(\0132\033.second.protos.VoxelNet."
      "RPN\022\031\n\021use_sigmoid_score\030\005 \001(\010\022!\n\004loss\030\006"
      " \001(\0132\023.second.protos.Loss\022\037\n\027encode_rad_"
      "error_by_sin\030\007 \001(\010\022\"\n\032encode_background_"
      "as_zeros\030\010 \001(\010\022\032\n\022use_aux_classifier\030\t \001"
      "(\010\022\026\n\016use_rotate_nms\030\n \001(\010\022\033\n\023use_multi_"
      "class_nms\030\013 \001(\010\022\030\n\020nms_pre_max_size\030\014 \001("
      "\r\022\031\n\021nms_post_max_size\030\r \001(\r\022\033\n\023nms_scor"
      "e_threshold\030\016 \001(\002\022\031\n\021nms_iou_threshold\030\017"
      " \001(\002\022\037\n\027post_center_limit_range\030\020 \003(\002\022 \n"
      "\030use_direction_classifier\030\021 \001(\010\022\035\n\025direc"
      "tion_loss_weight\030\022 \001(\002\022\030\n\020pos_class_weig"
      "ht\030\023 \001(\002\022\030\n\020neg_class_weight\030\024 \001(\002\022<\n\016lo"
      "ss_norm_type\030\025 \001(\0162$.second.protos.Voxel"
      "Net.LossNormType\022\017\n\007use_bev\030\026 \001(\010\022\034\n\024wit"
      "hout_reflectivity\030\027 \001(\010\022\036\n\026encode_angle_"
      "to_vector\030\030 \001(\010\022*\n\tbox_coder\030\031 \001(\0132\027.sec"
      "ond.protos.BoxCoder\0226\n\017target_assigner\030\032"
      " \001(\0132\035.second.protos.TargetAssigner\022\023\n\013l"
      "idar_input\030\033 \001(\010\022\032\n\022num_point_features\030\034"
      " \001(\r\0226\n\017voxel_generator\030\035 \001(\0132\035.second.p"
      "rotos.VoxelGenerator\032^\n\025VoxelFeatureExtr"
      "actor\022\031\n\021module_class_name\030\001 \001(\t\022\023\n\013num_"
      "filters\030\002 \003(\r\022\025\n\rwith_distance\030\003 \001(\010\032i\n\026"
      "MiddleFeatureExtractor\022\031\n\021module_class_n"
      "ame\030\001 \001(\t\022\031\n\021num_filters_down1\030\002 \003(\r\022\031\n\021"
      "num_filters_down2\030\003 \003(\r\032\303\001\n\003RPN\022\031\n\021modul"
      "e_class_name\030\001 \001(\t\022\022\n\nlayer_nums\030\002 \003(\r\022\025"
      "\n\rlayer_strides\030\003 \003(\r\022\023\n\013num_filters\030\004 \003"
      "(\r\022\030\n\020upsample_strides\030\005 \003(\r\022\034\n\024num_upsa"
      "mple_filters\030\006 \003(\r\022\025\n\ruse_groupnorm\030\007 \001("
      "\010\022\022\n\nnum_groups\030\010 \001(\r\"R\n\014LossNormType\022\025\n"
      "\021NormByNumExamples\020\000\022\026\n\022NormByNumPositiv"
      "es\020\001\022\023\n\017NormByNumPosNeg\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "second/protos/second.proto", &protobuf_RegisterTypes);
  ::second::protos::protobuf_second_2fprotos_2flosses_2eproto::AddDescriptors();
  ::second::protos::protobuf_second_2fprotos_2fbox_5fcoder_2eproto::AddDescriptors();
  ::second::protos::protobuf_second_2fprotos_2ftarget_2eproto::AddDescriptors();
  ::second::protos::protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_second_2fprotos_2fsecond_2eproto

const ::google::protobuf::EnumDescriptor* VoxelNet_LossNormType_descriptor() {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_enum_descriptors[0];
}
bool VoxelNet_LossNormType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VoxelNet_LossNormType VoxelNet::NormByNumExamples;
const VoxelNet_LossNormType VoxelNet::NormByNumPositives;
const VoxelNet_LossNormType VoxelNet::NormByNumPosNeg;
const VoxelNet_LossNormType VoxelNet::LossNormType_MIN;
const VoxelNet_LossNormType VoxelNet::LossNormType_MAX;
const int VoxelNet::LossNormType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoxelNet_VoxelFeatureExtractor::kModuleClassNameFieldNumber;
const int VoxelNet_VoxelFeatureExtractor::kNumFiltersFieldNumber;
const int VoxelNet_VoxelFeatureExtractor::kWithDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoxelNet_VoxelFeatureExtractor::VoxelNet_VoxelFeatureExtractor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet.VoxelFeatureExtractor)
}
VoxelNet_VoxelFeatureExtractor::VoxelNet_VoxelFeatureExtractor(const VoxelNet_VoxelFeatureExtractor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      num_filters_(from.num_filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_class_name().size() > 0) {
    module_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  with_distance_ = from.with_distance_;
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet.VoxelFeatureExtractor)
}

void VoxelNet_VoxelFeatureExtractor::SharedCtor() {
  module_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  with_distance_ = false;
  _cached_size_ = 0;
}

VoxelNet_VoxelFeatureExtractor::~VoxelNet_VoxelFeatureExtractor() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet.VoxelFeatureExtractor)
  SharedDtor();
}

void VoxelNet_VoxelFeatureExtractor::SharedDtor() {
  module_class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoxelNet_VoxelFeatureExtractor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoxelNet_VoxelFeatureExtractor::descriptor() {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoxelNet_VoxelFeatureExtractor& VoxelNet_VoxelFeatureExtractor::default_instance() {
  protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoxelNet_VoxelFeatureExtractor* VoxelNet_VoxelFeatureExtractor::New(::google::protobuf::Arena* arena) const {
  VoxelNet_VoxelFeatureExtractor* n = new VoxelNet_VoxelFeatureExtractor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoxelNet_VoxelFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_filters_.Clear();
  module_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  with_distance_ = false;
  _internal_metadata_.Clear();
}

bool VoxelNet_VoxelFeatureExtractor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module_class_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_num_filters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet.VoxelFeatureExtractor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet.VoxelFeatureExtractor)
  return false;
#undef DO_
}

void VoxelNet_VoxelFeatureExtractor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_class_name(), output);
  }

  // repeated uint32 num_filters = 2;
  if (this->num_filters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _num_filters_cached_byte_size_));
  }
  for (int i = 0, n = this->num_filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters(i), output);
  }

  // bool with_distance = 3;
  if (this->with_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->with_distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet.VoxelFeatureExtractor)
}

::google::protobuf::uint8* VoxelNet_VoxelFeatureExtractor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_class_name(), target);
  }

  // repeated uint32 num_filters = 2;
  if (this->num_filters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _num_filters_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_, target);
  }

  // bool with_distance = 3;
  if (this->with_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->with_distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet.VoxelFeatureExtractor)
  return target;
}

size_t VoxelNet_VoxelFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 num_filters = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_filters_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _num_filters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_class_name());
  }

  // bool with_distance = 3;
  if (this->with_distance() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoxelNet_VoxelFeatureExtractor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet_VoxelFeatureExtractor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoxelNet_VoxelFeatureExtractor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet.VoxelFeatureExtractor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet.VoxelFeatureExtractor)
    MergeFrom(*source);
  }
}

void VoxelNet_VoxelFeatureExtractor::MergeFrom(const VoxelNet_VoxelFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_filters_.MergeFrom(from.num_filters_);
  if (from.module_class_name().size() > 0) {

    module_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  if (from.with_distance() != 0) {
    set_with_distance(from.with_distance());
  }
}

void VoxelNet_VoxelFeatureExtractor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet_VoxelFeatureExtractor::CopyFrom(const VoxelNet_VoxelFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet.VoxelFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet_VoxelFeatureExtractor::IsInitialized() const {
  return true;
}

void VoxelNet_VoxelFeatureExtractor::Swap(VoxelNet_VoxelFeatureExtractor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoxelNet_VoxelFeatureExtractor::InternalSwap(VoxelNet_VoxelFeatureExtractor* other) {
  using std::swap;
  num_filters_.InternalSwap(&other->num_filters_);
  module_class_name_.Swap(&other->module_class_name_);
  swap(with_distance_, other->with_distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoxelNet_VoxelFeatureExtractor::GetMetadata() const {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoxelNet_VoxelFeatureExtractor

// string module_class_name = 1;
void VoxelNet_VoxelFeatureExtractor::clear_module_class_name() {
  module_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VoxelNet_VoxelFeatureExtractor::module_class_name() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
  return module_class_name_.GetNoArena();
}
void VoxelNet_VoxelFeatureExtractor::set_module_class_name(const ::std::string& value) {
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
}
#if LANG_CXX11
void VoxelNet_VoxelFeatureExtractor::set_module_class_name(::std::string&& value) {
  
  module_class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
}
#endif
void VoxelNet_VoxelFeatureExtractor::set_module_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
}
void VoxelNet_VoxelFeatureExtractor::set_module_class_name(const char* value, size_t size) {
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
}
::std::string* VoxelNet_VoxelFeatureExtractor::mutable_module_class_name() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
  return module_class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoxelNet_VoxelFeatureExtractor::release_module_class_name() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
  
  return module_class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoxelNet_VoxelFeatureExtractor::set_allocated_module_class_name(::std::string* module_class_name) {
  if (module_class_name != NULL) {
    
  } else {
    
  }
  module_class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_class_name);
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.VoxelFeatureExtractor.module_class_name)
}

// repeated uint32 num_filters = 2;
int VoxelNet_VoxelFeatureExtractor::num_filters_size() const {
  return num_filters_.size();
}
void VoxelNet_VoxelFeatureExtractor::clear_num_filters() {
  num_filters_.Clear();
}
::google::protobuf::uint32 VoxelNet_VoxelFeatureExtractor::num_filters(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.VoxelFeatureExtractor.num_filters)
  return num_filters_.Get(index);
}
void VoxelNet_VoxelFeatureExtractor::set_num_filters(int index, ::google::protobuf::uint32 value) {
  num_filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.VoxelFeatureExtractor.num_filters)
}
void VoxelNet_VoxelFeatureExtractor::add_num_filters(::google::protobuf::uint32 value) {
  num_filters_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.VoxelFeatureExtractor.num_filters)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_VoxelFeatureExtractor::num_filters() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.VoxelFeatureExtractor.num_filters)
  return num_filters_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_VoxelFeatureExtractor::mutable_num_filters() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.VoxelFeatureExtractor.num_filters)
  return &num_filters_;
}

// bool with_distance = 3;
void VoxelNet_VoxelFeatureExtractor::clear_with_distance() {
  with_distance_ = false;
}
bool VoxelNet_VoxelFeatureExtractor::with_distance() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.VoxelFeatureExtractor.with_distance)
  return with_distance_;
}
void VoxelNet_VoxelFeatureExtractor::set_with_distance(bool value) {
  
  with_distance_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.VoxelFeatureExtractor.with_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoxelNet_MiddleFeatureExtractor::kModuleClassNameFieldNumber;
const int VoxelNet_MiddleFeatureExtractor::kNumFiltersDown1FieldNumber;
const int VoxelNet_MiddleFeatureExtractor::kNumFiltersDown2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoxelNet_MiddleFeatureExtractor::VoxelNet_MiddleFeatureExtractor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet.MiddleFeatureExtractor)
}
VoxelNet_MiddleFeatureExtractor::VoxelNet_MiddleFeatureExtractor(const VoxelNet_MiddleFeatureExtractor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      num_filters_down1_(from.num_filters_down1_),
      num_filters_down2_(from.num_filters_down2_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_class_name().size() > 0) {
    module_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet.MiddleFeatureExtractor)
}

void VoxelNet_MiddleFeatureExtractor::SharedCtor() {
  module_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VoxelNet_MiddleFeatureExtractor::~VoxelNet_MiddleFeatureExtractor() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet.MiddleFeatureExtractor)
  SharedDtor();
}

void VoxelNet_MiddleFeatureExtractor::SharedDtor() {
  module_class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoxelNet_MiddleFeatureExtractor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoxelNet_MiddleFeatureExtractor::descriptor() {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoxelNet_MiddleFeatureExtractor& VoxelNet_MiddleFeatureExtractor::default_instance() {
  protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoxelNet_MiddleFeatureExtractor* VoxelNet_MiddleFeatureExtractor::New(::google::protobuf::Arena* arena) const {
  VoxelNet_MiddleFeatureExtractor* n = new VoxelNet_MiddleFeatureExtractor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoxelNet_MiddleFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_filters_down1_.Clear();
  num_filters_down2_.Clear();
  module_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VoxelNet_MiddleFeatureExtractor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module_class_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters_down1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters_down1())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_num_filters_down1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters_down2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters_down2())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_num_filters_down2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet.MiddleFeatureExtractor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet.MiddleFeatureExtractor)
  return false;
#undef DO_
}

void VoxelNet_MiddleFeatureExtractor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_class_name(), output);
  }

  // repeated uint32 num_filters_down1 = 2;
  if (this->num_filters_down1_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _num_filters_down1_cached_byte_size_));
  }
  for (int i = 0, n = this->num_filters_down1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters_down1(i), output);
  }

  // repeated uint32 num_filters_down2 = 3;
  if (this->num_filters_down2_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _num_filters_down2_cached_byte_size_));
  }
  for (int i = 0, n = this->num_filters_down2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters_down2(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet.MiddleFeatureExtractor)
}

::google::protobuf::uint8* VoxelNet_MiddleFeatureExtractor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_class_name(), target);
  }

  // repeated uint32 num_filters_down1 = 2;
  if (this->num_filters_down1_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _num_filters_down1_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_down1_, target);
  }

  // repeated uint32 num_filters_down2 = 3;
  if (this->num_filters_down2_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _num_filters_down2_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_down2_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet.MiddleFeatureExtractor)
  return target;
}

size_t VoxelNet_MiddleFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 num_filters_down1 = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_filters_down1_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _num_filters_down1_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 num_filters_down2 = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_filters_down2_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _num_filters_down2_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_class_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoxelNet_MiddleFeatureExtractor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet_MiddleFeatureExtractor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoxelNet_MiddleFeatureExtractor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet.MiddleFeatureExtractor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet.MiddleFeatureExtractor)
    MergeFrom(*source);
  }
}

void VoxelNet_MiddleFeatureExtractor::MergeFrom(const VoxelNet_MiddleFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_filters_down1_.MergeFrom(from.num_filters_down1_);
  num_filters_down2_.MergeFrom(from.num_filters_down2_);
  if (from.module_class_name().size() > 0) {

    module_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
}

void VoxelNet_MiddleFeatureExtractor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet_MiddleFeatureExtractor::CopyFrom(const VoxelNet_MiddleFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet.MiddleFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet_MiddleFeatureExtractor::IsInitialized() const {
  return true;
}

void VoxelNet_MiddleFeatureExtractor::Swap(VoxelNet_MiddleFeatureExtractor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoxelNet_MiddleFeatureExtractor::InternalSwap(VoxelNet_MiddleFeatureExtractor* other) {
  using std::swap;
  num_filters_down1_.InternalSwap(&other->num_filters_down1_);
  num_filters_down2_.InternalSwap(&other->num_filters_down2_);
  module_class_name_.Swap(&other->module_class_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoxelNet_MiddleFeatureExtractor::GetMetadata() const {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoxelNet_MiddleFeatureExtractor

// string module_class_name = 1;
void VoxelNet_MiddleFeatureExtractor::clear_module_class_name() {
  module_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VoxelNet_MiddleFeatureExtractor::module_class_name() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
  return module_class_name_.GetNoArena();
}
void VoxelNet_MiddleFeatureExtractor::set_module_class_name(const ::std::string& value) {
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
}
#if LANG_CXX11
void VoxelNet_MiddleFeatureExtractor::set_module_class_name(::std::string&& value) {
  
  module_class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
}
#endif
void VoxelNet_MiddleFeatureExtractor::set_module_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
}
void VoxelNet_MiddleFeatureExtractor::set_module_class_name(const char* value, size_t size) {
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
}
::std::string* VoxelNet_MiddleFeatureExtractor::mutable_module_class_name() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
  return module_class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoxelNet_MiddleFeatureExtractor::release_module_class_name() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
  
  return module_class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoxelNet_MiddleFeatureExtractor::set_allocated_module_class_name(::std::string* module_class_name) {
  if (module_class_name != NULL) {
    
  } else {
    
  }
  module_class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_class_name);
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.MiddleFeatureExtractor.module_class_name)
}

// repeated uint32 num_filters_down1 = 2;
int VoxelNet_MiddleFeatureExtractor::num_filters_down1_size() const {
  return num_filters_down1_.size();
}
void VoxelNet_MiddleFeatureExtractor::clear_num_filters_down1() {
  num_filters_down1_.Clear();
}
::google::protobuf::uint32 VoxelNet_MiddleFeatureExtractor::num_filters_down1(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down1)
  return num_filters_down1_.Get(index);
}
void VoxelNet_MiddleFeatureExtractor::set_num_filters_down1(int index, ::google::protobuf::uint32 value) {
  num_filters_down1_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down1)
}
void VoxelNet_MiddleFeatureExtractor::add_num_filters_down1(::google::protobuf::uint32 value) {
  num_filters_down1_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down1)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_MiddleFeatureExtractor::num_filters_down1() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down1)
  return num_filters_down1_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_MiddleFeatureExtractor::mutable_num_filters_down1() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down1)
  return &num_filters_down1_;
}

// repeated uint32 num_filters_down2 = 3;
int VoxelNet_MiddleFeatureExtractor::num_filters_down2_size() const {
  return num_filters_down2_.size();
}
void VoxelNet_MiddleFeatureExtractor::clear_num_filters_down2() {
  num_filters_down2_.Clear();
}
::google::protobuf::uint32 VoxelNet_MiddleFeatureExtractor::num_filters_down2(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down2)
  return num_filters_down2_.Get(index);
}
void VoxelNet_MiddleFeatureExtractor::set_num_filters_down2(int index, ::google::protobuf::uint32 value) {
  num_filters_down2_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down2)
}
void VoxelNet_MiddleFeatureExtractor::add_num_filters_down2(::google::protobuf::uint32 value) {
  num_filters_down2_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down2)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_MiddleFeatureExtractor::num_filters_down2() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down2)
  return num_filters_down2_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_MiddleFeatureExtractor::mutable_num_filters_down2() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.MiddleFeatureExtractor.num_filters_down2)
  return &num_filters_down2_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoxelNet_RPN::kModuleClassNameFieldNumber;
const int VoxelNet_RPN::kLayerNumsFieldNumber;
const int VoxelNet_RPN::kLayerStridesFieldNumber;
const int VoxelNet_RPN::kNumFiltersFieldNumber;
const int VoxelNet_RPN::kUpsampleStridesFieldNumber;
const int VoxelNet_RPN::kNumUpsampleFiltersFieldNumber;
const int VoxelNet_RPN::kUseGroupnormFieldNumber;
const int VoxelNet_RPN::kNumGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoxelNet_RPN::VoxelNet_RPN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet.RPN)
}
VoxelNet_RPN::VoxelNet_RPN(const VoxelNet_RPN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      layer_nums_(from.layer_nums_),
      layer_strides_(from.layer_strides_),
      num_filters_(from.num_filters_),
      upsample_strides_(from.upsample_strides_),
      num_upsample_filters_(from.num_upsample_filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_class_name().size() > 0) {
    module_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  ::memcpy(&use_groupnorm_, &from.use_groupnorm_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_groups_) -
    reinterpret_cast<char*>(&use_groupnorm_)) + sizeof(num_groups_));
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet.RPN)
}

void VoxelNet_RPN::SharedCtor() {
  module_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_groupnorm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_groups_) -
      reinterpret_cast<char*>(&use_groupnorm_)) + sizeof(num_groups_));
  _cached_size_ = 0;
}

VoxelNet_RPN::~VoxelNet_RPN() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet.RPN)
  SharedDtor();
}

void VoxelNet_RPN::SharedDtor() {
  module_class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoxelNet_RPN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoxelNet_RPN::descriptor() {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoxelNet_RPN& VoxelNet_RPN::default_instance() {
  protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoxelNet_RPN* VoxelNet_RPN::New(::google::protobuf::Arena* arena) const {
  VoxelNet_RPN* n = new VoxelNet_RPN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoxelNet_RPN::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet.RPN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_nums_.Clear();
  layer_strides_.Clear();
  num_filters_.Clear();
  upsample_strides_.Clear();
  num_upsample_filters_.Clear();
  module_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_groupnorm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_groups_) -
      reinterpret_cast<char*>(&use_groupnorm_)) + sizeof(num_groups_));
  _internal_metadata_.Clear();
}

bool VoxelNet_RPN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet.RPN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module_class_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.VoxelNet.RPN.module_class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 layer_nums = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_layer_nums())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_layer_nums())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 layer_strides = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_layer_strides())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_layer_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_filters())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_num_filters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 upsample_strides = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_upsample_strides())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_upsample_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_upsample_filters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_upsample_filters())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_num_upsample_filters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_groupnorm = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_groupnorm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_groups = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet.RPN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet.RPN)
  return false;
#undef DO_
}

void VoxelNet_RPN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet.RPN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.RPN.module_class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module_class_name(), output);
  }

  // repeated uint32 layer_nums = 2;
  if (this->layer_nums_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _layer_nums_cached_byte_size_));
  }
  for (int i = 0, n = this->layer_nums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->layer_nums(i), output);
  }

  // repeated uint32 layer_strides = 3;
  if (this->layer_strides_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _layer_strides_cached_byte_size_));
  }
  for (int i = 0, n = this->layer_strides_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->layer_strides(i), output);
  }

  // repeated uint32 num_filters = 4;
  if (this->num_filters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _num_filters_cached_byte_size_));
  }
  for (int i = 0, n = this->num_filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_filters(i), output);
  }

  // repeated uint32 upsample_strides = 5;
  if (this->upsample_strides_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _upsample_strides_cached_byte_size_));
  }
  for (int i = 0, n = this->upsample_strides_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->upsample_strides(i), output);
  }

  // repeated uint32 num_upsample_filters = 6;
  if (this->num_upsample_filters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _num_upsample_filters_cached_byte_size_));
  }
  for (int i = 0, n = this->num_upsample_filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_upsample_filters(i), output);
  }

  // bool use_groupnorm = 7;
  if (this->use_groupnorm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_groupnorm(), output);
  }

  // uint32 num_groups = 8;
  if (this->num_groups() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_groups(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet.RPN)
}

::google::protobuf::uint8* VoxelNet_RPN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet.RPN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_class_name().data(), static_cast<int>(this->module_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.VoxelNet.RPN.module_class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_class_name(), target);
  }

  // repeated uint32 layer_nums = 2;
  if (this->layer_nums_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _layer_nums_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->layer_nums_, target);
  }

  // repeated uint32 layer_strides = 3;
  if (this->layer_strides_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _layer_strides_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->layer_strides_, target);
  }

  // repeated uint32 num_filters = 4;
  if (this->num_filters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _num_filters_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_filters_, target);
  }

  // repeated uint32 upsample_strides = 5;
  if (this->upsample_strides_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _upsample_strides_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->upsample_strides_, target);
  }

  // repeated uint32 num_upsample_filters = 6;
  if (this->num_upsample_filters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _num_upsample_filters_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_upsample_filters_, target);
  }

  // bool use_groupnorm = 7;
  if (this->use_groupnorm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_groupnorm(), target);
  }

  // uint32 num_groups = 8;
  if (this->num_groups() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_groups(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet.RPN)
  return target;
}

size_t VoxelNet_RPN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet.RPN)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 layer_nums = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->layer_nums_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _layer_nums_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 layer_strides = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->layer_strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _layer_strides_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 num_filters = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_filters_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _num_filters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 upsample_strides = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->upsample_strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _upsample_strides_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 num_upsample_filters = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_upsample_filters_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _num_upsample_filters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string module_class_name = 1;
  if (this->module_class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_class_name());
  }

  // bool use_groupnorm = 7;
  if (this->use_groupnorm() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_groups = 8;
  if (this->num_groups() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_groups());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoxelNet_RPN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet.RPN)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet_RPN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoxelNet_RPN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet.RPN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet.RPN)
    MergeFrom(*source);
  }
}

void VoxelNet_RPN::MergeFrom(const VoxelNet_RPN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet.RPN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_nums_.MergeFrom(from.layer_nums_);
  layer_strides_.MergeFrom(from.layer_strides_);
  num_filters_.MergeFrom(from.num_filters_);
  upsample_strides_.MergeFrom(from.upsample_strides_);
  num_upsample_filters_.MergeFrom(from.num_upsample_filters_);
  if (from.module_class_name().size() > 0) {

    module_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_class_name_);
  }
  if (from.use_groupnorm() != 0) {
    set_use_groupnorm(from.use_groupnorm());
  }
  if (from.num_groups() != 0) {
    set_num_groups(from.num_groups());
  }
}

void VoxelNet_RPN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet.RPN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet_RPN::CopyFrom(const VoxelNet_RPN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet.RPN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet_RPN::IsInitialized() const {
  return true;
}

void VoxelNet_RPN::Swap(VoxelNet_RPN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoxelNet_RPN::InternalSwap(VoxelNet_RPN* other) {
  using std::swap;
  layer_nums_.InternalSwap(&other->layer_nums_);
  layer_strides_.InternalSwap(&other->layer_strides_);
  num_filters_.InternalSwap(&other->num_filters_);
  upsample_strides_.InternalSwap(&other->upsample_strides_);
  num_upsample_filters_.InternalSwap(&other->num_upsample_filters_);
  module_class_name_.Swap(&other->module_class_name_);
  swap(use_groupnorm_, other->use_groupnorm_);
  swap(num_groups_, other->num_groups_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoxelNet_RPN::GetMetadata() const {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoxelNet_RPN

// string module_class_name = 1;
void VoxelNet_RPN::clear_module_class_name() {
  module_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VoxelNet_RPN::module_class_name() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.module_class_name)
  return module_class_name_.GetNoArena();
}
void VoxelNet_RPN::set_module_class_name(const ::std::string& value) {
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.module_class_name)
}
#if LANG_CXX11
void VoxelNet_RPN::set_module_class_name(::std::string&& value) {
  
  module_class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.VoxelNet.RPN.module_class_name)
}
#endif
void VoxelNet_RPN::set_module_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.VoxelNet.RPN.module_class_name)
}
void VoxelNet_RPN::set_module_class_name(const char* value, size_t size) {
  
  module_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.VoxelNet.RPN.module_class_name)
}
::std::string* VoxelNet_RPN::mutable_module_class_name() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.RPN.module_class_name)
  return module_class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoxelNet_RPN::release_module_class_name() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.RPN.module_class_name)
  
  return module_class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoxelNet_RPN::set_allocated_module_class_name(::std::string* module_class_name) {
  if (module_class_name != NULL) {
    
  } else {
    
  }
  module_class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_class_name);
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.RPN.module_class_name)
}

// repeated uint32 layer_nums = 2;
int VoxelNet_RPN::layer_nums_size() const {
  return layer_nums_.size();
}
void VoxelNet_RPN::clear_layer_nums() {
  layer_nums_.Clear();
}
::google::protobuf::uint32 VoxelNet_RPN::layer_nums(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.layer_nums)
  return layer_nums_.Get(index);
}
void VoxelNet_RPN::set_layer_nums(int index, ::google::protobuf::uint32 value) {
  layer_nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.layer_nums)
}
void VoxelNet_RPN::add_layer_nums(::google::protobuf::uint32 value) {
  layer_nums_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.RPN.layer_nums)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_RPN::layer_nums() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.RPN.layer_nums)
  return layer_nums_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_RPN::mutable_layer_nums() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.RPN.layer_nums)
  return &layer_nums_;
}

// repeated uint32 layer_strides = 3;
int VoxelNet_RPN::layer_strides_size() const {
  return layer_strides_.size();
}
void VoxelNet_RPN::clear_layer_strides() {
  layer_strides_.Clear();
}
::google::protobuf::uint32 VoxelNet_RPN::layer_strides(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.layer_strides)
  return layer_strides_.Get(index);
}
void VoxelNet_RPN::set_layer_strides(int index, ::google::protobuf::uint32 value) {
  layer_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.layer_strides)
}
void VoxelNet_RPN::add_layer_strides(::google::protobuf::uint32 value) {
  layer_strides_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.RPN.layer_strides)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_RPN::layer_strides() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.RPN.layer_strides)
  return layer_strides_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_RPN::mutable_layer_strides() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.RPN.layer_strides)
  return &layer_strides_;
}

// repeated uint32 num_filters = 4;
int VoxelNet_RPN::num_filters_size() const {
  return num_filters_.size();
}
void VoxelNet_RPN::clear_num_filters() {
  num_filters_.Clear();
}
::google::protobuf::uint32 VoxelNet_RPN::num_filters(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.num_filters)
  return num_filters_.Get(index);
}
void VoxelNet_RPN::set_num_filters(int index, ::google::protobuf::uint32 value) {
  num_filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.num_filters)
}
void VoxelNet_RPN::add_num_filters(::google::protobuf::uint32 value) {
  num_filters_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.RPN.num_filters)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_RPN::num_filters() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.RPN.num_filters)
  return num_filters_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_RPN::mutable_num_filters() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.RPN.num_filters)
  return &num_filters_;
}

// repeated uint32 upsample_strides = 5;
int VoxelNet_RPN::upsample_strides_size() const {
  return upsample_strides_.size();
}
void VoxelNet_RPN::clear_upsample_strides() {
  upsample_strides_.Clear();
}
::google::protobuf::uint32 VoxelNet_RPN::upsample_strides(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.upsample_strides)
  return upsample_strides_.Get(index);
}
void VoxelNet_RPN::set_upsample_strides(int index, ::google::protobuf::uint32 value) {
  upsample_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.upsample_strides)
}
void VoxelNet_RPN::add_upsample_strides(::google::protobuf::uint32 value) {
  upsample_strides_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.RPN.upsample_strides)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_RPN::upsample_strides() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.RPN.upsample_strides)
  return upsample_strides_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_RPN::mutable_upsample_strides() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.RPN.upsample_strides)
  return &upsample_strides_;
}

// repeated uint32 num_upsample_filters = 6;
int VoxelNet_RPN::num_upsample_filters_size() const {
  return num_upsample_filters_.size();
}
void VoxelNet_RPN::clear_num_upsample_filters() {
  num_upsample_filters_.Clear();
}
::google::protobuf::uint32 VoxelNet_RPN::num_upsample_filters(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.num_upsample_filters)
  return num_upsample_filters_.Get(index);
}
void VoxelNet_RPN::set_num_upsample_filters(int index, ::google::protobuf::uint32 value) {
  num_upsample_filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.num_upsample_filters)
}
void VoxelNet_RPN::add_num_upsample_filters(::google::protobuf::uint32 value) {
  num_upsample_filters_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.RPN.num_upsample_filters)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelNet_RPN::num_upsample_filters() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.RPN.num_upsample_filters)
  return num_upsample_filters_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelNet_RPN::mutable_num_upsample_filters() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.RPN.num_upsample_filters)
  return &num_upsample_filters_;
}

// bool use_groupnorm = 7;
void VoxelNet_RPN::clear_use_groupnorm() {
  use_groupnorm_ = false;
}
bool VoxelNet_RPN::use_groupnorm() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.use_groupnorm)
  return use_groupnorm_;
}
void VoxelNet_RPN::set_use_groupnorm(bool value) {
  
  use_groupnorm_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.use_groupnorm)
}

// uint32 num_groups = 8;
void VoxelNet_RPN::clear_num_groups() {
  num_groups_ = 0u;
}
::google::protobuf::uint32 VoxelNet_RPN::num_groups() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.RPN.num_groups)
  return num_groups_;
}
void VoxelNet_RPN::set_num_groups(::google::protobuf::uint32 value) {
  
  num_groups_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.RPN.num_groups)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoxelNet::kNumClassFieldNumber;
const int VoxelNet::kVoxelFeatureExtractorFieldNumber;
const int VoxelNet::kMiddleFeatureExtractorFieldNumber;
const int VoxelNet::kRpnFieldNumber;
const int VoxelNet::kUseSigmoidScoreFieldNumber;
const int VoxelNet::kLossFieldNumber;
const int VoxelNet::kEncodeRadErrorBySinFieldNumber;
const int VoxelNet::kEncodeBackgroundAsZerosFieldNumber;
const int VoxelNet::kUseAuxClassifierFieldNumber;
const int VoxelNet::kUseRotateNmsFieldNumber;
const int VoxelNet::kUseMultiClassNmsFieldNumber;
const int VoxelNet::kNmsPreMaxSizeFieldNumber;
const int VoxelNet::kNmsPostMaxSizeFieldNumber;
const int VoxelNet::kNmsScoreThresholdFieldNumber;
const int VoxelNet::kNmsIouThresholdFieldNumber;
const int VoxelNet::kPostCenterLimitRangeFieldNumber;
const int VoxelNet::kUseDirectionClassifierFieldNumber;
const int VoxelNet::kDirectionLossWeightFieldNumber;
const int VoxelNet::kPosClassWeightFieldNumber;
const int VoxelNet::kNegClassWeightFieldNumber;
const int VoxelNet::kLossNormTypeFieldNumber;
const int VoxelNet::kUseBevFieldNumber;
const int VoxelNet::kWithoutReflectivityFieldNumber;
const int VoxelNet::kEncodeAngleToVectorFieldNumber;
const int VoxelNet::kBoxCoderFieldNumber;
const int VoxelNet::kTargetAssignerFieldNumber;
const int VoxelNet::kLidarInputFieldNumber;
const int VoxelNet::kNumPointFeaturesFieldNumber;
const int VoxelNet::kVoxelGeneratorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoxelNet::VoxelNet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelNet)
}
VoxelNet::VoxelNet(const VoxelNet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      post_center_limit_range_(from.post_center_limit_range_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voxel_feature_extractor()) {
    voxel_feature_extractor_ = new ::second::protos::VoxelNet_VoxelFeatureExtractor(*from.voxel_feature_extractor_);
  } else {
    voxel_feature_extractor_ = NULL;
  }
  if (from.has_middle_feature_extractor()) {
    middle_feature_extractor_ = new ::second::protos::VoxelNet_MiddleFeatureExtractor(*from.middle_feature_extractor_);
  } else {
    middle_feature_extractor_ = NULL;
  }
  if (from.has_rpn()) {
    rpn_ = new ::second::protos::VoxelNet_RPN(*from.rpn_);
  } else {
    rpn_ = NULL;
  }
  if (from.has_loss()) {
    loss_ = new ::second::protos::Loss(*from.loss_);
  } else {
    loss_ = NULL;
  }
  if (from.has_box_coder()) {
    box_coder_ = new ::second::protos::BoxCoder(*from.box_coder_);
  } else {
    box_coder_ = NULL;
  }
  if (from.has_target_assigner()) {
    target_assigner_ = new ::second::protos::TargetAssigner(*from.target_assigner_);
  } else {
    target_assigner_ = NULL;
  }
  if (from.has_voxel_generator()) {
    voxel_generator_ = new ::second::protos::VoxelGenerator(*from.voxel_generator_);
  } else {
    voxel_generator_ = NULL;
  }
  ::memcpy(&num_class_, &from.num_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_point_features_) -
    reinterpret_cast<char*>(&num_class_)) + sizeof(num_point_features_));
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelNet)
}

void VoxelNet::SharedCtor() {
  ::memset(&voxel_feature_extractor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_point_features_) -
      reinterpret_cast<char*>(&voxel_feature_extractor_)) + sizeof(num_point_features_));
  _cached_size_ = 0;
}

VoxelNet::~VoxelNet() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelNet)
  SharedDtor();
}

void VoxelNet::SharedDtor() {
  if (this != internal_default_instance()) delete voxel_feature_extractor_;
  if (this != internal_default_instance()) delete middle_feature_extractor_;
  if (this != internal_default_instance()) delete rpn_;
  if (this != internal_default_instance()) delete loss_;
  if (this != internal_default_instance()) delete box_coder_;
  if (this != internal_default_instance()) delete target_assigner_;
  if (this != internal_default_instance()) delete voxel_generator_;
}

void VoxelNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoxelNet::descriptor() {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoxelNet& VoxelNet::default_instance() {
  protobuf_second_2fprotos_2fsecond_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoxelNet* VoxelNet::New(::google::protobuf::Arena* arena) const {
  VoxelNet* n = new VoxelNet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoxelNet::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelNet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_center_limit_range_.Clear();
  if (GetArenaNoVirtual() == NULL && voxel_feature_extractor_ != NULL) {
    delete voxel_feature_extractor_;
  }
  voxel_feature_extractor_ = NULL;
  if (GetArenaNoVirtual() == NULL && middle_feature_extractor_ != NULL) {
    delete middle_feature_extractor_;
  }
  middle_feature_extractor_ = NULL;
  if (GetArenaNoVirtual() == NULL && rpn_ != NULL) {
    delete rpn_;
  }
  rpn_ = NULL;
  if (GetArenaNoVirtual() == NULL && loss_ != NULL) {
    delete loss_;
  }
  loss_ = NULL;
  if (GetArenaNoVirtual() == NULL && box_coder_ != NULL) {
    delete box_coder_;
  }
  box_coder_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_assigner_ != NULL) {
    delete target_assigner_;
  }
  target_assigner_ = NULL;
  if (GetArenaNoVirtual() == NULL && voxel_generator_ != NULL) {
    delete voxel_generator_;
  }
  voxel_generator_ = NULL;
  ::memset(&num_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_point_features_) -
      reinterpret_cast<char*>(&num_class_)) + sizeof(num_point_features_));
  _internal_metadata_.Clear();
}

bool VoxelNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelNet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_class = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voxel_feature_extractor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_middle_feature_extractor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.RPN rpn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_sigmoid_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sigmoid_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Loss loss = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_rad_error_by_sin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_rad_error_by_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_background_as_zeros = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_background_as_zeros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_aux_classifier = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_aux_classifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_rotate_nms = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_rotate_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_multi_class_nms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_multi_class_nms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nms_pre_max_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nms_pre_max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nms_post_max_size = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nms_post_max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float nms_score_threshold = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float nms_iou_threshold = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float post_center_limit_range = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_post_center_limit_range())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 130u, input, this->mutable_post_center_limit_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_direction_classifier = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_direction_classifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float direction_loss_weight = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos_class_weight = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_class_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float neg_class_weight = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_class_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loss_norm_type(static_cast< ::second::protos::VoxelNet_LossNormType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_bev = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_bev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool without_reflectivity = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &without_reflectivity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_angle_to_vector = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_angle_to_vector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.BoxCoder box_coder = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_coder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.TargetAssigner target_assigner = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_assigner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lidar_input = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lidar_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_point_features = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_point_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.VoxelGenerator voxel_generator = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voxel_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelNet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelNet)
  return false;
#undef DO_
}

void VoxelNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelNet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_class = 1;
  if (this->num_class() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_class(), output);
  }

  // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
  if (this->has_voxel_feature_extractor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->voxel_feature_extractor_, output);
  }

  // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
  if (this->has_middle_feature_extractor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->middle_feature_extractor_, output);
  }

  // .second.protos.VoxelNet.RPN rpn = 4;
  if (this->has_rpn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rpn_, output);
  }

  // bool use_sigmoid_score = 5;
  if (this->use_sigmoid_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_sigmoid_score(), output);
  }

  // .second.protos.Loss loss = 6;
  if (this->has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->loss_, output);
  }

  // bool encode_rad_error_by_sin = 7;
  if (this->encode_rad_error_by_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encode_rad_error_by_sin(), output);
  }

  // bool encode_background_as_zeros = 8;
  if (this->encode_background_as_zeros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->encode_background_as_zeros(), output);
  }

  // bool use_aux_classifier = 9;
  if (this->use_aux_classifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_aux_classifier(), output);
  }

  // bool use_rotate_nms = 10;
  if (this->use_rotate_nms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_rotate_nms(), output);
  }

  // bool use_multi_class_nms = 11;
  if (this->use_multi_class_nms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_multi_class_nms(), output);
  }

  // uint32 nms_pre_max_size = 12;
  if (this->nms_pre_max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nms_pre_max_size(), output);
  }

  // uint32 nms_post_max_size = 13;
  if (this->nms_post_max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nms_post_max_size(), output);
  }

  // float nms_score_threshold = 14;
  if (this->nms_score_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->nms_score_threshold(), output);
  }

  // float nms_iou_threshold = 15;
  if (this->nms_iou_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->nms_iou_threshold(), output);
  }

  // repeated float post_center_limit_range = 16;
  if (this->post_center_limit_range_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _post_center_limit_range_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->post_center_limit_range().data(), this->post_center_limit_range_size(), output);
  }

  // bool use_direction_classifier = 17;
  if (this->use_direction_classifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->use_direction_classifier(), output);
  }

  // float direction_loss_weight = 18;
  if (this->direction_loss_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->direction_loss_weight(), output);
  }

  // float pos_class_weight = 19;
  if (this->pos_class_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->pos_class_weight(), output);
  }

  // float neg_class_weight = 20;
  if (this->neg_class_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->neg_class_weight(), output);
  }

  // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
  if (this->loss_norm_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->loss_norm_type(), output);
  }

  // bool use_bev = 22;
  if (this->use_bev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->use_bev(), output);
  }

  // bool without_reflectivity = 23;
  if (this->without_reflectivity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->without_reflectivity(), output);
  }

  // bool encode_angle_to_vector = 24;
  if (this->encode_angle_to_vector() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->encode_angle_to_vector(), output);
  }

  // .second.protos.BoxCoder box_coder = 25;
  if (this->has_box_coder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->box_coder_, output);
  }

  // .second.protos.TargetAssigner target_assigner = 26;
  if (this->has_target_assigner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->target_assigner_, output);
  }

  // bool lidar_input = 27;
  if (this->lidar_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->lidar_input(), output);
  }

  // uint32 num_point_features = 28;
  if (this->num_point_features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->num_point_features(), output);
  }

  // .second.protos.VoxelGenerator voxel_generator = 29;
  if (this->has_voxel_generator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->voxel_generator_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelNet)
}

::google::protobuf::uint8* VoxelNet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelNet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_class = 1;
  if (this->num_class() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_class(), target);
  }

  // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
  if (this->has_voxel_feature_extractor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->voxel_feature_extractor_, deterministic, target);
  }

  // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
  if (this->has_middle_feature_extractor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->middle_feature_extractor_, deterministic, target);
  }

  // .second.protos.VoxelNet.RPN rpn = 4;
  if (this->has_rpn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rpn_, deterministic, target);
  }

  // bool use_sigmoid_score = 5;
  if (this->use_sigmoid_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_sigmoid_score(), target);
  }

  // .second.protos.Loss loss = 6;
  if (this->has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->loss_, deterministic, target);
  }

  // bool encode_rad_error_by_sin = 7;
  if (this->encode_rad_error_by_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encode_rad_error_by_sin(), target);
  }

  // bool encode_background_as_zeros = 8;
  if (this->encode_background_as_zeros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->encode_background_as_zeros(), target);
  }

  // bool use_aux_classifier = 9;
  if (this->use_aux_classifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_aux_classifier(), target);
  }

  // bool use_rotate_nms = 10;
  if (this->use_rotate_nms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_rotate_nms(), target);
  }

  // bool use_multi_class_nms = 11;
  if (this->use_multi_class_nms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_multi_class_nms(), target);
  }

  // uint32 nms_pre_max_size = 12;
  if (this->nms_pre_max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->nms_pre_max_size(), target);
  }

  // uint32 nms_post_max_size = 13;
  if (this->nms_post_max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nms_post_max_size(), target);
  }

  // float nms_score_threshold = 14;
  if (this->nms_score_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->nms_score_threshold(), target);
  }

  // float nms_iou_threshold = 15;
  if (this->nms_iou_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->nms_iou_threshold(), target);
  }

  // repeated float post_center_limit_range = 16;
  if (this->post_center_limit_range_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _post_center_limit_range_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->post_center_limit_range_, target);
  }

  // bool use_direction_classifier = 17;
  if (this->use_direction_classifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->use_direction_classifier(), target);
  }

  // float direction_loss_weight = 18;
  if (this->direction_loss_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->direction_loss_weight(), target);
  }

  // float pos_class_weight = 19;
  if (this->pos_class_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->pos_class_weight(), target);
  }

  // float neg_class_weight = 20;
  if (this->neg_class_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->neg_class_weight(), target);
  }

  // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
  if (this->loss_norm_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->loss_norm_type(), target);
  }

  // bool use_bev = 22;
  if (this->use_bev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->use_bev(), target);
  }

  // bool without_reflectivity = 23;
  if (this->without_reflectivity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->without_reflectivity(), target);
  }

  // bool encode_angle_to_vector = 24;
  if (this->encode_angle_to_vector() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->encode_angle_to_vector(), target);
  }

  // .second.protos.BoxCoder box_coder = 25;
  if (this->has_box_coder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->box_coder_, deterministic, target);
  }

  // .second.protos.TargetAssigner target_assigner = 26;
  if (this->has_target_assigner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->target_assigner_, deterministic, target);
  }

  // bool lidar_input = 27;
  if (this->lidar_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->lidar_input(), target);
  }

  // uint32 num_point_features = 28;
  if (this->num_point_features() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->num_point_features(), target);
  }

  // .second.protos.VoxelGenerator voxel_generator = 29;
  if (this->has_voxel_generator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->voxel_generator_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelNet)
  return target;
}

size_t VoxelNet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelNet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float post_center_limit_range = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->post_center_limit_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _post_center_limit_range_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
  if (this->has_voxel_feature_extractor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voxel_feature_extractor_);
  }

  // .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
  if (this->has_middle_feature_extractor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->middle_feature_extractor_);
  }

  // .second.protos.VoxelNet.RPN rpn = 4;
  if (this->has_rpn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rpn_);
  }

  // .second.protos.Loss loss = 6;
  if (this->has_loss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loss_);
  }

  // .second.protos.BoxCoder box_coder = 25;
  if (this->has_box_coder()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_coder_);
  }

  // .second.protos.TargetAssigner target_assigner = 26;
  if (this->has_target_assigner()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_assigner_);
  }

  // .second.protos.VoxelGenerator voxel_generator = 29;
  if (this->has_voxel_generator()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voxel_generator_);
  }

  // uint32 num_class = 1;
  if (this->num_class() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_class());
  }

  // bool use_sigmoid_score = 5;
  if (this->use_sigmoid_score() != 0) {
    total_size += 1 + 1;
  }

  // bool encode_rad_error_by_sin = 7;
  if (this->encode_rad_error_by_sin() != 0) {
    total_size += 1 + 1;
  }

  // bool encode_background_as_zeros = 8;
  if (this->encode_background_as_zeros() != 0) {
    total_size += 1 + 1;
  }

  // bool use_aux_classifier = 9;
  if (this->use_aux_classifier() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nms_pre_max_size = 12;
  if (this->nms_pre_max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nms_pre_max_size());
  }

  // uint32 nms_post_max_size = 13;
  if (this->nms_post_max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nms_post_max_size());
  }

  // float nms_score_threshold = 14;
  if (this->nms_score_threshold() != 0) {
    total_size += 1 + 4;
  }

  // float nms_iou_threshold = 15;
  if (this->nms_iou_threshold() != 0) {
    total_size += 1 + 4;
  }

  // bool use_rotate_nms = 10;
  if (this->use_rotate_nms() != 0) {
    total_size += 1 + 1;
  }

  // bool use_multi_class_nms = 11;
  if (this->use_multi_class_nms() != 0) {
    total_size += 1 + 1;
  }

  // bool use_direction_classifier = 17;
  if (this->use_direction_classifier() != 0) {
    total_size += 2 + 1;
  }

  // bool use_bev = 22;
  if (this->use_bev() != 0) {
    total_size += 2 + 1;
  }

  // float direction_loss_weight = 18;
  if (this->direction_loss_weight() != 0) {
    total_size += 2 + 4;
  }

  // float pos_class_weight = 19;
  if (this->pos_class_weight() != 0) {
    total_size += 2 + 4;
  }

  // float neg_class_weight = 20;
  if (this->neg_class_weight() != 0) {
    total_size += 2 + 4;
  }

  // .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
  if (this->loss_norm_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loss_norm_type());
  }

  // bool without_reflectivity = 23;
  if (this->without_reflectivity() != 0) {
    total_size += 2 + 1;
  }

  // bool encode_angle_to_vector = 24;
  if (this->encode_angle_to_vector() != 0) {
    total_size += 2 + 1;
  }

  // bool lidar_input = 27;
  if (this->lidar_input() != 0) {
    total_size += 2 + 1;
  }

  // uint32 num_point_features = 28;
  if (this->num_point_features() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_point_features());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoxelNet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelNet)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelNet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoxelNet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelNet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelNet)
    MergeFrom(*source);
  }
}

void VoxelNet::MergeFrom(const VoxelNet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelNet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  post_center_limit_range_.MergeFrom(from.post_center_limit_range_);
  if (from.has_voxel_feature_extractor()) {
    mutable_voxel_feature_extractor()->::second::protos::VoxelNet_VoxelFeatureExtractor::MergeFrom(from.voxel_feature_extractor());
  }
  if (from.has_middle_feature_extractor()) {
    mutable_middle_feature_extractor()->::second::protos::VoxelNet_MiddleFeatureExtractor::MergeFrom(from.middle_feature_extractor());
  }
  if (from.has_rpn()) {
    mutable_rpn()->::second::protos::VoxelNet_RPN::MergeFrom(from.rpn());
  }
  if (from.has_loss()) {
    mutable_loss()->::second::protos::Loss::MergeFrom(from.loss());
  }
  if (from.has_box_coder()) {
    mutable_box_coder()->::second::protos::BoxCoder::MergeFrom(from.box_coder());
  }
  if (from.has_target_assigner()) {
    mutable_target_assigner()->::second::protos::TargetAssigner::MergeFrom(from.target_assigner());
  }
  if (from.has_voxel_generator()) {
    mutable_voxel_generator()->::second::protos::VoxelGenerator::MergeFrom(from.voxel_generator());
  }
  if (from.num_class() != 0) {
    set_num_class(from.num_class());
  }
  if (from.use_sigmoid_score() != 0) {
    set_use_sigmoid_score(from.use_sigmoid_score());
  }
  if (from.encode_rad_error_by_sin() != 0) {
    set_encode_rad_error_by_sin(from.encode_rad_error_by_sin());
  }
  if (from.encode_background_as_zeros() != 0) {
    set_encode_background_as_zeros(from.encode_background_as_zeros());
  }
  if (from.use_aux_classifier() != 0) {
    set_use_aux_classifier(from.use_aux_classifier());
  }
  if (from.nms_pre_max_size() != 0) {
    set_nms_pre_max_size(from.nms_pre_max_size());
  }
  if (from.nms_post_max_size() != 0) {
    set_nms_post_max_size(from.nms_post_max_size());
  }
  if (from.nms_score_threshold() != 0) {
    set_nms_score_threshold(from.nms_score_threshold());
  }
  if (from.nms_iou_threshold() != 0) {
    set_nms_iou_threshold(from.nms_iou_threshold());
  }
  if (from.use_rotate_nms() != 0) {
    set_use_rotate_nms(from.use_rotate_nms());
  }
  if (from.use_multi_class_nms() != 0) {
    set_use_multi_class_nms(from.use_multi_class_nms());
  }
  if (from.use_direction_classifier() != 0) {
    set_use_direction_classifier(from.use_direction_classifier());
  }
  if (from.use_bev() != 0) {
    set_use_bev(from.use_bev());
  }
  if (from.direction_loss_weight() != 0) {
    set_direction_loss_weight(from.direction_loss_weight());
  }
  if (from.pos_class_weight() != 0) {
    set_pos_class_weight(from.pos_class_weight());
  }
  if (from.neg_class_weight() != 0) {
    set_neg_class_weight(from.neg_class_weight());
  }
  if (from.loss_norm_type() != 0) {
    set_loss_norm_type(from.loss_norm_type());
  }
  if (from.without_reflectivity() != 0) {
    set_without_reflectivity(from.without_reflectivity());
  }
  if (from.encode_angle_to_vector() != 0) {
    set_encode_angle_to_vector(from.encode_angle_to_vector());
  }
  if (from.lidar_input() != 0) {
    set_lidar_input(from.lidar_input());
  }
  if (from.num_point_features() != 0) {
    set_num_point_features(from.num_point_features());
  }
}

void VoxelNet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelNet::CopyFrom(const VoxelNet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelNet::IsInitialized() const {
  return true;
}

void VoxelNet::Swap(VoxelNet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoxelNet::InternalSwap(VoxelNet* other) {
  using std::swap;
  post_center_limit_range_.InternalSwap(&other->post_center_limit_range_);
  swap(voxel_feature_extractor_, other->voxel_feature_extractor_);
  swap(middle_feature_extractor_, other->middle_feature_extractor_);
  swap(rpn_, other->rpn_);
  swap(loss_, other->loss_);
  swap(box_coder_, other->box_coder_);
  swap(target_assigner_, other->target_assigner_);
  swap(voxel_generator_, other->voxel_generator_);
  swap(num_class_, other->num_class_);
  swap(use_sigmoid_score_, other->use_sigmoid_score_);
  swap(encode_rad_error_by_sin_, other->encode_rad_error_by_sin_);
  swap(encode_background_as_zeros_, other->encode_background_as_zeros_);
  swap(use_aux_classifier_, other->use_aux_classifier_);
  swap(nms_pre_max_size_, other->nms_pre_max_size_);
  swap(nms_post_max_size_, other->nms_post_max_size_);
  swap(nms_score_threshold_, other->nms_score_threshold_);
  swap(nms_iou_threshold_, other->nms_iou_threshold_);
  swap(use_rotate_nms_, other->use_rotate_nms_);
  swap(use_multi_class_nms_, other->use_multi_class_nms_);
  swap(use_direction_classifier_, other->use_direction_classifier_);
  swap(use_bev_, other->use_bev_);
  swap(direction_loss_weight_, other->direction_loss_weight_);
  swap(pos_class_weight_, other->pos_class_weight_);
  swap(neg_class_weight_, other->neg_class_weight_);
  swap(loss_norm_type_, other->loss_norm_type_);
  swap(without_reflectivity_, other->without_reflectivity_);
  swap(encode_angle_to_vector_, other->encode_angle_to_vector_);
  swap(lidar_input_, other->lidar_input_);
  swap(num_point_features_, other->num_point_features_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoxelNet::GetMetadata() const {
  protobuf_second_2fprotos_2fsecond_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsecond_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoxelNet

// uint32 num_class = 1;
void VoxelNet::clear_num_class() {
  num_class_ = 0u;
}
::google::protobuf::uint32 VoxelNet::num_class() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.num_class)
  return num_class_;
}
void VoxelNet::set_num_class(::google::protobuf::uint32 value) {
  
  num_class_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.num_class)
}

// .second.protos.VoxelNet.VoxelFeatureExtractor voxel_feature_extractor = 2;
bool VoxelNet::has_voxel_feature_extractor() const {
  return this != internal_default_instance() && voxel_feature_extractor_ != NULL;
}
void VoxelNet::clear_voxel_feature_extractor() {
  if (GetArenaNoVirtual() == NULL && voxel_feature_extractor_ != NULL) delete voxel_feature_extractor_;
  voxel_feature_extractor_ = NULL;
}
const ::second::protos::VoxelNet_VoxelFeatureExtractor& VoxelNet::voxel_feature_extractor() const {
  const ::second::protos::VoxelNet_VoxelFeatureExtractor* p = voxel_feature_extractor_;
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.voxel_feature_extractor)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::VoxelNet_VoxelFeatureExtractor*>(
      &::second::protos::_VoxelNet_VoxelFeatureExtractor_default_instance_);
}
::second::protos::VoxelNet_VoxelFeatureExtractor* VoxelNet::mutable_voxel_feature_extractor() {
  
  if (voxel_feature_extractor_ == NULL) {
    voxel_feature_extractor_ = new ::second::protos::VoxelNet_VoxelFeatureExtractor;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.voxel_feature_extractor)
  return voxel_feature_extractor_;
}
::second::protos::VoxelNet_VoxelFeatureExtractor* VoxelNet::release_voxel_feature_extractor() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.voxel_feature_extractor)
  
  ::second::protos::VoxelNet_VoxelFeatureExtractor* temp = voxel_feature_extractor_;
  voxel_feature_extractor_ = NULL;
  return temp;
}
void VoxelNet::set_allocated_voxel_feature_extractor(::second::protos::VoxelNet_VoxelFeatureExtractor* voxel_feature_extractor) {
  delete voxel_feature_extractor_;
  voxel_feature_extractor_ = voxel_feature_extractor;
  if (voxel_feature_extractor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.voxel_feature_extractor)
}

// .second.protos.VoxelNet.MiddleFeatureExtractor middle_feature_extractor = 3;
bool VoxelNet::has_middle_feature_extractor() const {
  return this != internal_default_instance() && middle_feature_extractor_ != NULL;
}
void VoxelNet::clear_middle_feature_extractor() {
  if (GetArenaNoVirtual() == NULL && middle_feature_extractor_ != NULL) delete middle_feature_extractor_;
  middle_feature_extractor_ = NULL;
}
const ::second::protos::VoxelNet_MiddleFeatureExtractor& VoxelNet::middle_feature_extractor() const {
  const ::second::protos::VoxelNet_MiddleFeatureExtractor* p = middle_feature_extractor_;
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.middle_feature_extractor)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::VoxelNet_MiddleFeatureExtractor*>(
      &::second::protos::_VoxelNet_MiddleFeatureExtractor_default_instance_);
}
::second::protos::VoxelNet_MiddleFeatureExtractor* VoxelNet::mutable_middle_feature_extractor() {
  
  if (middle_feature_extractor_ == NULL) {
    middle_feature_extractor_ = new ::second::protos::VoxelNet_MiddleFeatureExtractor;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.middle_feature_extractor)
  return middle_feature_extractor_;
}
::second::protos::VoxelNet_MiddleFeatureExtractor* VoxelNet::release_middle_feature_extractor() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.middle_feature_extractor)
  
  ::second::protos::VoxelNet_MiddleFeatureExtractor* temp = middle_feature_extractor_;
  middle_feature_extractor_ = NULL;
  return temp;
}
void VoxelNet::set_allocated_middle_feature_extractor(::second::protos::VoxelNet_MiddleFeatureExtractor* middle_feature_extractor) {
  delete middle_feature_extractor_;
  middle_feature_extractor_ = middle_feature_extractor;
  if (middle_feature_extractor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.middle_feature_extractor)
}

// .second.protos.VoxelNet.RPN rpn = 4;
bool VoxelNet::has_rpn() const {
  return this != internal_default_instance() && rpn_ != NULL;
}
void VoxelNet::clear_rpn() {
  if (GetArenaNoVirtual() == NULL && rpn_ != NULL) delete rpn_;
  rpn_ = NULL;
}
const ::second::protos::VoxelNet_RPN& VoxelNet::rpn() const {
  const ::second::protos::VoxelNet_RPN* p = rpn_;
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.rpn)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::VoxelNet_RPN*>(
      &::second::protos::_VoxelNet_RPN_default_instance_);
}
::second::protos::VoxelNet_RPN* VoxelNet::mutable_rpn() {
  
  if (rpn_ == NULL) {
    rpn_ = new ::second::protos::VoxelNet_RPN;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.rpn)
  return rpn_;
}
::second::protos::VoxelNet_RPN* VoxelNet::release_rpn() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.rpn)
  
  ::second::protos::VoxelNet_RPN* temp = rpn_;
  rpn_ = NULL;
  return temp;
}
void VoxelNet::set_allocated_rpn(::second::protos::VoxelNet_RPN* rpn) {
  delete rpn_;
  rpn_ = rpn;
  if (rpn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.rpn)
}

// bool use_sigmoid_score = 5;
void VoxelNet::clear_use_sigmoid_score() {
  use_sigmoid_score_ = false;
}
bool VoxelNet::use_sigmoid_score() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.use_sigmoid_score)
  return use_sigmoid_score_;
}
void VoxelNet::set_use_sigmoid_score(bool value) {
  
  use_sigmoid_score_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.use_sigmoid_score)
}

// .second.protos.Loss loss = 6;
bool VoxelNet::has_loss() const {
  return this != internal_default_instance() && loss_ != NULL;
}
void VoxelNet::clear_loss() {
  if (GetArenaNoVirtual() == NULL && loss_ != NULL) delete loss_;
  loss_ = NULL;
}
const ::second::protos::Loss& VoxelNet::loss() const {
  const ::second::protos::Loss* p = loss_;
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.loss)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::Loss*>(
      &::second::protos::_Loss_default_instance_);
}
::second::protos::Loss* VoxelNet::mutable_loss() {
  
  if (loss_ == NULL) {
    loss_ = new ::second::protos::Loss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.loss)
  return loss_;
}
::second::protos::Loss* VoxelNet::release_loss() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.loss)
  
  ::second::protos::Loss* temp = loss_;
  loss_ = NULL;
  return temp;
}
void VoxelNet::set_allocated_loss(::second::protos::Loss* loss) {
  delete loss_;
  loss_ = loss;
  if (loss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.loss)
}

// bool encode_rad_error_by_sin = 7;
void VoxelNet::clear_encode_rad_error_by_sin() {
  encode_rad_error_by_sin_ = false;
}
bool VoxelNet::encode_rad_error_by_sin() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.encode_rad_error_by_sin)
  return encode_rad_error_by_sin_;
}
void VoxelNet::set_encode_rad_error_by_sin(bool value) {
  
  encode_rad_error_by_sin_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.encode_rad_error_by_sin)
}

// bool encode_background_as_zeros = 8;
void VoxelNet::clear_encode_background_as_zeros() {
  encode_background_as_zeros_ = false;
}
bool VoxelNet::encode_background_as_zeros() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.encode_background_as_zeros)
  return encode_background_as_zeros_;
}
void VoxelNet::set_encode_background_as_zeros(bool value) {
  
  encode_background_as_zeros_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.encode_background_as_zeros)
}

// bool use_aux_classifier = 9;
void VoxelNet::clear_use_aux_classifier() {
  use_aux_classifier_ = false;
}
bool VoxelNet::use_aux_classifier() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.use_aux_classifier)
  return use_aux_classifier_;
}
void VoxelNet::set_use_aux_classifier(bool value) {
  
  use_aux_classifier_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.use_aux_classifier)
}

// bool use_rotate_nms = 10;
void VoxelNet::clear_use_rotate_nms() {
  use_rotate_nms_ = false;
}
bool VoxelNet::use_rotate_nms() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.use_rotate_nms)
  return use_rotate_nms_;
}
void VoxelNet::set_use_rotate_nms(bool value) {
  
  use_rotate_nms_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.use_rotate_nms)
}

// bool use_multi_class_nms = 11;
void VoxelNet::clear_use_multi_class_nms() {
  use_multi_class_nms_ = false;
}
bool VoxelNet::use_multi_class_nms() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.use_multi_class_nms)
  return use_multi_class_nms_;
}
void VoxelNet::set_use_multi_class_nms(bool value) {
  
  use_multi_class_nms_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.use_multi_class_nms)
}

// uint32 nms_pre_max_size = 12;
void VoxelNet::clear_nms_pre_max_size() {
  nms_pre_max_size_ = 0u;
}
::google::protobuf::uint32 VoxelNet::nms_pre_max_size() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.nms_pre_max_size)
  return nms_pre_max_size_;
}
void VoxelNet::set_nms_pre_max_size(::google::protobuf::uint32 value) {
  
  nms_pre_max_size_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.nms_pre_max_size)
}

// uint32 nms_post_max_size = 13;
void VoxelNet::clear_nms_post_max_size() {
  nms_post_max_size_ = 0u;
}
::google::protobuf::uint32 VoxelNet::nms_post_max_size() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.nms_post_max_size)
  return nms_post_max_size_;
}
void VoxelNet::set_nms_post_max_size(::google::protobuf::uint32 value) {
  
  nms_post_max_size_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.nms_post_max_size)
}

// float nms_score_threshold = 14;
void VoxelNet::clear_nms_score_threshold() {
  nms_score_threshold_ = 0;
}
float VoxelNet::nms_score_threshold() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.nms_score_threshold)
  return nms_score_threshold_;
}
void VoxelNet::set_nms_score_threshold(float value) {
  
  nms_score_threshold_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.nms_score_threshold)
}

// float nms_iou_threshold = 15;
void VoxelNet::clear_nms_iou_threshold() {
  nms_iou_threshold_ = 0;
}
float VoxelNet::nms_iou_threshold() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.nms_iou_threshold)
  return nms_iou_threshold_;
}
void VoxelNet::set_nms_iou_threshold(float value) {
  
  nms_iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.nms_iou_threshold)
}

// repeated float post_center_limit_range = 16;
int VoxelNet::post_center_limit_range_size() const {
  return post_center_limit_range_.size();
}
void VoxelNet::clear_post_center_limit_range() {
  post_center_limit_range_.Clear();
}
float VoxelNet::post_center_limit_range(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.post_center_limit_range)
  return post_center_limit_range_.Get(index);
}
void VoxelNet::set_post_center_limit_range(int index, float value) {
  post_center_limit_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.post_center_limit_range)
}
void VoxelNet::add_post_center_limit_range(float value) {
  post_center_limit_range_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelNet.post_center_limit_range)
}
const ::google::protobuf::RepeatedField< float >&
VoxelNet::post_center_limit_range() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelNet.post_center_limit_range)
  return post_center_limit_range_;
}
::google::protobuf::RepeatedField< float >*
VoxelNet::mutable_post_center_limit_range() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelNet.post_center_limit_range)
  return &post_center_limit_range_;
}

// bool use_direction_classifier = 17;
void VoxelNet::clear_use_direction_classifier() {
  use_direction_classifier_ = false;
}
bool VoxelNet::use_direction_classifier() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.use_direction_classifier)
  return use_direction_classifier_;
}
void VoxelNet::set_use_direction_classifier(bool value) {
  
  use_direction_classifier_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.use_direction_classifier)
}

// float direction_loss_weight = 18;
void VoxelNet::clear_direction_loss_weight() {
  direction_loss_weight_ = 0;
}
float VoxelNet::direction_loss_weight() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.direction_loss_weight)
  return direction_loss_weight_;
}
void VoxelNet::set_direction_loss_weight(float value) {
  
  direction_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.direction_loss_weight)
}

// float pos_class_weight = 19;
void VoxelNet::clear_pos_class_weight() {
  pos_class_weight_ = 0;
}
float VoxelNet::pos_class_weight() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.pos_class_weight)
  return pos_class_weight_;
}
void VoxelNet::set_pos_class_weight(float value) {
  
  pos_class_weight_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.pos_class_weight)
}

// float neg_class_weight = 20;
void VoxelNet::clear_neg_class_weight() {
  neg_class_weight_ = 0;
}
float VoxelNet::neg_class_weight() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.neg_class_weight)
  return neg_class_weight_;
}
void VoxelNet::set_neg_class_weight(float value) {
  
  neg_class_weight_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.neg_class_weight)
}

// .second.protos.VoxelNet.LossNormType loss_norm_type = 21;
void VoxelNet::clear_loss_norm_type() {
  loss_norm_type_ = 0;
}
::second::protos::VoxelNet_LossNormType VoxelNet::loss_norm_type() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.loss_norm_type)
  return static_cast< ::second::protos::VoxelNet_LossNormType >(loss_norm_type_);
}
void VoxelNet::set_loss_norm_type(::second::protos::VoxelNet_LossNormType value) {
  
  loss_norm_type_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.loss_norm_type)
}

// bool use_bev = 22;
void VoxelNet::clear_use_bev() {
  use_bev_ = false;
}
bool VoxelNet::use_bev() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.use_bev)
  return use_bev_;
}
void VoxelNet::set_use_bev(bool value) {
  
  use_bev_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.use_bev)
}

// bool without_reflectivity = 23;
void VoxelNet::clear_without_reflectivity() {
  without_reflectivity_ = false;
}
bool VoxelNet::without_reflectivity() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.without_reflectivity)
  return without_reflectivity_;
}
void VoxelNet::set_without_reflectivity(bool value) {
  
  without_reflectivity_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.without_reflectivity)
}

// bool encode_angle_to_vector = 24;
void VoxelNet::clear_encode_angle_to_vector() {
  encode_angle_to_vector_ = false;
}
bool VoxelNet::encode_angle_to_vector() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.encode_angle_to_vector)
  return encode_angle_to_vector_;
}
void VoxelNet::set_encode_angle_to_vector(bool value) {
  
  encode_angle_to_vector_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.encode_angle_to_vector)
}

// .second.protos.BoxCoder box_coder = 25;
bool VoxelNet::has_box_coder() const {
  return this != internal_default_instance() && box_coder_ != NULL;
}
void VoxelNet::clear_box_coder() {
  if (GetArenaNoVirtual() == NULL && box_coder_ != NULL) delete box_coder_;
  box_coder_ = NULL;
}
const ::second::protos::BoxCoder& VoxelNet::box_coder() const {
  const ::second::protos::BoxCoder* p = box_coder_;
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.box_coder)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::BoxCoder*>(
      &::second::protos::_BoxCoder_default_instance_);
}
::second::protos::BoxCoder* VoxelNet::mutable_box_coder() {
  
  if (box_coder_ == NULL) {
    box_coder_ = new ::second::protos::BoxCoder;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.box_coder)
  return box_coder_;
}
::second::protos::BoxCoder* VoxelNet::release_box_coder() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.box_coder)
  
  ::second::protos::BoxCoder* temp = box_coder_;
  box_coder_ = NULL;
  return temp;
}
void VoxelNet::set_allocated_box_coder(::second::protos::BoxCoder* box_coder) {
  delete box_coder_;
  box_coder_ = box_coder;
  if (box_coder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.box_coder)
}

// .second.protos.TargetAssigner target_assigner = 26;
bool VoxelNet::has_target_assigner() const {
  return this != internal_default_instance() && target_assigner_ != NULL;
}
void VoxelNet::clear_target_assigner() {
  if (GetArenaNoVirtual() == NULL && target_assigner_ != NULL) delete target_assigner_;
  target_assigner_ = NULL;
}
const ::second::protos::TargetAssigner& VoxelNet::target_assigner() const {
  const ::second::protos::TargetAssigner* p = target_assigner_;
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.target_assigner)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::TargetAssigner*>(
      &::second::protos::_TargetAssigner_default_instance_);
}
::second::protos::TargetAssigner* VoxelNet::mutable_target_assigner() {
  
  if (target_assigner_ == NULL) {
    target_assigner_ = new ::second::protos::TargetAssigner;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.target_assigner)
  return target_assigner_;
}
::second::protos::TargetAssigner* VoxelNet::release_target_assigner() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.target_assigner)
  
  ::second::protos::TargetAssigner* temp = target_assigner_;
  target_assigner_ = NULL;
  return temp;
}
void VoxelNet::set_allocated_target_assigner(::second::protos::TargetAssigner* target_assigner) {
  delete target_assigner_;
  target_assigner_ = target_assigner;
  if (target_assigner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.target_assigner)
}

// bool lidar_input = 27;
void VoxelNet::clear_lidar_input() {
  lidar_input_ = false;
}
bool VoxelNet::lidar_input() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.lidar_input)
  return lidar_input_;
}
void VoxelNet::set_lidar_input(bool value) {
  
  lidar_input_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.lidar_input)
}

// uint32 num_point_features = 28;
void VoxelNet::clear_num_point_features() {
  num_point_features_ = 0u;
}
::google::protobuf::uint32 VoxelNet::num_point_features() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.num_point_features)
  return num_point_features_;
}
void VoxelNet::set_num_point_features(::google::protobuf::uint32 value) {
  
  num_point_features_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelNet.num_point_features)
}

// .second.protos.VoxelGenerator voxel_generator = 29;
bool VoxelNet::has_voxel_generator() const {
  return this != internal_default_instance() && voxel_generator_ != NULL;
}
void VoxelNet::clear_voxel_generator() {
  if (GetArenaNoVirtual() == NULL && voxel_generator_ != NULL) delete voxel_generator_;
  voxel_generator_ = NULL;
}
const ::second::protos::VoxelGenerator& VoxelNet::voxel_generator() const {
  const ::second::protos::VoxelGenerator* p = voxel_generator_;
  // @@protoc_insertion_point(field_get:second.protos.VoxelNet.voxel_generator)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::VoxelGenerator*>(
      &::second::protos::_VoxelGenerator_default_instance_);
}
::second::protos::VoxelGenerator* VoxelNet::mutable_voxel_generator() {
  
  if (voxel_generator_ == NULL) {
    voxel_generator_ = new ::second::protos::VoxelGenerator;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.VoxelNet.voxel_generator)
  return voxel_generator_;
}
::second::protos::VoxelGenerator* VoxelNet::release_voxel_generator() {
  // @@protoc_insertion_point(field_release:second.protos.VoxelNet.voxel_generator)
  
  ::second::protos::VoxelGenerator* temp = voxel_generator_;
  voxel_generator_ = NULL;
  return temp;
}
void VoxelNet::set_allocated_voxel_generator(::second::protos::VoxelGenerator* voxel_generator) {
  delete voxel_generator_;
  voxel_generator_ = voxel_generator;
  if (voxel_generator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.VoxelNet.voxel_generator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)
