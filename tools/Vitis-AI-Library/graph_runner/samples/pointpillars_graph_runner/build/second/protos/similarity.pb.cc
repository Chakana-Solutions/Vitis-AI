// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/similarity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "second/protos/similarity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace second {
namespace protos {
class RegionSimilarityCalculatorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionSimilarityCalculator>
     _instance;
  const ::second::protos::RotateIouSimilarity* rotate_iou_similarity_;
  const ::second::protos::NearestIouSimilarity* nearest_iou_similarity_;
  const ::second::protos::DistanceSimilarity* distance_similarity_;
} _RegionSimilarityCalculator_default_instance_;
class RotateIouSimilarityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RotateIouSimilarity>
     _instance;
} _RotateIouSimilarity_default_instance_;
class NearestIouSimilarityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NearestIouSimilarity>
     _instance;
} _NearestIouSimilarity_default_instance_;
class DistanceSimilarityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DistanceSimilarity>
     _instance;
} _DistanceSimilarity_default_instance_;

namespace protobuf_second_2fprotos_2fsimilarity_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimilarityCalculator, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimilarityCalculator, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RegionSimilarityCalculatorDefaultTypeInternal, rotate_iou_similarity_),
  offsetof(RegionSimilarityCalculatorDefaultTypeInternal, nearest_iou_similarity_),
  offsetof(RegionSimilarityCalculatorDefaultTypeInternal, distance_similarity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSimilarityCalculator, region_similarity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotateIouSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestIouSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceSimilarity, distance_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceSimilarity, with_rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceSimilarity, rotation_alpha_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RegionSimilarityCalculator)},
  { 9, -1, sizeof(RotateIouSimilarity)},
  { 14, -1, sizeof(NearestIouSimilarity)},
  { 19, -1, sizeof(DistanceSimilarity)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionSimilarityCalculator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RotateIouSimilarity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NearestIouSimilarity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DistanceSimilarity_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "second/protos/similarity.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RegionSimilarityCalculator_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionSimilarityCalculator_default_instance_);_RotateIouSimilarity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RotateIouSimilarity_default_instance_);_NearestIouSimilarity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NearestIouSimilarity_default_instance_);_DistanceSimilarity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DistanceSimilarity_default_instance_);_RegionSimilarityCalculator_default_instance_.rotate_iou_similarity_ = const_cast< ::second::protos::RotateIouSimilarity*>(
      ::second::protos::RotateIouSimilarity::internal_default_instance());
  _RegionSimilarityCalculator_default_instance_.nearest_iou_similarity_ = const_cast< ::second::protos::NearestIouSimilarity*>(
      ::second::protos::NearestIouSimilarity::internal_default_instance());
  _RegionSimilarityCalculator_default_instance_.distance_similarity_ = const_cast< ::second::protos::DistanceSimilarity*>(
      ::second::protos::DistanceSimilarity::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036second/protos/similarity.proto\022\rsecond"
      ".protos\"\377\001\n\032RegionSimilarityCalculator\022C"
      "\n\025rotate_iou_similarity\030\001 \001(\0132\".second.p"
      "rotos.RotateIouSimilarityH\000\022E\n\026nearest_i"
      "ou_similarity\030\002 \001(\0132#.second.protos.Near"
      "estIouSimilarityH\000\022@\n\023distance_similarit"
      "y\030\003 \001(\0132!.second.protos.DistanceSimilari"
      "tyH\000B\023\n\021region_similarity\"\025\n\023RotateIouSi"
      "milarity\"\026\n\024NearestIouSimilarity\"Z\n\022Dist"
      "anceSimilarity\022\025\n\rdistance_norm\030\001 \001(\002\022\025\n"
      "\rwith_rotation\030\002 \001(\010\022\026\n\016rotation_alpha\030\003"
      " \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "second/protos/similarity.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_second_2fprotos_2fsimilarity_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionSimilarityCalculator::kRotateIouSimilarityFieldNumber;
const int RegionSimilarityCalculator::kNearestIouSimilarityFieldNumber;
const int RegionSimilarityCalculator::kDistanceSimilarityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionSimilarityCalculator::RegionSimilarityCalculator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RegionSimilarityCalculator)
}
RegionSimilarityCalculator::RegionSimilarityCalculator(const RegionSimilarityCalculator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_region_similarity();
  switch (from.region_similarity_case()) {
    case kRotateIouSimilarity: {
      mutable_rotate_iou_similarity()->::second::protos::RotateIouSimilarity::MergeFrom(from.rotate_iou_similarity());
      break;
    }
    case kNearestIouSimilarity: {
      mutable_nearest_iou_similarity()->::second::protos::NearestIouSimilarity::MergeFrom(from.nearest_iou_similarity());
      break;
    }
    case kDistanceSimilarity: {
      mutable_distance_similarity()->::second::protos::DistanceSimilarity::MergeFrom(from.distance_similarity());
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.RegionSimilarityCalculator)
}

void RegionSimilarityCalculator::SharedCtor() {
  clear_has_region_similarity();
  _cached_size_ = 0;
}

RegionSimilarityCalculator::~RegionSimilarityCalculator() {
  // @@protoc_insertion_point(destructor:second.protos.RegionSimilarityCalculator)
  SharedDtor();
}

void RegionSimilarityCalculator::SharedDtor() {
  if (has_region_similarity()) {
    clear_region_similarity();
  }
}

void RegionSimilarityCalculator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionSimilarityCalculator::descriptor() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionSimilarityCalculator& RegionSimilarityCalculator::default_instance() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionSimilarityCalculator* RegionSimilarityCalculator::New(::google::protobuf::Arena* arena) const {
  RegionSimilarityCalculator* n = new RegionSimilarityCalculator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionSimilarityCalculator::clear_region_similarity() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.RegionSimilarityCalculator)
  switch (region_similarity_case()) {
    case kRotateIouSimilarity: {
      delete region_similarity_.rotate_iou_similarity_;
      break;
    }
    case kNearestIouSimilarity: {
      delete region_similarity_.nearest_iou_similarity_;
      break;
    }
    case kDistanceSimilarity: {
      delete region_similarity_.distance_similarity_;
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REGION_SIMILARITY_NOT_SET;
}


void RegionSimilarityCalculator::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RegionSimilarityCalculator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_region_similarity();
  _internal_metadata_.Clear();
}

bool RegionSimilarityCalculator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RegionSimilarityCalculator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotate_iou_similarity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nearest_iou_similarity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.DistanceSimilarity distance_similarity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distance_similarity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RegionSimilarityCalculator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RegionSimilarityCalculator)
  return false;
#undef DO_
}

void RegionSimilarityCalculator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RegionSimilarityCalculator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
  if (has_rotate_iou_similarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *region_similarity_.rotate_iou_similarity_, output);
  }

  // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
  if (has_nearest_iou_similarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *region_similarity_.nearest_iou_similarity_, output);
  }

  // .second.protos.DistanceSimilarity distance_similarity = 3;
  if (has_distance_similarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *region_similarity_.distance_similarity_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RegionSimilarityCalculator)
}

::google::protobuf::uint8* RegionSimilarityCalculator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RegionSimilarityCalculator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
  if (has_rotate_iou_similarity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *region_similarity_.rotate_iou_similarity_, deterministic, target);
  }

  // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
  if (has_nearest_iou_similarity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *region_similarity_.nearest_iou_similarity_, deterministic, target);
  }

  // .second.protos.DistanceSimilarity distance_similarity = 3;
  if (has_distance_similarity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *region_similarity_.distance_similarity_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RegionSimilarityCalculator)
  return target;
}

size_t RegionSimilarityCalculator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RegionSimilarityCalculator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (region_similarity_case()) {
    // .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
    case kRotateIouSimilarity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *region_similarity_.rotate_iou_similarity_);
      break;
    }
    // .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
    case kNearestIouSimilarity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *region_similarity_.nearest_iou_similarity_);
      break;
    }
    // .second.protos.DistanceSimilarity distance_similarity = 3;
    case kDistanceSimilarity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *region_similarity_.distance_similarity_);
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionSimilarityCalculator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RegionSimilarityCalculator)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionSimilarityCalculator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionSimilarityCalculator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RegionSimilarityCalculator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RegionSimilarityCalculator)
    MergeFrom(*source);
  }
}

void RegionSimilarityCalculator::MergeFrom(const RegionSimilarityCalculator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RegionSimilarityCalculator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.region_similarity_case()) {
    case kRotateIouSimilarity: {
      mutable_rotate_iou_similarity()->::second::protos::RotateIouSimilarity::MergeFrom(from.rotate_iou_similarity());
      break;
    }
    case kNearestIouSimilarity: {
      mutable_nearest_iou_similarity()->::second::protos::NearestIouSimilarity::MergeFrom(from.nearest_iou_similarity());
      break;
    }
    case kDistanceSimilarity: {
      mutable_distance_similarity()->::second::protos::DistanceSimilarity::MergeFrom(from.distance_similarity());
      break;
    }
    case REGION_SIMILARITY_NOT_SET: {
      break;
    }
  }
}

void RegionSimilarityCalculator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RegionSimilarityCalculator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionSimilarityCalculator::CopyFrom(const RegionSimilarityCalculator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RegionSimilarityCalculator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSimilarityCalculator::IsInitialized() const {
  return true;
}

void RegionSimilarityCalculator::Swap(RegionSimilarityCalculator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionSimilarityCalculator::InternalSwap(RegionSimilarityCalculator* other) {
  using std::swap;
  swap(region_similarity_, other->region_similarity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionSimilarityCalculator::GetMetadata() const {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionSimilarityCalculator

// .second.protos.RotateIouSimilarity rotate_iou_similarity = 1;
bool RegionSimilarityCalculator::has_rotate_iou_similarity() const {
  return region_similarity_case() == kRotateIouSimilarity;
}
void RegionSimilarityCalculator::set_has_rotate_iou_similarity() {
  _oneof_case_[0] = kRotateIouSimilarity;
}
void RegionSimilarityCalculator::clear_rotate_iou_similarity() {
  if (has_rotate_iou_similarity()) {
    delete region_similarity_.rotate_iou_similarity_;
    clear_has_region_similarity();
  }
}
 const ::second::protos::RotateIouSimilarity& RegionSimilarityCalculator::rotate_iou_similarity() const {
  // @@protoc_insertion_point(field_get:second.protos.RegionSimilarityCalculator.rotate_iou_similarity)
  return has_rotate_iou_similarity()
      ? *region_similarity_.rotate_iou_similarity_
      : ::second::protos::RotateIouSimilarity::default_instance();
}
::second::protos::RotateIouSimilarity* RegionSimilarityCalculator::mutable_rotate_iou_similarity() {
  if (!has_rotate_iou_similarity()) {
    clear_region_similarity();
    set_has_rotate_iou_similarity();
    region_similarity_.rotate_iou_similarity_ = new ::second::protos::RotateIouSimilarity;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.RegionSimilarityCalculator.rotate_iou_similarity)
  return region_similarity_.rotate_iou_similarity_;
}
::second::protos::RotateIouSimilarity* RegionSimilarityCalculator::release_rotate_iou_similarity() {
  // @@protoc_insertion_point(field_release:second.protos.RegionSimilarityCalculator.rotate_iou_similarity)
  if (has_rotate_iou_similarity()) {
    clear_has_region_similarity();
    ::second::protos::RotateIouSimilarity* temp = region_similarity_.rotate_iou_similarity_;
    region_similarity_.rotate_iou_similarity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RegionSimilarityCalculator::set_allocated_rotate_iou_similarity(::second::protos::RotateIouSimilarity* rotate_iou_similarity) {
  clear_region_similarity();
  if (rotate_iou_similarity) {
    set_has_rotate_iou_similarity();
    region_similarity_.rotate_iou_similarity_ = rotate_iou_similarity;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.RegionSimilarityCalculator.rotate_iou_similarity)
}

// .second.protos.NearestIouSimilarity nearest_iou_similarity = 2;
bool RegionSimilarityCalculator::has_nearest_iou_similarity() const {
  return region_similarity_case() == kNearestIouSimilarity;
}
void RegionSimilarityCalculator::set_has_nearest_iou_similarity() {
  _oneof_case_[0] = kNearestIouSimilarity;
}
void RegionSimilarityCalculator::clear_nearest_iou_similarity() {
  if (has_nearest_iou_similarity()) {
    delete region_similarity_.nearest_iou_similarity_;
    clear_has_region_similarity();
  }
}
 const ::second::protos::NearestIouSimilarity& RegionSimilarityCalculator::nearest_iou_similarity() const {
  // @@protoc_insertion_point(field_get:second.protos.RegionSimilarityCalculator.nearest_iou_similarity)
  return has_nearest_iou_similarity()
      ? *region_similarity_.nearest_iou_similarity_
      : ::second::protos::NearestIouSimilarity::default_instance();
}
::second::protos::NearestIouSimilarity* RegionSimilarityCalculator::mutable_nearest_iou_similarity() {
  if (!has_nearest_iou_similarity()) {
    clear_region_similarity();
    set_has_nearest_iou_similarity();
    region_similarity_.nearest_iou_similarity_ = new ::second::protos::NearestIouSimilarity;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.RegionSimilarityCalculator.nearest_iou_similarity)
  return region_similarity_.nearest_iou_similarity_;
}
::second::protos::NearestIouSimilarity* RegionSimilarityCalculator::release_nearest_iou_similarity() {
  // @@protoc_insertion_point(field_release:second.protos.RegionSimilarityCalculator.nearest_iou_similarity)
  if (has_nearest_iou_similarity()) {
    clear_has_region_similarity();
    ::second::protos::NearestIouSimilarity* temp = region_similarity_.nearest_iou_similarity_;
    region_similarity_.nearest_iou_similarity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RegionSimilarityCalculator::set_allocated_nearest_iou_similarity(::second::protos::NearestIouSimilarity* nearest_iou_similarity) {
  clear_region_similarity();
  if (nearest_iou_similarity) {
    set_has_nearest_iou_similarity();
    region_similarity_.nearest_iou_similarity_ = nearest_iou_similarity;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.RegionSimilarityCalculator.nearest_iou_similarity)
}

// .second.protos.DistanceSimilarity distance_similarity = 3;
bool RegionSimilarityCalculator::has_distance_similarity() const {
  return region_similarity_case() == kDistanceSimilarity;
}
void RegionSimilarityCalculator::set_has_distance_similarity() {
  _oneof_case_[0] = kDistanceSimilarity;
}
void RegionSimilarityCalculator::clear_distance_similarity() {
  if (has_distance_similarity()) {
    delete region_similarity_.distance_similarity_;
    clear_has_region_similarity();
  }
}
 const ::second::protos::DistanceSimilarity& RegionSimilarityCalculator::distance_similarity() const {
  // @@protoc_insertion_point(field_get:second.protos.RegionSimilarityCalculator.distance_similarity)
  return has_distance_similarity()
      ? *region_similarity_.distance_similarity_
      : ::second::protos::DistanceSimilarity::default_instance();
}
::second::protos::DistanceSimilarity* RegionSimilarityCalculator::mutable_distance_similarity() {
  if (!has_distance_similarity()) {
    clear_region_similarity();
    set_has_distance_similarity();
    region_similarity_.distance_similarity_ = new ::second::protos::DistanceSimilarity;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.RegionSimilarityCalculator.distance_similarity)
  return region_similarity_.distance_similarity_;
}
::second::protos::DistanceSimilarity* RegionSimilarityCalculator::release_distance_similarity() {
  // @@protoc_insertion_point(field_release:second.protos.RegionSimilarityCalculator.distance_similarity)
  if (has_distance_similarity()) {
    clear_has_region_similarity();
    ::second::protos::DistanceSimilarity* temp = region_similarity_.distance_similarity_;
    region_similarity_.distance_similarity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RegionSimilarityCalculator::set_allocated_distance_similarity(::second::protos::DistanceSimilarity* distance_similarity) {
  clear_region_similarity();
  if (distance_similarity) {
    set_has_distance_similarity();
    region_similarity_.distance_similarity_ = distance_similarity;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.RegionSimilarityCalculator.distance_similarity)
}

bool RegionSimilarityCalculator::has_region_similarity() const {
  return region_similarity_case() != REGION_SIMILARITY_NOT_SET;
}
void RegionSimilarityCalculator::clear_has_region_similarity() {
  _oneof_case_[0] = REGION_SIMILARITY_NOT_SET;
}
RegionSimilarityCalculator::RegionSimilarityCase RegionSimilarityCalculator::region_similarity_case() const {
  return RegionSimilarityCalculator::RegionSimilarityCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotateIouSimilarity::RotateIouSimilarity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RotateIouSimilarity)
}
RotateIouSimilarity::RotateIouSimilarity(const RotateIouSimilarity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.RotateIouSimilarity)
}

void RotateIouSimilarity::SharedCtor() {
  _cached_size_ = 0;
}

RotateIouSimilarity::~RotateIouSimilarity() {
  // @@protoc_insertion_point(destructor:second.protos.RotateIouSimilarity)
  SharedDtor();
}

void RotateIouSimilarity::SharedDtor() {
}

void RotateIouSimilarity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotateIouSimilarity::descriptor() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotateIouSimilarity& RotateIouSimilarity::default_instance() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  return *internal_default_instance();
}

RotateIouSimilarity* RotateIouSimilarity::New(::google::protobuf::Arena* arena) const {
  RotateIouSimilarity* n = new RotateIouSimilarity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RotateIouSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RotateIouSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RotateIouSimilarity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RotateIouSimilarity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RotateIouSimilarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RotateIouSimilarity)
  return false;
#undef DO_
}

void RotateIouSimilarity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RotateIouSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RotateIouSimilarity)
}

::google::protobuf::uint8* RotateIouSimilarity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RotateIouSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RotateIouSimilarity)
  return target;
}

size_t RotateIouSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RotateIouSimilarity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotateIouSimilarity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RotateIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const RotateIouSimilarity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotateIouSimilarity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RotateIouSimilarity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RotateIouSimilarity)
    MergeFrom(*source);
  }
}

void RotateIouSimilarity::MergeFrom(const RotateIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RotateIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RotateIouSimilarity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RotateIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotateIouSimilarity::CopyFrom(const RotateIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RotateIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateIouSimilarity::IsInitialized() const {
  return true;
}

void RotateIouSimilarity::Swap(RotateIouSimilarity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotateIouSimilarity::InternalSwap(RotateIouSimilarity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RotateIouSimilarity::GetMetadata() const {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RotateIouSimilarity

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NearestIouSimilarity::NearestIouSimilarity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.NearestIouSimilarity)
}
NearestIouSimilarity::NearestIouSimilarity(const NearestIouSimilarity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.NearestIouSimilarity)
}

void NearestIouSimilarity::SharedCtor() {
  _cached_size_ = 0;
}

NearestIouSimilarity::~NearestIouSimilarity() {
  // @@protoc_insertion_point(destructor:second.protos.NearestIouSimilarity)
  SharedDtor();
}

void NearestIouSimilarity::SharedDtor() {
}

void NearestIouSimilarity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NearestIouSimilarity::descriptor() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NearestIouSimilarity& NearestIouSimilarity::default_instance() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  return *internal_default_instance();
}

NearestIouSimilarity* NearestIouSimilarity::New(::google::protobuf::Arena* arena) const {
  NearestIouSimilarity* n = new NearestIouSimilarity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NearestIouSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.NearestIouSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NearestIouSimilarity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.NearestIouSimilarity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.NearestIouSimilarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.NearestIouSimilarity)
  return false;
#undef DO_
}

void NearestIouSimilarity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.NearestIouSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.NearestIouSimilarity)
}

::google::protobuf::uint8* NearestIouSimilarity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.NearestIouSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.NearestIouSimilarity)
  return target;
}

size_t NearestIouSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.NearestIouSimilarity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NearestIouSimilarity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.NearestIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestIouSimilarity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NearestIouSimilarity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.NearestIouSimilarity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.NearestIouSimilarity)
    MergeFrom(*source);
  }
}

void NearestIouSimilarity::MergeFrom(const NearestIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.NearestIouSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NearestIouSimilarity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.NearestIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestIouSimilarity::CopyFrom(const NearestIouSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.NearestIouSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestIouSimilarity::IsInitialized() const {
  return true;
}

void NearestIouSimilarity::Swap(NearestIouSimilarity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NearestIouSimilarity::InternalSwap(NearestIouSimilarity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NearestIouSimilarity::GetMetadata() const {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NearestIouSimilarity

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceSimilarity::kDistanceNormFieldNumber;
const int DistanceSimilarity::kWithRotationFieldNumber;
const int DistanceSimilarity::kRotationAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceSimilarity::DistanceSimilarity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DistanceSimilarity)
}
DistanceSimilarity::DistanceSimilarity(const DistanceSimilarity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_norm_, &from.distance_norm_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_alpha_) -
    reinterpret_cast<char*>(&distance_norm_)) + sizeof(rotation_alpha_));
  // @@protoc_insertion_point(copy_constructor:second.protos.DistanceSimilarity)
}

void DistanceSimilarity::SharedCtor() {
  ::memset(&distance_norm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_alpha_) -
      reinterpret_cast<char*>(&distance_norm_)) + sizeof(rotation_alpha_));
  _cached_size_ = 0;
}

DistanceSimilarity::~DistanceSimilarity() {
  // @@protoc_insertion_point(destructor:second.protos.DistanceSimilarity)
  SharedDtor();
}

void DistanceSimilarity::SharedDtor() {
}

void DistanceSimilarity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistanceSimilarity::descriptor() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistanceSimilarity& DistanceSimilarity::default_instance() {
  protobuf_second_2fprotos_2fsimilarity_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistanceSimilarity* DistanceSimilarity::New(::google::protobuf::Arena* arena) const {
  DistanceSimilarity* n = new DistanceSimilarity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistanceSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DistanceSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_norm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_alpha_) -
      reinterpret_cast<char*>(&distance_norm_)) + sizeof(rotation_alpha_));
  _internal_metadata_.Clear();
}

bool DistanceSimilarity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DistanceSimilarity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float distance_norm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotation_alpha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DistanceSimilarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DistanceSimilarity)
  return false;
#undef DO_
}

void DistanceSimilarity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DistanceSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance_norm = 1;
  if (this->distance_norm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance_norm(), output);
  }

  // bool with_rotation = 2;
  if (this->with_rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->with_rotation(), output);
  }

  // float rotation_alpha = 3;
  if (this->rotation_alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rotation_alpha(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DistanceSimilarity)
}

::google::protobuf::uint8* DistanceSimilarity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DistanceSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance_norm = 1;
  if (this->distance_norm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distance_norm(), target);
  }

  // bool with_rotation = 2;
  if (this->with_rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->with_rotation(), target);
  }

  // float rotation_alpha = 3;
  if (this->rotation_alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rotation_alpha(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DistanceSimilarity)
  return target;
}

size_t DistanceSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DistanceSimilarity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float distance_norm = 1;
  if (this->distance_norm() != 0) {
    total_size += 1 + 4;
  }

  // bool with_rotation = 2;
  if (this->with_rotation() != 0) {
    total_size += 1 + 1;
  }

  // float rotation_alpha = 3;
  if (this->rotation_alpha() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistanceSimilarity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DistanceSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceSimilarity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistanceSimilarity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DistanceSimilarity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DistanceSimilarity)
    MergeFrom(*source);
  }
}

void DistanceSimilarity::MergeFrom(const DistanceSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DistanceSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.distance_norm() != 0) {
    set_distance_norm(from.distance_norm());
  }
  if (from.with_rotation() != 0) {
    set_with_rotation(from.with_rotation());
  }
  if (from.rotation_alpha() != 0) {
    set_rotation_alpha(from.rotation_alpha());
  }
}

void DistanceSimilarity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DistanceSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceSimilarity::CopyFrom(const DistanceSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DistanceSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSimilarity::IsInitialized() const {
  return true;
}

void DistanceSimilarity::Swap(DistanceSimilarity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceSimilarity::InternalSwap(DistanceSimilarity* other) {
  using std::swap;
  swap(distance_norm_, other->distance_norm_);
  swap(with_rotation_, other->with_rotation_);
  swap(rotation_alpha_, other->rotation_alpha_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DistanceSimilarity::GetMetadata() const {
  protobuf_second_2fprotos_2fsimilarity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fsimilarity_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistanceSimilarity

// float distance_norm = 1;
void DistanceSimilarity::clear_distance_norm() {
  distance_norm_ = 0;
}
float DistanceSimilarity::distance_norm() const {
  // @@protoc_insertion_point(field_get:second.protos.DistanceSimilarity.distance_norm)
  return distance_norm_;
}
void DistanceSimilarity::set_distance_norm(float value) {
  
  distance_norm_ = value;
  // @@protoc_insertion_point(field_set:second.protos.DistanceSimilarity.distance_norm)
}

// bool with_rotation = 2;
void DistanceSimilarity::clear_with_rotation() {
  with_rotation_ = false;
}
bool DistanceSimilarity::with_rotation() const {
  // @@protoc_insertion_point(field_get:second.protos.DistanceSimilarity.with_rotation)
  return with_rotation_;
}
void DistanceSimilarity::set_with_rotation(bool value) {
  
  with_rotation_ = value;
  // @@protoc_insertion_point(field_set:second.protos.DistanceSimilarity.with_rotation)
}

// float rotation_alpha = 3;
void DistanceSimilarity::clear_rotation_alpha() {
  rotation_alpha_ = 0;
}
float DistanceSimilarity::rotation_alpha() const {
  // @@protoc_insertion_point(field_get:second.protos.DistanceSimilarity.rotation_alpha)
  return rotation_alpha_;
}
void DistanceSimilarity::set_rotation_alpha(float value) {
  
  rotation_alpha_ = value;
  // @@protoc_insertion_point(field_set:second.protos.DistanceSimilarity.rotation_alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)
