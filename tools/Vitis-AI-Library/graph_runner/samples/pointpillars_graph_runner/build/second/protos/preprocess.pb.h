// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/preprocess.proto

#ifndef PROTOBUF_second_2fprotos_2fpreprocess_2eproto__INCLUDED
#define PROTOBUF_second_2fprotos_2fpreprocess_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace second {
namespace protos {
class DBFilterByDifficulty;
class DBFilterByDifficultyDefaultTypeInternal;
extern DBFilterByDifficultyDefaultTypeInternal _DBFilterByDifficulty_default_instance_;
class DBFilterByMinNumPointInGroundTruth;
class DBFilterByMinNumPointInGroundTruthDefaultTypeInternal;
extern DBFilterByMinNumPointInGroundTruthDefaultTypeInternal _DBFilterByMinNumPointInGroundTruth_default_instance_;
class DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry;
class DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntryDefaultTypeInternal;
extern DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntryDefaultTypeInternal _DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_;
class DatabasePreprocessingStep;
class DatabasePreprocessingStepDefaultTypeInternal;
extern DatabasePreprocessingStepDefaultTypeInternal _DatabasePreprocessingStep_default_instance_;
class Preprocess;
class PreprocessDefaultTypeInternal;
extern PreprocessDefaultTypeInternal _Preprocess_default_instance_;
class PreprocessingStep;
class PreprocessingStepDefaultTypeInternal;
extern PreprocessingStepDefaultTypeInternal _PreprocessingStep_default_instance_;
class RandomGlobalRotation;
class RandomGlobalRotationDefaultTypeInternal;
extern RandomGlobalRotationDefaultTypeInternal _RandomGlobalRotation_default_instance_;
class RandomGlobalScaling;
class RandomGlobalScalingDefaultTypeInternal;
extern RandomGlobalScalingDefaultTypeInternal _RandomGlobalScaling_default_instance_;
}  // namespace protos
}  // namespace second

namespace second {
namespace protos {

namespace protobuf_second_2fprotos_2fpreprocess_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_second_2fprotos_2fpreprocess_2eproto

// ===================================================================

class Preprocess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.Preprocess) */ {
 public:
  Preprocess();
  virtual ~Preprocess();

  Preprocess(const Preprocess& from);

  inline Preprocess& operator=(const Preprocess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Preprocess(Preprocess&& from) noexcept
    : Preprocess() {
    *this = ::std::move(from);
  }

  inline Preprocess& operator=(Preprocess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Preprocess& default_instance();

  static inline const Preprocess* internal_default_instance() {
    return reinterpret_cast<const Preprocess*>(
               &_Preprocess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Preprocess* other);
  friend void swap(Preprocess& a, Preprocess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Preprocess* New() const PROTOBUF_FINAL { return New(NULL); }

  Preprocess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Preprocess& from);
  void MergeFrom(const Preprocess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Preprocess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float random_global_rotation_min_rad = 1;
  void clear_random_global_rotation_min_rad();
  static const int kRandomGlobalRotationMinRadFieldNumber = 1;
  float random_global_rotation_min_rad() const;
  void set_random_global_rotation_min_rad(float value);

  // float random_global_rotation_max_rad = 2;
  void clear_random_global_rotation_max_rad();
  static const int kRandomGlobalRotationMaxRadFieldNumber = 2;
  float random_global_rotation_max_rad() const;
  void set_random_global_rotation_max_rad(float value);

  // float random_global_scaling_min = 3;
  void clear_random_global_scaling_min();
  static const int kRandomGlobalScalingMinFieldNumber = 3;
  float random_global_scaling_min() const;
  void set_random_global_scaling_min(float value);

  // float random_global_scaling_max = 4;
  void clear_random_global_scaling_max();
  static const int kRandomGlobalScalingMaxFieldNumber = 4;
  float random_global_scaling_max() const;
  void set_random_global_scaling_max(float value);

  // float random_noise_per_groundtruth_min_rad = 5;
  void clear_random_noise_per_groundtruth_min_rad();
  static const int kRandomNoisePerGroundtruthMinRadFieldNumber = 5;
  float random_noise_per_groundtruth_min_rad() const;
  void set_random_noise_per_groundtruth_min_rad(float value);

  // float random_noise_per_groundtruth_max_rad = 6;
  void clear_random_noise_per_groundtruth_max_rad();
  static const int kRandomNoisePerGroundtruthMaxRadFieldNumber = 6;
  float random_noise_per_groundtruth_max_rad() const;
  void set_random_noise_per_groundtruth_max_rad(float value);

  // float random_noise_per_groundtruth_position_std = 7;
  void clear_random_noise_per_groundtruth_position_std();
  static const int kRandomNoisePerGroundtruthPositionStdFieldNumber = 7;
  float random_noise_per_groundtruth_position_std() const;
  void set_random_noise_per_groundtruth_position_std(float value);

  // @@protoc_insertion_point(class_scope:second.protos.Preprocess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float random_global_rotation_min_rad_;
  float random_global_rotation_max_rad_;
  float random_global_scaling_min_;
  float random_global_scaling_max_;
  float random_noise_per_groundtruth_min_rad_;
  float random_noise_per_groundtruth_max_rad_;
  float random_noise_per_groundtruth_position_std_;
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fpreprocess_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabasePreprocessingStep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.DatabasePreprocessingStep) */ {
 public:
  DatabasePreprocessingStep();
  virtual ~DatabasePreprocessingStep();

  DatabasePreprocessingStep(const DatabasePreprocessingStep& from);

  inline DatabasePreprocessingStep& operator=(const DatabasePreprocessingStep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabasePreprocessingStep(DatabasePreprocessingStep&& from) noexcept
    : DatabasePreprocessingStep() {
    *this = ::std::move(from);
  }

  inline DatabasePreprocessingStep& operator=(DatabasePreprocessingStep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabasePreprocessingStep& default_instance();

  enum DatabasePreprocessingStepCase {
    kFilterByDifficulty = 1,
    kFilterByMinNumPoints = 2,
    DATABASE_PREPROCESSING_STEP_NOT_SET = 0,
  };

  static inline const DatabasePreprocessingStep* internal_default_instance() {
    return reinterpret_cast<const DatabasePreprocessingStep*>(
               &_DatabasePreprocessingStep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DatabasePreprocessingStep* other);
  friend void swap(DatabasePreprocessingStep& a, DatabasePreprocessingStep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabasePreprocessingStep* New() const PROTOBUF_FINAL { return New(NULL); }

  DatabasePreprocessingStep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatabasePreprocessingStep& from);
  void MergeFrom(const DatabasePreprocessingStep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatabasePreprocessingStep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
  bool has_filter_by_difficulty() const;
  void clear_filter_by_difficulty();
  static const int kFilterByDifficultyFieldNumber = 1;
  const ::second::protos::DBFilterByDifficulty& filter_by_difficulty() const;
  ::second::protos::DBFilterByDifficulty* mutable_filter_by_difficulty();
  ::second::protos::DBFilterByDifficulty* release_filter_by_difficulty();
  void set_allocated_filter_by_difficulty(::second::protos::DBFilterByDifficulty* filter_by_difficulty);

  // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
  bool has_filter_by_min_num_points() const;
  void clear_filter_by_min_num_points();
  static const int kFilterByMinNumPointsFieldNumber = 2;
  const ::second::protos::DBFilterByMinNumPointInGroundTruth& filter_by_min_num_points() const;
  ::second::protos::DBFilterByMinNumPointInGroundTruth* mutable_filter_by_min_num_points();
  ::second::protos::DBFilterByMinNumPointInGroundTruth* release_filter_by_min_num_points();
  void set_allocated_filter_by_min_num_points(::second::protos::DBFilterByMinNumPointInGroundTruth* filter_by_min_num_points);

  DatabasePreprocessingStepCase database_preprocessing_step_case() const;
  // @@protoc_insertion_point(class_scope:second.protos.DatabasePreprocessingStep)
 private:
  void set_has_filter_by_difficulty();
  void set_has_filter_by_min_num_points();

  inline bool has_database_preprocessing_step() const;
  void clear_database_preprocessing_step();
  inline void clear_has_database_preprocessing_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DatabasePreprocessingStepUnion {
    DatabasePreprocessingStepUnion() {}
    ::second::protos::DBFilterByDifficulty* filter_by_difficulty_;
    ::second::protos::DBFilterByMinNumPointInGroundTruth* filter_by_min_num_points_;
  } database_preprocessing_step_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_second_2fprotos_2fpreprocess_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DBFilterByDifficulty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.DBFilterByDifficulty) */ {
 public:
  DBFilterByDifficulty();
  virtual ~DBFilterByDifficulty();

  DBFilterByDifficulty(const DBFilterByDifficulty& from);

  inline DBFilterByDifficulty& operator=(const DBFilterByDifficulty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DBFilterByDifficulty(DBFilterByDifficulty&& from) noexcept
    : DBFilterByDifficulty() {
    *this = ::std::move(from);
  }

  inline DBFilterByDifficulty& operator=(DBFilterByDifficulty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DBFilterByDifficulty& default_instance();

  static inline const DBFilterByDifficulty* internal_default_instance() {
    return reinterpret_cast<const DBFilterByDifficulty*>(
               &_DBFilterByDifficulty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DBFilterByDifficulty* other);
  friend void swap(DBFilterByDifficulty& a, DBFilterByDifficulty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DBFilterByDifficulty* New() const PROTOBUF_FINAL { return New(NULL); }

  DBFilterByDifficulty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DBFilterByDifficulty& from);
  void MergeFrom(const DBFilterByDifficulty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DBFilterByDifficulty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 removed_difficulties = 1;
  int removed_difficulties_size() const;
  void clear_removed_difficulties();
  static const int kRemovedDifficultiesFieldNumber = 1;
  ::google::protobuf::int32 removed_difficulties(int index) const;
  void set_removed_difficulties(int index, ::google::protobuf::int32 value);
  void add_removed_difficulties(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      removed_difficulties() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_removed_difficulties();

  // @@protoc_insertion_point(class_scope:second.protos.DBFilterByDifficulty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > removed_difficulties_;
  mutable int _removed_difficulties_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fpreprocess_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DBFilterByMinNumPointInGroundTruth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.DBFilterByMinNumPointInGroundTruth) */ {
 public:
  DBFilterByMinNumPointInGroundTruth();
  virtual ~DBFilterByMinNumPointInGroundTruth();

  DBFilterByMinNumPointInGroundTruth(const DBFilterByMinNumPointInGroundTruth& from);

  inline DBFilterByMinNumPointInGroundTruth& operator=(const DBFilterByMinNumPointInGroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DBFilterByMinNumPointInGroundTruth(DBFilterByMinNumPointInGroundTruth&& from) noexcept
    : DBFilterByMinNumPointInGroundTruth() {
    *this = ::std::move(from);
  }

  inline DBFilterByMinNumPointInGroundTruth& operator=(DBFilterByMinNumPointInGroundTruth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DBFilterByMinNumPointInGroundTruth& default_instance();

  static inline const DBFilterByMinNumPointInGroundTruth* internal_default_instance() {
    return reinterpret_cast<const DBFilterByMinNumPointInGroundTruth*>(
               &_DBFilterByMinNumPointInGroundTruth_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DBFilterByMinNumPointInGroundTruth* other);
  friend void swap(DBFilterByMinNumPointInGroundTruth& a, DBFilterByMinNumPointInGroundTruth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DBFilterByMinNumPointInGroundTruth* New() const PROTOBUF_FINAL { return New(NULL); }

  DBFilterByMinNumPointInGroundTruth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DBFilterByMinNumPointInGroundTruth& from);
  void MergeFrom(const DBFilterByMinNumPointInGroundTruth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DBFilterByMinNumPointInGroundTruth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, uint32> min_num_point_pairs = 1;
  int min_num_point_pairs_size() const;
  void clear_min_num_point_pairs();
  static const int kMinNumPointPairsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
      min_num_point_pairs() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
      mutable_min_num_point_pairs();

  // @@protoc_insertion_point(class_scope:second.protos.DBFilterByMinNumPointInGroundTruth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry : public ::google::protobuf::internal::MapEntry<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry, 
      ::std::string, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry, 
      ::std::string, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry();
    DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry,
      ::std::string, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > min_num_point_pairs_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fpreprocess_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PreprocessingStep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.PreprocessingStep) */ {
 public:
  PreprocessingStep();
  virtual ~PreprocessingStep();

  PreprocessingStep(const PreprocessingStep& from);

  inline PreprocessingStep& operator=(const PreprocessingStep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreprocessingStep(PreprocessingStep&& from) noexcept
    : PreprocessingStep() {
    *this = ::std::move(from);
  }

  inline PreprocessingStep& operator=(PreprocessingStep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreprocessingStep& default_instance();

  enum PreprocessingStepCase {
    kRandomGlobalScaling = 1,
    kRandomGlobalRotation = 2,
    PREPROCESSING_STEP_NOT_SET = 0,
  };

  static inline const PreprocessingStep* internal_default_instance() {
    return reinterpret_cast<const PreprocessingStep*>(
               &_PreprocessingStep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PreprocessingStep* other);
  friend void swap(PreprocessingStep& a, PreprocessingStep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreprocessingStep* New() const PROTOBUF_FINAL { return New(NULL); }

  PreprocessingStep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PreprocessingStep& from);
  void MergeFrom(const PreprocessingStep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PreprocessingStep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .second.protos.RandomGlobalScaling random_global_scaling = 1;
  bool has_random_global_scaling() const;
  void clear_random_global_scaling();
  static const int kRandomGlobalScalingFieldNumber = 1;
  const ::second::protos::RandomGlobalScaling& random_global_scaling() const;
  ::second::protos::RandomGlobalScaling* mutable_random_global_scaling();
  ::second::protos::RandomGlobalScaling* release_random_global_scaling();
  void set_allocated_random_global_scaling(::second::protos::RandomGlobalScaling* random_global_scaling);

  // .second.protos.RandomGlobalRotation random_global_rotation = 2;
  bool has_random_global_rotation() const;
  void clear_random_global_rotation();
  static const int kRandomGlobalRotationFieldNumber = 2;
  const ::second::protos::RandomGlobalRotation& random_global_rotation() const;
  ::second::protos::RandomGlobalRotation* mutable_random_global_rotation();
  ::second::protos::RandomGlobalRotation* release_random_global_rotation();
  void set_allocated_random_global_rotation(::second::protos::RandomGlobalRotation* random_global_rotation);

  PreprocessingStepCase preprocessing_step_case() const;
  // @@protoc_insertion_point(class_scope:second.protos.PreprocessingStep)
 private:
  void set_has_random_global_scaling();
  void set_has_random_global_rotation();

  inline bool has_preprocessing_step() const;
  void clear_preprocessing_step();
  inline void clear_has_preprocessing_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PreprocessingStepUnion {
    PreprocessingStepUnion() {}
    ::second::protos::RandomGlobalScaling* random_global_scaling_;
    ::second::protos::RandomGlobalRotation* random_global_rotation_;
  } preprocessing_step_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_second_2fprotos_2fpreprocess_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RandomGlobalScaling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.RandomGlobalScaling) */ {
 public:
  RandomGlobalScaling();
  virtual ~RandomGlobalScaling();

  RandomGlobalScaling(const RandomGlobalScaling& from);

  inline RandomGlobalScaling& operator=(const RandomGlobalScaling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RandomGlobalScaling(RandomGlobalScaling&& from) noexcept
    : RandomGlobalScaling() {
    *this = ::std::move(from);
  }

  inline RandomGlobalScaling& operator=(RandomGlobalScaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomGlobalScaling& default_instance();

  static inline const RandomGlobalScaling* internal_default_instance() {
    return reinterpret_cast<const RandomGlobalScaling*>(
               &_RandomGlobalScaling_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RandomGlobalScaling* other);
  friend void swap(RandomGlobalScaling& a, RandomGlobalScaling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RandomGlobalScaling* New() const PROTOBUF_FINAL { return New(NULL); }

  RandomGlobalScaling* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RandomGlobalScaling& from);
  void MergeFrom(const RandomGlobalScaling& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RandomGlobalScaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float min_scale = 1;
  void clear_min_scale();
  static const int kMinScaleFieldNumber = 1;
  float min_scale() const;
  void set_min_scale(float value);

  // float max_scale = 2;
  void clear_max_scale();
  static const int kMaxScaleFieldNumber = 2;
  float max_scale() const;
  void set_max_scale(float value);

  // @@protoc_insertion_point(class_scope:second.protos.RandomGlobalScaling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float min_scale_;
  float max_scale_;
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fpreprocess_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RandomGlobalRotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:second.protos.RandomGlobalRotation) */ {
 public:
  RandomGlobalRotation();
  virtual ~RandomGlobalRotation();

  RandomGlobalRotation(const RandomGlobalRotation& from);

  inline RandomGlobalRotation& operator=(const RandomGlobalRotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RandomGlobalRotation(RandomGlobalRotation&& from) noexcept
    : RandomGlobalRotation() {
    *this = ::std::move(from);
  }

  inline RandomGlobalRotation& operator=(RandomGlobalRotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomGlobalRotation& default_instance();

  static inline const RandomGlobalRotation* internal_default_instance() {
    return reinterpret_cast<const RandomGlobalRotation*>(
               &_RandomGlobalRotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RandomGlobalRotation* other);
  friend void swap(RandomGlobalRotation& a, RandomGlobalRotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RandomGlobalRotation* New() const PROTOBUF_FINAL { return New(NULL); }

  RandomGlobalRotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RandomGlobalRotation& from);
  void MergeFrom(const RandomGlobalRotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RandomGlobalRotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float min_rad = 1;
  void clear_min_rad();
  static const int kMinRadFieldNumber = 1;
  float min_rad() const;
  void set_min_rad(float value);

  // float max_rad = 2;
  void clear_max_rad();
  static const int kMaxRadFieldNumber = 2;
  float max_rad() const;
  void set_max_rad(float value);

  // @@protoc_insertion_point(class_scope:second.protos.RandomGlobalRotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float min_rad_;
  float max_rad_;
  mutable int _cached_size_;
  friend struct protobuf_second_2fprotos_2fpreprocess_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Preprocess

// float random_global_rotation_min_rad = 1;
inline void Preprocess::clear_random_global_rotation_min_rad() {
  random_global_rotation_min_rad_ = 0;
}
inline float Preprocess::random_global_rotation_min_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_rotation_min_rad)
  return random_global_rotation_min_rad_;
}
inline void Preprocess::set_random_global_rotation_min_rad(float value) {
  
  random_global_rotation_min_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_rotation_min_rad)
}

// float random_global_rotation_max_rad = 2;
inline void Preprocess::clear_random_global_rotation_max_rad() {
  random_global_rotation_max_rad_ = 0;
}
inline float Preprocess::random_global_rotation_max_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_rotation_max_rad)
  return random_global_rotation_max_rad_;
}
inline void Preprocess::set_random_global_rotation_max_rad(float value) {
  
  random_global_rotation_max_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_rotation_max_rad)
}

// float random_global_scaling_min = 3;
inline void Preprocess::clear_random_global_scaling_min() {
  random_global_scaling_min_ = 0;
}
inline float Preprocess::random_global_scaling_min() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_scaling_min)
  return random_global_scaling_min_;
}
inline void Preprocess::set_random_global_scaling_min(float value) {
  
  random_global_scaling_min_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_scaling_min)
}

// float random_global_scaling_max = 4;
inline void Preprocess::clear_random_global_scaling_max() {
  random_global_scaling_max_ = 0;
}
inline float Preprocess::random_global_scaling_max() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_scaling_max)
  return random_global_scaling_max_;
}
inline void Preprocess::set_random_global_scaling_max(float value) {
  
  random_global_scaling_max_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_scaling_max)
}

// float random_noise_per_groundtruth_min_rad = 5;
inline void Preprocess::clear_random_noise_per_groundtruth_min_rad() {
  random_noise_per_groundtruth_min_rad_ = 0;
}
inline float Preprocess::random_noise_per_groundtruth_min_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_noise_per_groundtruth_min_rad)
  return random_noise_per_groundtruth_min_rad_;
}
inline void Preprocess::set_random_noise_per_groundtruth_min_rad(float value) {
  
  random_noise_per_groundtruth_min_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_noise_per_groundtruth_min_rad)
}

// float random_noise_per_groundtruth_max_rad = 6;
inline void Preprocess::clear_random_noise_per_groundtruth_max_rad() {
  random_noise_per_groundtruth_max_rad_ = 0;
}
inline float Preprocess::random_noise_per_groundtruth_max_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_noise_per_groundtruth_max_rad)
  return random_noise_per_groundtruth_max_rad_;
}
inline void Preprocess::set_random_noise_per_groundtruth_max_rad(float value) {
  
  random_noise_per_groundtruth_max_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_noise_per_groundtruth_max_rad)
}

// float random_noise_per_groundtruth_position_std = 7;
inline void Preprocess::clear_random_noise_per_groundtruth_position_std() {
  random_noise_per_groundtruth_position_std_ = 0;
}
inline float Preprocess::random_noise_per_groundtruth_position_std() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_noise_per_groundtruth_position_std)
  return random_noise_per_groundtruth_position_std_;
}
inline void Preprocess::set_random_noise_per_groundtruth_position_std(float value) {
  
  random_noise_per_groundtruth_position_std_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_noise_per_groundtruth_position_std)
}

// -------------------------------------------------------------------

// DatabasePreprocessingStep

// .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
inline bool DatabasePreprocessingStep::has_filter_by_difficulty() const {
  return database_preprocessing_step_case() == kFilterByDifficulty;
}
inline void DatabasePreprocessingStep::set_has_filter_by_difficulty() {
  _oneof_case_[0] = kFilterByDifficulty;
}
inline void DatabasePreprocessingStep::clear_filter_by_difficulty() {
  if (has_filter_by_difficulty()) {
    delete database_preprocessing_step_.filter_by_difficulty_;
    clear_has_database_preprocessing_step();
  }
}
inline  const ::second::protos::DBFilterByDifficulty& DatabasePreprocessingStep::filter_by_difficulty() const {
  // @@protoc_insertion_point(field_get:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
  return has_filter_by_difficulty()
      ? *database_preprocessing_step_.filter_by_difficulty_
      : ::second::protos::DBFilterByDifficulty::default_instance();
}
inline ::second::protos::DBFilterByDifficulty* DatabasePreprocessingStep::mutable_filter_by_difficulty() {
  if (!has_filter_by_difficulty()) {
    clear_database_preprocessing_step();
    set_has_filter_by_difficulty();
    database_preprocessing_step_.filter_by_difficulty_ = new ::second::protos::DBFilterByDifficulty;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
  return database_preprocessing_step_.filter_by_difficulty_;
}
inline ::second::protos::DBFilterByDifficulty* DatabasePreprocessingStep::release_filter_by_difficulty() {
  // @@protoc_insertion_point(field_release:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
  if (has_filter_by_difficulty()) {
    clear_has_database_preprocessing_step();
    ::second::protos::DBFilterByDifficulty* temp = database_preprocessing_step_.filter_by_difficulty_;
    database_preprocessing_step_.filter_by_difficulty_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DatabasePreprocessingStep::set_allocated_filter_by_difficulty(::second::protos::DBFilterByDifficulty* filter_by_difficulty) {
  clear_database_preprocessing_step();
  if (filter_by_difficulty) {
    set_has_filter_by_difficulty();
    database_preprocessing_step_.filter_by_difficulty_ = filter_by_difficulty;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
}

// .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
inline bool DatabasePreprocessingStep::has_filter_by_min_num_points() const {
  return database_preprocessing_step_case() == kFilterByMinNumPoints;
}
inline void DatabasePreprocessingStep::set_has_filter_by_min_num_points() {
  _oneof_case_[0] = kFilterByMinNumPoints;
}
inline void DatabasePreprocessingStep::clear_filter_by_min_num_points() {
  if (has_filter_by_min_num_points()) {
    delete database_preprocessing_step_.filter_by_min_num_points_;
    clear_has_database_preprocessing_step();
  }
}
inline  const ::second::protos::DBFilterByMinNumPointInGroundTruth& DatabasePreprocessingStep::filter_by_min_num_points() const {
  // @@protoc_insertion_point(field_get:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
  return has_filter_by_min_num_points()
      ? *database_preprocessing_step_.filter_by_min_num_points_
      : ::second::protos::DBFilterByMinNumPointInGroundTruth::default_instance();
}
inline ::second::protos::DBFilterByMinNumPointInGroundTruth* DatabasePreprocessingStep::mutable_filter_by_min_num_points() {
  if (!has_filter_by_min_num_points()) {
    clear_database_preprocessing_step();
    set_has_filter_by_min_num_points();
    database_preprocessing_step_.filter_by_min_num_points_ = new ::second::protos::DBFilterByMinNumPointInGroundTruth;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
  return database_preprocessing_step_.filter_by_min_num_points_;
}
inline ::second::protos::DBFilterByMinNumPointInGroundTruth* DatabasePreprocessingStep::release_filter_by_min_num_points() {
  // @@protoc_insertion_point(field_release:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
  if (has_filter_by_min_num_points()) {
    clear_has_database_preprocessing_step();
    ::second::protos::DBFilterByMinNumPointInGroundTruth* temp = database_preprocessing_step_.filter_by_min_num_points_;
    database_preprocessing_step_.filter_by_min_num_points_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DatabasePreprocessingStep::set_allocated_filter_by_min_num_points(::second::protos::DBFilterByMinNumPointInGroundTruth* filter_by_min_num_points) {
  clear_database_preprocessing_step();
  if (filter_by_min_num_points) {
    set_has_filter_by_min_num_points();
    database_preprocessing_step_.filter_by_min_num_points_ = filter_by_min_num_points;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
}

inline bool DatabasePreprocessingStep::has_database_preprocessing_step() const {
  return database_preprocessing_step_case() != DATABASE_PREPROCESSING_STEP_NOT_SET;
}
inline void DatabasePreprocessingStep::clear_has_database_preprocessing_step() {
  _oneof_case_[0] = DATABASE_PREPROCESSING_STEP_NOT_SET;
}
inline DatabasePreprocessingStep::DatabasePreprocessingStepCase DatabasePreprocessingStep::database_preprocessing_step_case() const {
  return DatabasePreprocessingStep::DatabasePreprocessingStepCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DBFilterByDifficulty

// repeated int32 removed_difficulties = 1;
inline int DBFilterByDifficulty::removed_difficulties_size() const {
  return removed_difficulties_.size();
}
inline void DBFilterByDifficulty::clear_removed_difficulties() {
  removed_difficulties_.Clear();
}
inline ::google::protobuf::int32 DBFilterByDifficulty::removed_difficulties(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.DBFilterByDifficulty.removed_difficulties)
  return removed_difficulties_.Get(index);
}
inline void DBFilterByDifficulty::set_removed_difficulties(int index, ::google::protobuf::int32 value) {
  removed_difficulties_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.DBFilterByDifficulty.removed_difficulties)
}
inline void DBFilterByDifficulty::add_removed_difficulties(::google::protobuf::int32 value) {
  removed_difficulties_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.DBFilterByDifficulty.removed_difficulties)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DBFilterByDifficulty::removed_difficulties() const {
  // @@protoc_insertion_point(field_list:second.protos.DBFilterByDifficulty.removed_difficulties)
  return removed_difficulties_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DBFilterByDifficulty::mutable_removed_difficulties() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.DBFilterByDifficulty.removed_difficulties)
  return &removed_difficulties_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DBFilterByMinNumPointInGroundTruth

// map<string, uint32> min_num_point_pairs = 1;
inline int DBFilterByMinNumPointInGroundTruth::min_num_point_pairs_size() const {
  return min_num_point_pairs_.size();
}
inline void DBFilterByMinNumPointInGroundTruth::clear_min_num_point_pairs() {
  min_num_point_pairs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
DBFilterByMinNumPointInGroundTruth::min_num_point_pairs() const {
  // @@protoc_insertion_point(field_map:second.protos.DBFilterByMinNumPointInGroundTruth.min_num_point_pairs)
  return min_num_point_pairs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
DBFilterByMinNumPointInGroundTruth::mutable_min_num_point_pairs() {
  // @@protoc_insertion_point(field_mutable_map:second.protos.DBFilterByMinNumPointInGroundTruth.min_num_point_pairs)
  return min_num_point_pairs_.MutableMap();
}

// -------------------------------------------------------------------

// PreprocessingStep

// .second.protos.RandomGlobalScaling random_global_scaling = 1;
inline bool PreprocessingStep::has_random_global_scaling() const {
  return preprocessing_step_case() == kRandomGlobalScaling;
}
inline void PreprocessingStep::set_has_random_global_scaling() {
  _oneof_case_[0] = kRandomGlobalScaling;
}
inline void PreprocessingStep::clear_random_global_scaling() {
  if (has_random_global_scaling()) {
    delete preprocessing_step_.random_global_scaling_;
    clear_has_preprocessing_step();
  }
}
inline  const ::second::protos::RandomGlobalScaling& PreprocessingStep::random_global_scaling() const {
  // @@protoc_insertion_point(field_get:second.protos.PreprocessingStep.random_global_scaling)
  return has_random_global_scaling()
      ? *preprocessing_step_.random_global_scaling_
      : ::second::protos::RandomGlobalScaling::default_instance();
}
inline ::second::protos::RandomGlobalScaling* PreprocessingStep::mutable_random_global_scaling() {
  if (!has_random_global_scaling()) {
    clear_preprocessing_step();
    set_has_random_global_scaling();
    preprocessing_step_.random_global_scaling_ = new ::second::protos::RandomGlobalScaling;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.PreprocessingStep.random_global_scaling)
  return preprocessing_step_.random_global_scaling_;
}
inline ::second::protos::RandomGlobalScaling* PreprocessingStep::release_random_global_scaling() {
  // @@protoc_insertion_point(field_release:second.protos.PreprocessingStep.random_global_scaling)
  if (has_random_global_scaling()) {
    clear_has_preprocessing_step();
    ::second::protos::RandomGlobalScaling* temp = preprocessing_step_.random_global_scaling_;
    preprocessing_step_.random_global_scaling_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PreprocessingStep::set_allocated_random_global_scaling(::second::protos::RandomGlobalScaling* random_global_scaling) {
  clear_preprocessing_step();
  if (random_global_scaling) {
    set_has_random_global_scaling();
    preprocessing_step_.random_global_scaling_ = random_global_scaling;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.PreprocessingStep.random_global_scaling)
}

// .second.protos.RandomGlobalRotation random_global_rotation = 2;
inline bool PreprocessingStep::has_random_global_rotation() const {
  return preprocessing_step_case() == kRandomGlobalRotation;
}
inline void PreprocessingStep::set_has_random_global_rotation() {
  _oneof_case_[0] = kRandomGlobalRotation;
}
inline void PreprocessingStep::clear_random_global_rotation() {
  if (has_random_global_rotation()) {
    delete preprocessing_step_.random_global_rotation_;
    clear_has_preprocessing_step();
  }
}
inline  const ::second::protos::RandomGlobalRotation& PreprocessingStep::random_global_rotation() const {
  // @@protoc_insertion_point(field_get:second.protos.PreprocessingStep.random_global_rotation)
  return has_random_global_rotation()
      ? *preprocessing_step_.random_global_rotation_
      : ::second::protos::RandomGlobalRotation::default_instance();
}
inline ::second::protos::RandomGlobalRotation* PreprocessingStep::mutable_random_global_rotation() {
  if (!has_random_global_rotation()) {
    clear_preprocessing_step();
    set_has_random_global_rotation();
    preprocessing_step_.random_global_rotation_ = new ::second::protos::RandomGlobalRotation;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.PreprocessingStep.random_global_rotation)
  return preprocessing_step_.random_global_rotation_;
}
inline ::second::protos::RandomGlobalRotation* PreprocessingStep::release_random_global_rotation() {
  // @@protoc_insertion_point(field_release:second.protos.PreprocessingStep.random_global_rotation)
  if (has_random_global_rotation()) {
    clear_has_preprocessing_step();
    ::second::protos::RandomGlobalRotation* temp = preprocessing_step_.random_global_rotation_;
    preprocessing_step_.random_global_rotation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PreprocessingStep::set_allocated_random_global_rotation(::second::protos::RandomGlobalRotation* random_global_rotation) {
  clear_preprocessing_step();
  if (random_global_rotation) {
    set_has_random_global_rotation();
    preprocessing_step_.random_global_rotation_ = random_global_rotation;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.PreprocessingStep.random_global_rotation)
}

inline bool PreprocessingStep::has_preprocessing_step() const {
  return preprocessing_step_case() != PREPROCESSING_STEP_NOT_SET;
}
inline void PreprocessingStep::clear_has_preprocessing_step() {
  _oneof_case_[0] = PREPROCESSING_STEP_NOT_SET;
}
inline PreprocessingStep::PreprocessingStepCase PreprocessingStep::preprocessing_step_case() const {
  return PreprocessingStep::PreprocessingStepCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RandomGlobalScaling

// float min_scale = 1;
inline void RandomGlobalScaling::clear_min_scale() {
  min_scale_ = 0;
}
inline float RandomGlobalScaling::min_scale() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalScaling.min_scale)
  return min_scale_;
}
inline void RandomGlobalScaling::set_min_scale(float value) {
  
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalScaling.min_scale)
}

// float max_scale = 2;
inline void RandomGlobalScaling::clear_max_scale() {
  max_scale_ = 0;
}
inline float RandomGlobalScaling::max_scale() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalScaling.max_scale)
  return max_scale_;
}
inline void RandomGlobalScaling::set_max_scale(float value) {
  
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalScaling.max_scale)
}

// -------------------------------------------------------------------

// RandomGlobalRotation

// float min_rad = 1;
inline void RandomGlobalRotation::clear_min_rad() {
  min_rad_ = 0;
}
inline float RandomGlobalRotation::min_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalRotation.min_rad)
  return min_rad_;
}
inline void RandomGlobalRotation::set_min_rad(float value) {
  
  min_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalRotation.min_rad)
}

// float max_rad = 2;
inline void RandomGlobalRotation::clear_max_rad() {
  max_rad_ = 0;
}
inline float RandomGlobalRotation::max_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalRotation.max_rad)
  return max_rad_;
}
inline void RandomGlobalRotation::set_max_rad(float value) {
  
  max_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalRotation.max_rad)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_second_2fprotos_2fpreprocess_2eproto__INCLUDED
