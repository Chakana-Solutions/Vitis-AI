// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/input_reader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "second/protos/input_reader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace second {
namespace protos {
class InputReaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InputReader>
     _instance;
} _InputReader_default_instance_;

namespace protobuf_second_2fprotos_2finput_5freader_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, record_file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, class_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, max_num_epochs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, prefetch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, max_number_of_voxels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, target_assigner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, kitti_info_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, kitti_root_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, shuffle_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, groundtruth_localization_noise_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, groundtruth_rotation_uniform_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, global_rotation_uniform_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, global_scaling_uniform_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, remove_unknown_examples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_workers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, anchor_area_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, remove_points_after_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, groundtruth_points_drop_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, groundtruth_drop_max_keep_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, remove_environment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, unlabeled_training_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, global_random_rotation_range_per_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, database_prep_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, database_sampler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, use_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, unlabeled_database_sampler_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(InputReader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputReader_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "second/protos/input_reader.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::second::protos::protobuf_second_2fprotos_2ftarget_2eproto::InitDefaults();
  ::second::protos::protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  ::second::protos::protobuf_second_2fprotos_2fsampler_2eproto::InitDefaults();
  _InputReader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InputReader_default_instance_);_InputReader_default_instance_._instance.get_mutable()->target_assigner_ = const_cast< ::second::protos::TargetAssigner*>(
      ::second::protos::TargetAssigner::internal_default_instance());
  _InputReader_default_instance_._instance.get_mutable()->database_sampler_ = const_cast< ::second::protos::Sampler*>(
      ::second::protos::Sampler::internal_default_instance());
  _InputReader_default_instance_._instance.get_mutable()->unlabeled_database_sampler_ = const_cast< ::second::protos::Sampler*>(
      ::second::protos::Sampler::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n second/protos/input_reader.proto\022\rseco"
      "nd.protos\032\032second/protos/target.proto\032\036s"
      "econd/protos/preprocess.proto\032\033second/pr"
      "otos/sampler.proto\"\307\007\n\013InputReader\022\030\n\020re"
      "cord_file_path\030\001 \001(\t\022\023\n\013class_names\030\002 \003("
      "\t\022\022\n\nbatch_size\030\003 \001(\r\022\026\n\016max_num_epochs\030"
      "\004 \001(\r\022\025\n\rprefetch_size\030\005 \001(\r\022\034\n\024max_numb"
      "er_of_voxels\030\006 \001(\r\0226\n\017target_assigner\030\007 "
      "\001(\0132\035.second.protos.TargetAssigner\022\027\n\017ki"
      "tti_info_path\030\010 \001(\t\022\027\n\017kitti_root_path\030\t"
      " \001(\t\022\026\n\016shuffle_points\030\n \001(\010\022*\n\"groundtr"
      "uth_localization_noise_std\030\013 \003(\002\022*\n\"grou"
      "ndtruth_rotation_uniform_noise\030\014 \003(\002\022%\n\035"
      "global_rotation_uniform_noise\030\r \003(\002\022$\n\034g"
      "lobal_scaling_uniform_noise\030\016 \003(\002\022\037\n\027rem"
      "ove_unknown_examples\030\017 \001(\010\022\023\n\013num_worker"
      "s\030\020 \001(\r\022\035\n\025anchor_area_threshold\030\021 \001(\002\022\""
      "\n\032remove_points_after_sample\030\022 \001(\010\022*\n\"gr"
      "oundtruth_points_drop_percentage\030\023 \001(\002\022("
      "\n groundtruth_drop_max_keep_points\030\024 \001(\r"
      "\022\032\n\022remove_environment\030\025 \001(\010\022\032\n\022unlabele"
      "d_training\030\026 \001(\010\022/\n\'global_random_rotati"
      "on_range_per_object\030\027 \003(\002\022E\n\023database_pr"
      "ep_steps\030\030 \003(\0132(.second.protos.DatabaseP"
      "reprocessingStep\0220\n\020database_sampler\030\031 \001"
      "(\0132\026.second.protos.Sampler\022\024\n\014use_group_"
      "id\030\032 \001(\010\022:\n\032unlabeled_database_sampler\030\033"
      " \001(\0132\026.second.protos.Samplerb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "second/protos/input_reader.proto", &protobuf_RegisterTypes);
  ::second::protos::protobuf_second_2fprotos_2ftarget_2eproto::AddDescriptors();
  ::second::protos::protobuf_second_2fprotos_2fpreprocess_2eproto::AddDescriptors();
  ::second::protos::protobuf_second_2fprotos_2fsampler_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_second_2fprotos_2finput_5freader_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputReader::kRecordFilePathFieldNumber;
const int InputReader::kClassNamesFieldNumber;
const int InputReader::kBatchSizeFieldNumber;
const int InputReader::kMaxNumEpochsFieldNumber;
const int InputReader::kPrefetchSizeFieldNumber;
const int InputReader::kMaxNumberOfVoxelsFieldNumber;
const int InputReader::kTargetAssignerFieldNumber;
const int InputReader::kKittiInfoPathFieldNumber;
const int InputReader::kKittiRootPathFieldNumber;
const int InputReader::kShufflePointsFieldNumber;
const int InputReader::kGroundtruthLocalizationNoiseStdFieldNumber;
const int InputReader::kGroundtruthRotationUniformNoiseFieldNumber;
const int InputReader::kGlobalRotationUniformNoiseFieldNumber;
const int InputReader::kGlobalScalingUniformNoiseFieldNumber;
const int InputReader::kRemoveUnknownExamplesFieldNumber;
const int InputReader::kNumWorkersFieldNumber;
const int InputReader::kAnchorAreaThresholdFieldNumber;
const int InputReader::kRemovePointsAfterSampleFieldNumber;
const int InputReader::kGroundtruthPointsDropPercentageFieldNumber;
const int InputReader::kGroundtruthDropMaxKeepPointsFieldNumber;
const int InputReader::kRemoveEnvironmentFieldNumber;
const int InputReader::kUnlabeledTrainingFieldNumber;
const int InputReader::kGlobalRandomRotationRangePerObjectFieldNumber;
const int InputReader::kDatabasePrepStepsFieldNumber;
const int InputReader::kDatabaseSamplerFieldNumber;
const int InputReader::kUseGroupIdFieldNumber;
const int InputReader::kUnlabeledDatabaseSamplerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputReader::InputReader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2finput_5freader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.InputReader)
}
InputReader::InputReader(const InputReader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      class_names_(from.class_names_),
      groundtruth_localization_noise_std_(from.groundtruth_localization_noise_std_),
      groundtruth_rotation_uniform_noise_(from.groundtruth_rotation_uniform_noise_),
      global_rotation_uniform_noise_(from.global_rotation_uniform_noise_),
      global_scaling_uniform_noise_(from.global_scaling_uniform_noise_),
      global_random_rotation_range_per_object_(from.global_random_rotation_range_per_object_),
      database_prep_steps_(from.database_prep_steps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.record_file_path().size() > 0) {
    record_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_file_path_);
  }
  kitti_info_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kitti_info_path().size() > 0) {
    kitti_info_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kitti_info_path_);
  }
  kitti_root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kitti_root_path().size() > 0) {
    kitti_root_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kitti_root_path_);
  }
  if (from.has_target_assigner()) {
    target_assigner_ = new ::second::protos::TargetAssigner(*from.target_assigner_);
  } else {
    target_assigner_ = NULL;
  }
  if (from.has_database_sampler()) {
    database_sampler_ = new ::second::protos::Sampler(*from.database_sampler_);
  } else {
    database_sampler_ = NULL;
  }
  if (from.has_unlabeled_database_sampler()) {
    unlabeled_database_sampler_ = new ::second::protos::Sampler(*from.unlabeled_database_sampler_);
  } else {
    unlabeled_database_sampler_ = NULL;
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_group_id_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(use_group_id_));
  // @@protoc_insertion_point(copy_constructor:second.protos.InputReader)
}

void InputReader::SharedCtor() {
  record_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kitti_info_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kitti_root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_assigner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_group_id_) -
      reinterpret_cast<char*>(&target_assigner_)) + sizeof(use_group_id_));
  _cached_size_ = 0;
}

InputReader::~InputReader() {
  // @@protoc_insertion_point(destructor:second.protos.InputReader)
  SharedDtor();
}

void InputReader::SharedDtor() {
  record_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kitti_info_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kitti_root_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_assigner_;
  if (this != internal_default_instance()) delete database_sampler_;
  if (this != internal_default_instance()) delete unlabeled_database_sampler_;
}

void InputReader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputReader::descriptor() {
  protobuf_second_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputReader& InputReader::default_instance() {
  protobuf_second_2fprotos_2finput_5freader_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputReader* InputReader::New(::google::protobuf::Arena* arena) const {
  InputReader* n = new InputReader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.InputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_names_.Clear();
  groundtruth_localization_noise_std_.Clear();
  groundtruth_rotation_uniform_noise_.Clear();
  global_rotation_uniform_noise_.Clear();
  global_scaling_uniform_noise_.Clear();
  global_random_rotation_range_per_object_.Clear();
  database_prep_steps_.Clear();
  record_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kitti_info_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kitti_root_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && target_assigner_ != NULL) {
    delete target_assigner_;
  }
  target_assigner_ = NULL;
  if (GetArenaNoVirtual() == NULL && database_sampler_ != NULL) {
    delete database_sampler_;
  }
  database_sampler_ = NULL;
  if (GetArenaNoVirtual() == NULL && unlabeled_database_sampler_ != NULL) {
    delete unlabeled_database_sampler_;
  }
  unlabeled_database_sampler_ = NULL;
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_group_id_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(use_group_id_));
  _internal_metadata_.Clear();
}

bool InputReader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.InputReader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string record_file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record_file_path().data(), static_cast<int>(this->record_file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.record_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string class_names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_names(this->class_names_size() - 1).data(),
            static_cast<int>(this->class_names(this->class_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.class_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batch_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_epochs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_epochs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prefetch_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_number_of_voxels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_voxels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.TargetAssigner target_assigner = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_assigner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kitti_info_path = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kitti_info_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kitti_info_path().data(), static_cast<int>(this->kitti_info_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.kitti_info_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kitti_root_path = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kitti_root_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kitti_root_path().data(), static_cast<int>(this->kitti_root_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.InputReader.kitti_root_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shuffle_points = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float groundtruth_localization_noise_std = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_groundtruth_localization_noise_std())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_groundtruth_localization_noise_std())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float groundtruth_rotation_uniform_noise = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_groundtruth_rotation_uniform_noise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_groundtruth_rotation_uniform_noise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float global_rotation_uniform_noise = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_global_rotation_uniform_noise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_global_rotation_uniform_noise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float global_scaling_uniform_noise = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_global_scaling_uniform_noise())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 114u, input, this->mutable_global_scaling_uniform_noise())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_unknown_examples = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_unknown_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_workers = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float anchor_area_threshold = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchor_area_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_points_after_sample = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_points_after_sample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float groundtruth_points_drop_percentage = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &groundtruth_points_drop_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groundtruth_drop_max_keep_points = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groundtruth_drop_max_keep_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool remove_environment = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_environment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unlabeled_training = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlabeled_training_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float global_random_rotation_range_per_object = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_global_random_rotation_range_per_object())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 186u, input, this->mutable_global_random_rotation_range_per_object())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_database_prep_steps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Sampler database_sampler = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_group_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.Sampler unlabeled_database_sampler = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlabeled_database_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.InputReader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.InputReader)
  return false;
#undef DO_
}

void InputReader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.InputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_file_path = 1;
  if (this->record_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record_file_path().data(), static_cast<int>(this->record_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.record_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->record_file_path(), output);
  }

  // repeated string class_names = 2;
  for (int i = 0, n = this->class_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_names(i).data(), static_cast<int>(this->class_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.class_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_names(i), output);
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->batch_size(), output);
  }

  // uint32 max_num_epochs = 4;
  if (this->max_num_epochs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_num_epochs(), output);
  }

  // uint32 prefetch_size = 5;
  if (this->prefetch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prefetch_size(), output);
  }

  // uint32 max_number_of_voxels = 6;
  if (this->max_number_of_voxels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_number_of_voxels(), output);
  }

  // .second.protos.TargetAssigner target_assigner = 7;
  if (this->has_target_assigner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->target_assigner_, output);
  }

  // string kitti_info_path = 8;
  if (this->kitti_info_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_info_path().data(), static_cast<int>(this->kitti_info_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_info_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->kitti_info_path(), output);
  }

  // string kitti_root_path = 9;
  if (this->kitti_root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_root_path().data(), static_cast<int>(this->kitti_root_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_root_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->kitti_root_path(), output);
  }

  // bool shuffle_points = 10;
  if (this->shuffle_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->shuffle_points(), output);
  }

  // repeated float groundtruth_localization_noise_std = 11;
  if (this->groundtruth_localization_noise_std_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _groundtruth_localization_noise_std_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->groundtruth_localization_noise_std().data(), this->groundtruth_localization_noise_std_size(), output);
  }

  // repeated float groundtruth_rotation_uniform_noise = 12;
  if (this->groundtruth_rotation_uniform_noise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _groundtruth_rotation_uniform_noise_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->groundtruth_rotation_uniform_noise().data(), this->groundtruth_rotation_uniform_noise_size(), output);
  }

  // repeated float global_rotation_uniform_noise = 13;
  if (this->global_rotation_uniform_noise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _global_rotation_uniform_noise_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->global_rotation_uniform_noise().data(), this->global_rotation_uniform_noise_size(), output);
  }

  // repeated float global_scaling_uniform_noise = 14;
  if (this->global_scaling_uniform_noise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _global_scaling_uniform_noise_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->global_scaling_uniform_noise().data(), this->global_scaling_uniform_noise_size(), output);
  }

  // bool remove_unknown_examples = 15;
  if (this->remove_unknown_examples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->remove_unknown_examples(), output);
  }

  // uint32 num_workers = 16;
  if (this->num_workers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->num_workers(), output);
  }

  // float anchor_area_threshold = 17;
  if (this->anchor_area_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->anchor_area_threshold(), output);
  }

  // bool remove_points_after_sample = 18;
  if (this->remove_points_after_sample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->remove_points_after_sample(), output);
  }

  // float groundtruth_points_drop_percentage = 19;
  if (this->groundtruth_points_drop_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->groundtruth_points_drop_percentage(), output);
  }

  // uint32 groundtruth_drop_max_keep_points = 20;
  if (this->groundtruth_drop_max_keep_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->groundtruth_drop_max_keep_points(), output);
  }

  // bool remove_environment = 21;
  if (this->remove_environment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->remove_environment(), output);
  }

  // bool unlabeled_training = 22;
  if (this->unlabeled_training() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->unlabeled_training(), output);
  }

  // repeated float global_random_rotation_range_per_object = 23;
  if (this->global_random_rotation_range_per_object_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _global_random_rotation_range_per_object_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->global_random_rotation_range_per_object().data(), this->global_random_rotation_range_per_object_size(), output);
  }

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->database_prep_steps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->database_prep_steps(static_cast<int>(i)), output);
  }

  // .second.protos.Sampler database_sampler = 25;
  if (this->has_database_sampler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->database_sampler_, output);
  }

  // bool use_group_id = 26;
  if (this->use_group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->use_group_id(), output);
  }

  // .second.protos.Sampler unlabeled_database_sampler = 27;
  if (this->has_unlabeled_database_sampler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->unlabeled_database_sampler_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.InputReader)
}

::google::protobuf::uint8* InputReader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.InputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string record_file_path = 1;
  if (this->record_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record_file_path().data(), static_cast<int>(this->record_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.record_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->record_file_path(), target);
  }

  // repeated string class_names = 2;
  for (int i = 0, n = this->class_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_names(i).data(), static_cast<int>(this->class_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.class_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_names(i), target);
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->batch_size(), target);
  }

  // uint32 max_num_epochs = 4;
  if (this->max_num_epochs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_num_epochs(), target);
  }

  // uint32 prefetch_size = 5;
  if (this->prefetch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prefetch_size(), target);
  }

  // uint32 max_number_of_voxels = 6;
  if (this->max_number_of_voxels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_number_of_voxels(), target);
  }

  // .second.protos.TargetAssigner target_assigner = 7;
  if (this->has_target_assigner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->target_assigner_, deterministic, target);
  }

  // string kitti_info_path = 8;
  if (this->kitti_info_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_info_path().data(), static_cast<int>(this->kitti_info_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_info_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->kitti_info_path(), target);
  }

  // string kitti_root_path = 9;
  if (this->kitti_root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kitti_root_path().data(), static_cast<int>(this->kitti_root_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "second.protos.InputReader.kitti_root_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->kitti_root_path(), target);
  }

  // bool shuffle_points = 10;
  if (this->shuffle_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->shuffle_points(), target);
  }

  // repeated float groundtruth_localization_noise_std = 11;
  if (this->groundtruth_localization_noise_std_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _groundtruth_localization_noise_std_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->groundtruth_localization_noise_std_, target);
  }

  // repeated float groundtruth_rotation_uniform_noise = 12;
  if (this->groundtruth_rotation_uniform_noise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _groundtruth_rotation_uniform_noise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->groundtruth_rotation_uniform_noise_, target);
  }

  // repeated float global_rotation_uniform_noise = 13;
  if (this->global_rotation_uniform_noise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _global_rotation_uniform_noise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->global_rotation_uniform_noise_, target);
  }

  // repeated float global_scaling_uniform_noise = 14;
  if (this->global_scaling_uniform_noise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _global_scaling_uniform_noise_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->global_scaling_uniform_noise_, target);
  }

  // bool remove_unknown_examples = 15;
  if (this->remove_unknown_examples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->remove_unknown_examples(), target);
  }

  // uint32 num_workers = 16;
  if (this->num_workers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->num_workers(), target);
  }

  // float anchor_area_threshold = 17;
  if (this->anchor_area_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->anchor_area_threshold(), target);
  }

  // bool remove_points_after_sample = 18;
  if (this->remove_points_after_sample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->remove_points_after_sample(), target);
  }

  // float groundtruth_points_drop_percentage = 19;
  if (this->groundtruth_points_drop_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->groundtruth_points_drop_percentage(), target);
  }

  // uint32 groundtruth_drop_max_keep_points = 20;
  if (this->groundtruth_drop_max_keep_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->groundtruth_drop_max_keep_points(), target);
  }

  // bool remove_environment = 21;
  if (this->remove_environment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->remove_environment(), target);
  }

  // bool unlabeled_training = 22;
  if (this->unlabeled_training() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->unlabeled_training(), target);
  }

  // repeated float global_random_rotation_range_per_object = 23;
  if (this->global_random_rotation_range_per_object_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _global_random_rotation_range_per_object_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->global_random_rotation_range_per_object_, target);
  }

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->database_prep_steps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->database_prep_steps(static_cast<int>(i)), deterministic, target);
  }

  // .second.protos.Sampler database_sampler = 25;
  if (this->has_database_sampler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->database_sampler_, deterministic, target);
  }

  // bool use_group_id = 26;
  if (this->use_group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->use_group_id(), target);
  }

  // .second.protos.Sampler unlabeled_database_sampler = 27;
  if (this->has_unlabeled_database_sampler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->unlabeled_database_sampler_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.InputReader)
  return target;
}

size_t InputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.InputReader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string class_names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->class_names_size());
  for (int i = 0, n = this->class_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_names(i));
  }

  // repeated float groundtruth_localization_noise_std = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->groundtruth_localization_noise_std_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _groundtruth_localization_noise_std_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float groundtruth_rotation_uniform_noise = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->groundtruth_rotation_uniform_noise_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _groundtruth_rotation_uniform_noise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float global_rotation_uniform_noise = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->global_rotation_uniform_noise_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _global_rotation_uniform_noise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float global_scaling_uniform_noise = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->global_scaling_uniform_noise_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _global_scaling_uniform_noise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float global_random_rotation_range_per_object = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->global_random_rotation_range_per_object_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _global_random_rotation_range_per_object_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->database_prep_steps_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_prep_steps(static_cast<int>(i)));
    }
  }

  // string record_file_path = 1;
  if (this->record_file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record_file_path());
  }

  // string kitti_info_path = 8;
  if (this->kitti_info_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kitti_info_path());
  }

  // string kitti_root_path = 9;
  if (this->kitti_root_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kitti_root_path());
  }

  // .second.protos.TargetAssigner target_assigner = 7;
  if (this->has_target_assigner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_assigner_);
  }

  // .second.protos.Sampler database_sampler = 25;
  if (this->has_database_sampler()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->database_sampler_);
  }

  // .second.protos.Sampler unlabeled_database_sampler = 27;
  if (this->has_unlabeled_database_sampler()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unlabeled_database_sampler_);
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batch_size());
  }

  // uint32 max_num_epochs = 4;
  if (this->max_num_epochs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num_epochs());
  }

  // uint32 prefetch_size = 5;
  if (this->prefetch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefetch_size());
  }

  // uint32 max_number_of_voxels = 6;
  if (this->max_number_of_voxels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_number_of_voxels());
  }

  // uint32 num_workers = 16;
  if (this->num_workers() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_workers());
  }

  // bool shuffle_points = 10;
  if (this->shuffle_points() != 0) {
    total_size += 1 + 1;
  }

  // bool remove_unknown_examples = 15;
  if (this->remove_unknown_examples() != 0) {
    total_size += 1 + 1;
  }

  // bool remove_points_after_sample = 18;
  if (this->remove_points_after_sample() != 0) {
    total_size += 2 + 1;
  }

  // bool remove_environment = 21;
  if (this->remove_environment() != 0) {
    total_size += 2 + 1;
  }

  // float anchor_area_threshold = 17;
  if (this->anchor_area_threshold() != 0) {
    total_size += 2 + 4;
  }

  // float groundtruth_points_drop_percentage = 19;
  if (this->groundtruth_points_drop_percentage() != 0) {
    total_size += 2 + 4;
  }

  // uint32 groundtruth_drop_max_keep_points = 20;
  if (this->groundtruth_drop_max_keep_points() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groundtruth_drop_max_keep_points());
  }

  // bool unlabeled_training = 22;
  if (this->unlabeled_training() != 0) {
    total_size += 2 + 1;
  }

  // bool use_group_id = 26;
  if (this->use_group_id() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputReader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const InputReader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputReader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.InputReader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.InputReader)
    MergeFrom(*source);
  }
}

void InputReader::MergeFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_names_.MergeFrom(from.class_names_);
  groundtruth_localization_noise_std_.MergeFrom(from.groundtruth_localization_noise_std_);
  groundtruth_rotation_uniform_noise_.MergeFrom(from.groundtruth_rotation_uniform_noise_);
  global_rotation_uniform_noise_.MergeFrom(from.global_rotation_uniform_noise_);
  global_scaling_uniform_noise_.MergeFrom(from.global_scaling_uniform_noise_);
  global_random_rotation_range_per_object_.MergeFrom(from.global_random_rotation_range_per_object_);
  database_prep_steps_.MergeFrom(from.database_prep_steps_);
  if (from.record_file_path().size() > 0) {

    record_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_file_path_);
  }
  if (from.kitti_info_path().size() > 0) {

    kitti_info_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kitti_info_path_);
  }
  if (from.kitti_root_path().size() > 0) {

    kitti_root_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kitti_root_path_);
  }
  if (from.has_target_assigner()) {
    mutable_target_assigner()->::second::protos::TargetAssigner::MergeFrom(from.target_assigner());
  }
  if (from.has_database_sampler()) {
    mutable_database_sampler()->::second::protos::Sampler::MergeFrom(from.database_sampler());
  }
  if (from.has_unlabeled_database_sampler()) {
    mutable_unlabeled_database_sampler()->::second::protos::Sampler::MergeFrom(from.unlabeled_database_sampler());
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.max_num_epochs() != 0) {
    set_max_num_epochs(from.max_num_epochs());
  }
  if (from.prefetch_size() != 0) {
    set_prefetch_size(from.prefetch_size());
  }
  if (from.max_number_of_voxels() != 0) {
    set_max_number_of_voxels(from.max_number_of_voxels());
  }
  if (from.num_workers() != 0) {
    set_num_workers(from.num_workers());
  }
  if (from.shuffle_points() != 0) {
    set_shuffle_points(from.shuffle_points());
  }
  if (from.remove_unknown_examples() != 0) {
    set_remove_unknown_examples(from.remove_unknown_examples());
  }
  if (from.remove_points_after_sample() != 0) {
    set_remove_points_after_sample(from.remove_points_after_sample());
  }
  if (from.remove_environment() != 0) {
    set_remove_environment(from.remove_environment());
  }
  if (from.anchor_area_threshold() != 0) {
    set_anchor_area_threshold(from.anchor_area_threshold());
  }
  if (from.groundtruth_points_drop_percentage() != 0) {
    set_groundtruth_points_drop_percentage(from.groundtruth_points_drop_percentage());
  }
  if (from.groundtruth_drop_max_keep_points() != 0) {
    set_groundtruth_drop_max_keep_points(from.groundtruth_drop_max_keep_points());
  }
  if (from.unlabeled_training() != 0) {
    set_unlabeled_training(from.unlabeled_training());
  }
  if (from.use_group_id() != 0) {
    set_use_group_id(from.use_group_id());
  }
}

void InputReader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputReader::CopyFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputReader::IsInitialized() const {
  return true;
}

void InputReader::Swap(InputReader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputReader::InternalSwap(InputReader* other) {
  using std::swap;
  class_names_.InternalSwap(&other->class_names_);
  groundtruth_localization_noise_std_.InternalSwap(&other->groundtruth_localization_noise_std_);
  groundtruth_rotation_uniform_noise_.InternalSwap(&other->groundtruth_rotation_uniform_noise_);
  global_rotation_uniform_noise_.InternalSwap(&other->global_rotation_uniform_noise_);
  global_scaling_uniform_noise_.InternalSwap(&other->global_scaling_uniform_noise_);
  global_random_rotation_range_per_object_.InternalSwap(&other->global_random_rotation_range_per_object_);
  database_prep_steps_.InternalSwap(&other->database_prep_steps_);
  record_file_path_.Swap(&other->record_file_path_);
  kitti_info_path_.Swap(&other->kitti_info_path_);
  kitti_root_path_.Swap(&other->kitti_root_path_);
  swap(target_assigner_, other->target_assigner_);
  swap(database_sampler_, other->database_sampler_);
  swap(unlabeled_database_sampler_, other->unlabeled_database_sampler_);
  swap(batch_size_, other->batch_size_);
  swap(max_num_epochs_, other->max_num_epochs_);
  swap(prefetch_size_, other->prefetch_size_);
  swap(max_number_of_voxels_, other->max_number_of_voxels_);
  swap(num_workers_, other->num_workers_);
  swap(shuffle_points_, other->shuffle_points_);
  swap(remove_unknown_examples_, other->remove_unknown_examples_);
  swap(remove_points_after_sample_, other->remove_points_after_sample_);
  swap(remove_environment_, other->remove_environment_);
  swap(anchor_area_threshold_, other->anchor_area_threshold_);
  swap(groundtruth_points_drop_percentage_, other->groundtruth_points_drop_percentage_);
  swap(groundtruth_drop_max_keep_points_, other->groundtruth_drop_max_keep_points_);
  swap(unlabeled_training_, other->unlabeled_training_);
  swap(use_group_id_, other->use_group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputReader::GetMetadata() const {
  protobuf_second_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputReader

// string record_file_path = 1;
void InputReader::clear_record_file_path() {
  record_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InputReader::record_file_path() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.record_file_path)
  return record_file_path_.GetNoArena();
}
void InputReader::set_record_file_path(const ::std::string& value) {
  
  record_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.record_file_path)
}
#if LANG_CXX11
void InputReader::set_record_file_path(::std::string&& value) {
  
  record_file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.InputReader.record_file_path)
}
#endif
void InputReader::set_record_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.InputReader.record_file_path)
}
void InputReader::set_record_file_path(const char* value, size_t size) {
  
  record_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.InputReader.record_file_path)
}
::std::string* InputReader::mutable_record_file_path() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.record_file_path)
  return record_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InputReader::release_record_file_path() {
  // @@protoc_insertion_point(field_release:second.protos.InputReader.record_file_path)
  
  return record_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InputReader::set_allocated_record_file_path(::std::string* record_file_path) {
  if (record_file_path != NULL) {
    
  } else {
    
  }
  record_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_file_path);
  // @@protoc_insertion_point(field_set_allocated:second.protos.InputReader.record_file_path)
}

// repeated string class_names = 2;
int InputReader::class_names_size() const {
  return class_names_.size();
}
void InputReader::clear_class_names() {
  class_names_.Clear();
}
const ::std::string& InputReader::class_names(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.class_names)
  return class_names_.Get(index);
}
::std::string* InputReader::mutable_class_names(int index) {
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.class_names)
  return class_names_.Mutable(index);
}
void InputReader::set_class_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:second.protos.InputReader.class_names)
  class_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void InputReader::set_class_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:second.protos.InputReader.class_names)
  class_names_.Mutable(index)->assign(std::move(value));
}
#endif
void InputReader::set_class_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:second.protos.InputReader.class_names)
}
void InputReader::set_class_names(int index, const char* value, size_t size) {
  class_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:second.protos.InputReader.class_names)
}
::std::string* InputReader::add_class_names() {
  // @@protoc_insertion_point(field_add_mutable:second.protos.InputReader.class_names)
  return class_names_.Add();
}
void InputReader::add_class_names(const ::std::string& value) {
  class_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:second.protos.InputReader.class_names)
}
#if LANG_CXX11
void InputReader::add_class_names(::std::string&& value) {
  class_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:second.protos.InputReader.class_names)
}
#endif
void InputReader::add_class_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:second.protos.InputReader.class_names)
}
void InputReader::add_class_names(const char* value, size_t size) {
  class_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:second.protos.InputReader.class_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
InputReader::class_names() const {
  // @@protoc_insertion_point(field_list:second.protos.InputReader.class_names)
  return class_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
InputReader::mutable_class_names() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.InputReader.class_names)
  return &class_names_;
}

// uint32 batch_size = 3;
void InputReader::clear_batch_size() {
  batch_size_ = 0u;
}
::google::protobuf::uint32 InputReader::batch_size() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.batch_size)
  return batch_size_;
}
void InputReader::set_batch_size(::google::protobuf::uint32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.batch_size)
}

// uint32 max_num_epochs = 4;
void InputReader::clear_max_num_epochs() {
  max_num_epochs_ = 0u;
}
::google::protobuf::uint32 InputReader::max_num_epochs() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.max_num_epochs)
  return max_num_epochs_;
}
void InputReader::set_max_num_epochs(::google::protobuf::uint32 value) {
  
  max_num_epochs_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.max_num_epochs)
}

// uint32 prefetch_size = 5;
void InputReader::clear_prefetch_size() {
  prefetch_size_ = 0u;
}
::google::protobuf::uint32 InputReader::prefetch_size() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.prefetch_size)
  return prefetch_size_;
}
void InputReader::set_prefetch_size(::google::protobuf::uint32 value) {
  
  prefetch_size_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.prefetch_size)
}

// uint32 max_number_of_voxels = 6;
void InputReader::clear_max_number_of_voxels() {
  max_number_of_voxels_ = 0u;
}
::google::protobuf::uint32 InputReader::max_number_of_voxels() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.max_number_of_voxels)
  return max_number_of_voxels_;
}
void InputReader::set_max_number_of_voxels(::google::protobuf::uint32 value) {
  
  max_number_of_voxels_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.max_number_of_voxels)
}

// .second.protos.TargetAssigner target_assigner = 7;
bool InputReader::has_target_assigner() const {
  return this != internal_default_instance() && target_assigner_ != NULL;
}
void InputReader::clear_target_assigner() {
  if (GetArenaNoVirtual() == NULL && target_assigner_ != NULL) delete target_assigner_;
  target_assigner_ = NULL;
}
const ::second::protos::TargetAssigner& InputReader::target_assigner() const {
  const ::second::protos::TargetAssigner* p = target_assigner_;
  // @@protoc_insertion_point(field_get:second.protos.InputReader.target_assigner)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::TargetAssigner*>(
      &::second::protos::_TargetAssigner_default_instance_);
}
::second::protos::TargetAssigner* InputReader::mutable_target_assigner() {
  
  if (target_assigner_ == NULL) {
    target_assigner_ = new ::second::protos::TargetAssigner;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.target_assigner)
  return target_assigner_;
}
::second::protos::TargetAssigner* InputReader::release_target_assigner() {
  // @@protoc_insertion_point(field_release:second.protos.InputReader.target_assigner)
  
  ::second::protos::TargetAssigner* temp = target_assigner_;
  target_assigner_ = NULL;
  return temp;
}
void InputReader::set_allocated_target_assigner(::second::protos::TargetAssigner* target_assigner) {
  delete target_assigner_;
  target_assigner_ = target_assigner;
  if (target_assigner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.InputReader.target_assigner)
}

// string kitti_info_path = 8;
void InputReader::clear_kitti_info_path() {
  kitti_info_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InputReader::kitti_info_path() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.kitti_info_path)
  return kitti_info_path_.GetNoArena();
}
void InputReader::set_kitti_info_path(const ::std::string& value) {
  
  kitti_info_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.kitti_info_path)
}
#if LANG_CXX11
void InputReader::set_kitti_info_path(::std::string&& value) {
  
  kitti_info_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.InputReader.kitti_info_path)
}
#endif
void InputReader::set_kitti_info_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kitti_info_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.InputReader.kitti_info_path)
}
void InputReader::set_kitti_info_path(const char* value, size_t size) {
  
  kitti_info_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.InputReader.kitti_info_path)
}
::std::string* InputReader::mutable_kitti_info_path() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.kitti_info_path)
  return kitti_info_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InputReader::release_kitti_info_path() {
  // @@protoc_insertion_point(field_release:second.protos.InputReader.kitti_info_path)
  
  return kitti_info_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InputReader::set_allocated_kitti_info_path(::std::string* kitti_info_path) {
  if (kitti_info_path != NULL) {
    
  } else {
    
  }
  kitti_info_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kitti_info_path);
  // @@protoc_insertion_point(field_set_allocated:second.protos.InputReader.kitti_info_path)
}

// string kitti_root_path = 9;
void InputReader::clear_kitti_root_path() {
  kitti_root_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InputReader::kitti_root_path() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.kitti_root_path)
  return kitti_root_path_.GetNoArena();
}
void InputReader::set_kitti_root_path(const ::std::string& value) {
  
  kitti_root_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.kitti_root_path)
}
#if LANG_CXX11
void InputReader::set_kitti_root_path(::std::string&& value) {
  
  kitti_root_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:second.protos.InputReader.kitti_root_path)
}
#endif
void InputReader::set_kitti_root_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kitti_root_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:second.protos.InputReader.kitti_root_path)
}
void InputReader::set_kitti_root_path(const char* value, size_t size) {
  
  kitti_root_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:second.protos.InputReader.kitti_root_path)
}
::std::string* InputReader::mutable_kitti_root_path() {
  
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.kitti_root_path)
  return kitti_root_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InputReader::release_kitti_root_path() {
  // @@protoc_insertion_point(field_release:second.protos.InputReader.kitti_root_path)
  
  return kitti_root_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InputReader::set_allocated_kitti_root_path(::std::string* kitti_root_path) {
  if (kitti_root_path != NULL) {
    
  } else {
    
  }
  kitti_root_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kitti_root_path);
  // @@protoc_insertion_point(field_set_allocated:second.protos.InputReader.kitti_root_path)
}

// bool shuffle_points = 10;
void InputReader::clear_shuffle_points() {
  shuffle_points_ = false;
}
bool InputReader::shuffle_points() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.shuffle_points)
  return shuffle_points_;
}
void InputReader::set_shuffle_points(bool value) {
  
  shuffle_points_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.shuffle_points)
}

// repeated float groundtruth_localization_noise_std = 11;
int InputReader::groundtruth_localization_noise_std_size() const {
  return groundtruth_localization_noise_std_.size();
}
void InputReader::clear_groundtruth_localization_noise_std() {
  groundtruth_localization_noise_std_.Clear();
}
float InputReader::groundtruth_localization_noise_std(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.groundtruth_localization_noise_std)
  return groundtruth_localization_noise_std_.Get(index);
}
void InputReader::set_groundtruth_localization_noise_std(int index, float value) {
  groundtruth_localization_noise_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.groundtruth_localization_noise_std)
}
void InputReader::add_groundtruth_localization_noise_std(float value) {
  groundtruth_localization_noise_std_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.InputReader.groundtruth_localization_noise_std)
}
const ::google::protobuf::RepeatedField< float >&
InputReader::groundtruth_localization_noise_std() const {
  // @@protoc_insertion_point(field_list:second.protos.InputReader.groundtruth_localization_noise_std)
  return groundtruth_localization_noise_std_;
}
::google::protobuf::RepeatedField< float >*
InputReader::mutable_groundtruth_localization_noise_std() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.InputReader.groundtruth_localization_noise_std)
  return &groundtruth_localization_noise_std_;
}

// repeated float groundtruth_rotation_uniform_noise = 12;
int InputReader::groundtruth_rotation_uniform_noise_size() const {
  return groundtruth_rotation_uniform_noise_.size();
}
void InputReader::clear_groundtruth_rotation_uniform_noise() {
  groundtruth_rotation_uniform_noise_.Clear();
}
float InputReader::groundtruth_rotation_uniform_noise(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.groundtruth_rotation_uniform_noise)
  return groundtruth_rotation_uniform_noise_.Get(index);
}
void InputReader::set_groundtruth_rotation_uniform_noise(int index, float value) {
  groundtruth_rotation_uniform_noise_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.groundtruth_rotation_uniform_noise)
}
void InputReader::add_groundtruth_rotation_uniform_noise(float value) {
  groundtruth_rotation_uniform_noise_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.InputReader.groundtruth_rotation_uniform_noise)
}
const ::google::protobuf::RepeatedField< float >&
InputReader::groundtruth_rotation_uniform_noise() const {
  // @@protoc_insertion_point(field_list:second.protos.InputReader.groundtruth_rotation_uniform_noise)
  return groundtruth_rotation_uniform_noise_;
}
::google::protobuf::RepeatedField< float >*
InputReader::mutable_groundtruth_rotation_uniform_noise() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.InputReader.groundtruth_rotation_uniform_noise)
  return &groundtruth_rotation_uniform_noise_;
}

// repeated float global_rotation_uniform_noise = 13;
int InputReader::global_rotation_uniform_noise_size() const {
  return global_rotation_uniform_noise_.size();
}
void InputReader::clear_global_rotation_uniform_noise() {
  global_rotation_uniform_noise_.Clear();
}
float InputReader::global_rotation_uniform_noise(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.global_rotation_uniform_noise)
  return global_rotation_uniform_noise_.Get(index);
}
void InputReader::set_global_rotation_uniform_noise(int index, float value) {
  global_rotation_uniform_noise_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.global_rotation_uniform_noise)
}
void InputReader::add_global_rotation_uniform_noise(float value) {
  global_rotation_uniform_noise_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.InputReader.global_rotation_uniform_noise)
}
const ::google::protobuf::RepeatedField< float >&
InputReader::global_rotation_uniform_noise() const {
  // @@protoc_insertion_point(field_list:second.protos.InputReader.global_rotation_uniform_noise)
  return global_rotation_uniform_noise_;
}
::google::protobuf::RepeatedField< float >*
InputReader::mutable_global_rotation_uniform_noise() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.InputReader.global_rotation_uniform_noise)
  return &global_rotation_uniform_noise_;
}

// repeated float global_scaling_uniform_noise = 14;
int InputReader::global_scaling_uniform_noise_size() const {
  return global_scaling_uniform_noise_.size();
}
void InputReader::clear_global_scaling_uniform_noise() {
  global_scaling_uniform_noise_.Clear();
}
float InputReader::global_scaling_uniform_noise(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.global_scaling_uniform_noise)
  return global_scaling_uniform_noise_.Get(index);
}
void InputReader::set_global_scaling_uniform_noise(int index, float value) {
  global_scaling_uniform_noise_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.global_scaling_uniform_noise)
}
void InputReader::add_global_scaling_uniform_noise(float value) {
  global_scaling_uniform_noise_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.InputReader.global_scaling_uniform_noise)
}
const ::google::protobuf::RepeatedField< float >&
InputReader::global_scaling_uniform_noise() const {
  // @@protoc_insertion_point(field_list:second.protos.InputReader.global_scaling_uniform_noise)
  return global_scaling_uniform_noise_;
}
::google::protobuf::RepeatedField< float >*
InputReader::mutable_global_scaling_uniform_noise() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.InputReader.global_scaling_uniform_noise)
  return &global_scaling_uniform_noise_;
}

// bool remove_unknown_examples = 15;
void InputReader::clear_remove_unknown_examples() {
  remove_unknown_examples_ = false;
}
bool InputReader::remove_unknown_examples() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.remove_unknown_examples)
  return remove_unknown_examples_;
}
void InputReader::set_remove_unknown_examples(bool value) {
  
  remove_unknown_examples_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.remove_unknown_examples)
}

// uint32 num_workers = 16;
void InputReader::clear_num_workers() {
  num_workers_ = 0u;
}
::google::protobuf::uint32 InputReader::num_workers() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.num_workers)
  return num_workers_;
}
void InputReader::set_num_workers(::google::protobuf::uint32 value) {
  
  num_workers_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.num_workers)
}

// float anchor_area_threshold = 17;
void InputReader::clear_anchor_area_threshold() {
  anchor_area_threshold_ = 0;
}
float InputReader::anchor_area_threshold() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.anchor_area_threshold)
  return anchor_area_threshold_;
}
void InputReader::set_anchor_area_threshold(float value) {
  
  anchor_area_threshold_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.anchor_area_threshold)
}

// bool remove_points_after_sample = 18;
void InputReader::clear_remove_points_after_sample() {
  remove_points_after_sample_ = false;
}
bool InputReader::remove_points_after_sample() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.remove_points_after_sample)
  return remove_points_after_sample_;
}
void InputReader::set_remove_points_after_sample(bool value) {
  
  remove_points_after_sample_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.remove_points_after_sample)
}

// float groundtruth_points_drop_percentage = 19;
void InputReader::clear_groundtruth_points_drop_percentage() {
  groundtruth_points_drop_percentage_ = 0;
}
float InputReader::groundtruth_points_drop_percentage() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.groundtruth_points_drop_percentage)
  return groundtruth_points_drop_percentage_;
}
void InputReader::set_groundtruth_points_drop_percentage(float value) {
  
  groundtruth_points_drop_percentage_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.groundtruth_points_drop_percentage)
}

// uint32 groundtruth_drop_max_keep_points = 20;
void InputReader::clear_groundtruth_drop_max_keep_points() {
  groundtruth_drop_max_keep_points_ = 0u;
}
::google::protobuf::uint32 InputReader::groundtruth_drop_max_keep_points() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.groundtruth_drop_max_keep_points)
  return groundtruth_drop_max_keep_points_;
}
void InputReader::set_groundtruth_drop_max_keep_points(::google::protobuf::uint32 value) {
  
  groundtruth_drop_max_keep_points_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.groundtruth_drop_max_keep_points)
}

// bool remove_environment = 21;
void InputReader::clear_remove_environment() {
  remove_environment_ = false;
}
bool InputReader::remove_environment() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.remove_environment)
  return remove_environment_;
}
void InputReader::set_remove_environment(bool value) {
  
  remove_environment_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.remove_environment)
}

// bool unlabeled_training = 22;
void InputReader::clear_unlabeled_training() {
  unlabeled_training_ = false;
}
bool InputReader::unlabeled_training() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.unlabeled_training)
  return unlabeled_training_;
}
void InputReader::set_unlabeled_training(bool value) {
  
  unlabeled_training_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.unlabeled_training)
}

// repeated float global_random_rotation_range_per_object = 23;
int InputReader::global_random_rotation_range_per_object_size() const {
  return global_random_rotation_range_per_object_.size();
}
void InputReader::clear_global_random_rotation_range_per_object() {
  global_random_rotation_range_per_object_.Clear();
}
float InputReader::global_random_rotation_range_per_object(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.global_random_rotation_range_per_object)
  return global_random_rotation_range_per_object_.Get(index);
}
void InputReader::set_global_random_rotation_range_per_object(int index, float value) {
  global_random_rotation_range_per_object_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.InputReader.global_random_rotation_range_per_object)
}
void InputReader::add_global_random_rotation_range_per_object(float value) {
  global_random_rotation_range_per_object_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.InputReader.global_random_rotation_range_per_object)
}
const ::google::protobuf::RepeatedField< float >&
InputReader::global_random_rotation_range_per_object() const {
  // @@protoc_insertion_point(field_list:second.protos.InputReader.global_random_rotation_range_per_object)
  return global_random_rotation_range_per_object_;
}
::google::protobuf::RepeatedField< float >*
InputReader::mutable_global_random_rotation_range_per_object() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.InputReader.global_random_rotation_range_per_object)
  return &global_random_rotation_range_per_object_;
}

// repeated .second.protos.DatabasePreprocessingStep database_prep_steps = 24;
int InputReader::database_prep_steps_size() const {
  return database_prep_steps_.size();
}
void InputReader::clear_database_prep_steps() {
  database_prep_steps_.Clear();
}
const ::second::protos::DatabasePreprocessingStep& InputReader::database_prep_steps(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.database_prep_steps)
  return database_prep_steps_.Get(index);
}
::second::protos::DatabasePreprocessingStep* InputReader::mutable_database_prep_steps(int index) {
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.database_prep_steps)
  return database_prep_steps_.Mutable(index);
}
::second::protos::DatabasePreprocessingStep* InputReader::add_database_prep_steps() {
  // @@protoc_insertion_point(field_add:second.protos.InputReader.database_prep_steps)
  return database_prep_steps_.Add();
}
::google::protobuf::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >*
InputReader::mutable_database_prep_steps() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.InputReader.database_prep_steps)
  return &database_prep_steps_;
}
const ::google::protobuf::RepeatedPtrField< ::second::protos::DatabasePreprocessingStep >&
InputReader::database_prep_steps() const {
  // @@protoc_insertion_point(field_list:second.protos.InputReader.database_prep_steps)
  return database_prep_steps_;
}

// .second.protos.Sampler database_sampler = 25;
bool InputReader::has_database_sampler() const {
  return this != internal_default_instance() && database_sampler_ != NULL;
}
void InputReader::clear_database_sampler() {
  if (GetArenaNoVirtual() == NULL && database_sampler_ != NULL) delete database_sampler_;
  database_sampler_ = NULL;
}
const ::second::protos::Sampler& InputReader::database_sampler() const {
  const ::second::protos::Sampler* p = database_sampler_;
  // @@protoc_insertion_point(field_get:second.protos.InputReader.database_sampler)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::Sampler*>(
      &::second::protos::_Sampler_default_instance_);
}
::second::protos::Sampler* InputReader::mutable_database_sampler() {
  
  if (database_sampler_ == NULL) {
    database_sampler_ = new ::second::protos::Sampler;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.database_sampler)
  return database_sampler_;
}
::second::protos::Sampler* InputReader::release_database_sampler() {
  // @@protoc_insertion_point(field_release:second.protos.InputReader.database_sampler)
  
  ::second::protos::Sampler* temp = database_sampler_;
  database_sampler_ = NULL;
  return temp;
}
void InputReader::set_allocated_database_sampler(::second::protos::Sampler* database_sampler) {
  delete database_sampler_;
  database_sampler_ = database_sampler;
  if (database_sampler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.InputReader.database_sampler)
}

// bool use_group_id = 26;
void InputReader::clear_use_group_id() {
  use_group_id_ = false;
}
bool InputReader::use_group_id() const {
  // @@protoc_insertion_point(field_get:second.protos.InputReader.use_group_id)
  return use_group_id_;
}
void InputReader::set_use_group_id(bool value) {
  
  use_group_id_ = value;
  // @@protoc_insertion_point(field_set:second.protos.InputReader.use_group_id)
}

// .second.protos.Sampler unlabeled_database_sampler = 27;
bool InputReader::has_unlabeled_database_sampler() const {
  return this != internal_default_instance() && unlabeled_database_sampler_ != NULL;
}
void InputReader::clear_unlabeled_database_sampler() {
  if (GetArenaNoVirtual() == NULL && unlabeled_database_sampler_ != NULL) delete unlabeled_database_sampler_;
  unlabeled_database_sampler_ = NULL;
}
const ::second::protos::Sampler& InputReader::unlabeled_database_sampler() const {
  const ::second::protos::Sampler* p = unlabeled_database_sampler_;
  // @@protoc_insertion_point(field_get:second.protos.InputReader.unlabeled_database_sampler)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::Sampler*>(
      &::second::protos::_Sampler_default_instance_);
}
::second::protos::Sampler* InputReader::mutable_unlabeled_database_sampler() {
  
  if (unlabeled_database_sampler_ == NULL) {
    unlabeled_database_sampler_ = new ::second::protos::Sampler;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.InputReader.unlabeled_database_sampler)
  return unlabeled_database_sampler_;
}
::second::protos::Sampler* InputReader::release_unlabeled_database_sampler() {
  // @@protoc_insertion_point(field_release:second.protos.InputReader.unlabeled_database_sampler)
  
  ::second::protos::Sampler* temp = unlabeled_database_sampler_;
  unlabeled_database_sampler_ = NULL;
  return temp;
}
void InputReader::set_allocated_unlabeled_database_sampler(::second::protos::Sampler* unlabeled_database_sampler) {
  delete unlabeled_database_sampler_;
  unlabeled_database_sampler_ = unlabeled_database_sampler;
  if (unlabeled_database_sampler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.InputReader.unlabeled_database_sampler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)
