// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/losses.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "second/protos/losses.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace second {
namespace protos {
class LossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Loss>
     _instance;
} _Loss_default_instance_;
class LocalizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LocalizationLoss>
     _instance;
  const ::second::protos::WeightedL2LocalizationLoss* weighted_l2_;
  const ::second::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1_;
} _LocalizationLoss_default_instance_;
class WeightedL2LocalizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedL2LocalizationLoss>
     _instance;
} _WeightedL2LocalizationLoss_default_instance_;
class WeightedSmoothL1LocalizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedSmoothL1LocalizationLoss>
     _instance;
} _WeightedSmoothL1LocalizationLoss_default_instance_;
class ClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClassificationLoss>
     _instance;
  const ::second::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid_;
  const ::second::protos::WeightedSoftmaxClassificationLoss* weighted_softmax_;
  const ::second::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid_;
  const ::second::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal_;
  const ::second::protos::SoftmaxFocalClassificationLoss* weighted_softmax_focal_;
} _ClassificationLoss_default_instance_;
class WeightedSigmoidClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedSigmoidClassificationLoss>
     _instance;
} _WeightedSigmoidClassificationLoss_default_instance_;
class SigmoidFocalClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SigmoidFocalClassificationLoss>
     _instance;
} _SigmoidFocalClassificationLoss_default_instance_;
class SoftmaxFocalClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxFocalClassificationLoss>
     _instance;
} _SoftmaxFocalClassificationLoss_default_instance_;
class WeightedSoftmaxClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedSoftmaxClassificationLoss>
     _instance;
} _WeightedSoftmaxClassificationLoss_default_instance_;
class BootstrappedSigmoidClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BootstrappedSigmoidClassificationLoss>
     _instance;
} _BootstrappedSigmoidClassificationLoss_default_instance_;
class HardExampleMinerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HardExampleMiner>
     _instance;
} _HardExampleMiner_default_instance_;

namespace protobuf_second_2fprotos_2flosses_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, localization_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, classification_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, hard_example_miner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, classification_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, localization_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(LocalizationLossDefaultTypeInternal, weighted_l2_),
  offsetof(LocalizationLossDefaultTypeInternal, weighted_smooth_l1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, encode_rad_error_by_sin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, localization_loss_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedL2LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedL2LocalizationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedL2LocalizationLoss, code_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, sigma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, code_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(ClassificationLossDefaultTypeInternal, weighted_sigmoid_),
  offsetof(ClassificationLossDefaultTypeInternal, weighted_softmax_),
  offsetof(ClassificationLossDefaultTypeInternal, bootstrapped_sigmoid_),
  offsetof(ClassificationLossDefaultTypeInternal, weighted_sigmoid_focal_),
  offsetof(ClassificationLossDefaultTypeInternal, weighted_softmax_focal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationLoss, classification_loss_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSigmoidClassificationLoss, anchorwise_output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, alpha_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxFocalClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxFocalClassificationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxFocalClassificationLoss, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxFocalClassificationLoss, alpha_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationLoss, logit_scale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, hard_bootstrap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, anchorwise_output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, num_hard_examples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, iou_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, loss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, max_negatives_per_positive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, min_negatives_per_image_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Loss)},
  { 10, -1, sizeof(LocalizationLoss)},
  { 19, -1, sizeof(WeightedL2LocalizationLoss)},
  { 26, -1, sizeof(WeightedSmoothL1LocalizationLoss)},
  { 34, -1, sizeof(ClassificationLoss)},
  { 45, -1, sizeof(WeightedSigmoidClassificationLoss)},
  { 51, -1, sizeof(SigmoidFocalClassificationLoss)},
  { 59, -1, sizeof(SoftmaxFocalClassificationLoss)},
  { 67, -1, sizeof(WeightedSoftmaxClassificationLoss)},
  { 74, -1, sizeof(BootstrappedSigmoidClassificationLoss)},
  { 82, -1, sizeof(HardExampleMiner)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Loss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedL2LocalizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedSmoothL1LocalizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SigmoidFocalClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxFocalClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedSoftmaxClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BootstrappedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HardExampleMiner_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "second/protos/losses.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Loss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Loss_default_instance_);_LocalizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LocalizationLoss_default_instance_);_WeightedL2LocalizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedL2LocalizationLoss_default_instance_);_WeightedSmoothL1LocalizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedSmoothL1LocalizationLoss_default_instance_);_ClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClassificationLoss_default_instance_);_WeightedSigmoidClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedSigmoidClassificationLoss_default_instance_);_SigmoidFocalClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SigmoidFocalClassificationLoss_default_instance_);_SoftmaxFocalClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SoftmaxFocalClassificationLoss_default_instance_);_WeightedSoftmaxClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedSoftmaxClassificationLoss_default_instance_);_BootstrappedSigmoidClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BootstrappedSigmoidClassificationLoss_default_instance_);_HardExampleMiner_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HardExampleMiner_default_instance_);_Loss_default_instance_._instance.get_mutable()->localization_loss_ = const_cast< ::second::protos::LocalizationLoss*>(
      ::second::protos::LocalizationLoss::internal_default_instance());
  _Loss_default_instance_._instance.get_mutable()->classification_loss_ = const_cast< ::second::protos::ClassificationLoss*>(
      ::second::protos::ClassificationLoss::internal_default_instance());
  _Loss_default_instance_._instance.get_mutable()->hard_example_miner_ = const_cast< ::second::protos::HardExampleMiner*>(
      ::second::protos::HardExampleMiner::internal_default_instance());
  _LocalizationLoss_default_instance_.weighted_l2_ = const_cast< ::second::protos::WeightedL2LocalizationLoss*>(
      ::second::protos::WeightedL2LocalizationLoss::internal_default_instance());
  _LocalizationLoss_default_instance_.weighted_smooth_l1_ = const_cast< ::second::protos::WeightedSmoothL1LocalizationLoss*>(
      ::second::protos::WeightedSmoothL1LocalizationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_sigmoid_ = const_cast< ::second::protos::WeightedSigmoidClassificationLoss*>(
      ::second::protos::WeightedSigmoidClassificationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_softmax_ = const_cast< ::second::protos::WeightedSoftmaxClassificationLoss*>(
      ::second::protos::WeightedSoftmaxClassificationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.bootstrapped_sigmoid_ = const_cast< ::second::protos::BootstrappedSigmoidClassificationLoss*>(
      ::second::protos::BootstrappedSigmoidClassificationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_sigmoid_focal_ = const_cast< ::second::protos::SigmoidFocalClassificationLoss*>(
      ::second::protos::SigmoidFocalClassificationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_softmax_focal_ = const_cast< ::second::protos::SoftmaxFocalClassificationLoss*>(
      ::second::protos::SoftmaxFocalClassificationLoss::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032second/protos/losses.proto\022\rsecond.pro"
      "tos\"\373\001\n\004Loss\022:\n\021localization_loss\030\001 \001(\0132"
      "\037.second.protos.LocalizationLoss\022>\n\023clas"
      "sification_loss\030\002 \001(\0132!.second.protos.Cl"
      "assificationLoss\022;\n\022hard_example_miner\030\003"
      " \001(\0132\037.second.protos.HardExampleMiner\022\035\n"
      "\025classification_weight\030\004 \001(\002\022\033\n\023localiza"
      "tion_weight\030\005 \001(\002\"\331\001\n\020LocalizationLoss\022@"
      "\n\013weighted_l2\030\001 \001(\0132).second.protos.Weig"
      "htedL2LocalizationLossH\000\022M\n\022weighted_smo"
      "oth_l1\030\002 \001(\0132/.second.protos.WeightedSmo"
      "othL1LocalizationLossH\000\022\037\n\027encode_rad_er"
      "ror_by_sin\030\003 \001(\010B\023\n\021localization_loss\"L\n"
      "\032WeightedL2LocalizationLoss\022\031\n\021anchorwis"
      "e_output\030\001 \001(\010\022\023\n\013code_weight\030\002 \003(\002\"a\n W"
      "eightedSmoothL1LocalizationLoss\022\031\n\021ancho"
      "rwise_output\030\001 \001(\010\022\r\n\005sigma\030\002 \001(\002\022\023\n\013cod"
      "e_weight\030\003 \003(\002\"\277\003\n\022ClassificationLoss\022L\n"
      "\020weighted_sigmoid\030\001 \001(\01320.second.protos."
      "WeightedSigmoidClassificationLossH\000\022L\n\020w"
      "eighted_softmax\030\002 \001(\01320.second.protos.We"
      "ightedSoftmaxClassificationLossH\000\022T\n\024boo"
      "tstrapped_sigmoid\030\003 \001(\01324.second.protos."
      "BootstrappedSigmoidClassificationLossH\000\022"
      "O\n\026weighted_sigmoid_focal\030\004 \001(\0132-.second"
      ".protos.SigmoidFocalClassificationLossH\000"
      "\022O\n\026weighted_softmax_focal\030\005 \001(\0132-.secon"
      "d.protos.SoftmaxFocalClassificationLossH"
      "\000B\025\n\023classification_loss\">\n!WeightedSigm"
      "oidClassificationLoss\022\031\n\021anchorwise_outp"
      "ut\030\001 \001(\010\"Y\n\036SigmoidFocalClassificationLo"
      "ss\022\031\n\021anchorwise_output\030\001 \001(\010\022\r\n\005gamma\030\002"
      " \001(\002\022\r\n\005alpha\030\003 \001(\002\"Y\n\036SoftmaxFocalClass"
      "ificationLoss\022\031\n\021anchorwise_output\030\001 \001(\010"
      "\022\r\n\005gamma\030\002 \001(\002\022\r\n\005alpha\030\003 \001(\002\"S\n!Weight"
      "edSoftmaxClassificationLoss\022\031\n\021anchorwis"
      "e_output\030\001 \001(\010\022\023\n\013logit_scale\030\002 \001(\002\"i\n%B"
      "ootstrappedSigmoidClassificationLoss\022\r\n\005"
      "alpha\030\001 \001(\002\022\026\n\016hard_bootstrap\030\002 \001(\010\022\031\n\021a"
      "nchorwise_output\030\003 \001(\010\"\202\002\n\020HardExampleMi"
      "ner\022\031\n\021num_hard_examples\030\001 \001(\005\022\025\n\riou_th"
      "reshold\030\002 \001(\002\022;\n\tloss_type\030\003 \001(\0162(.secon"
      "d.protos.HardExampleMiner.LossType\022\"\n\032ma"
      "x_negatives_per_positive\030\004 \001(\005\022\037\n\027min_ne"
      "gatives_per_image\030\005 \001(\005\":\n\010LossType\022\010\n\004B"
      "OTH\020\000\022\022\n\016CLASSIFICATION\020\001\022\020\n\014LOCALIZATIO"
      "N\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "second/protos/losses.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_second_2fprotos_2flosses_2eproto

const ::google::protobuf::EnumDescriptor* HardExampleMiner_LossType_descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_enum_descriptors[0];
}
bool HardExampleMiner_LossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HardExampleMiner_LossType HardExampleMiner::BOTH;
const HardExampleMiner_LossType HardExampleMiner::CLASSIFICATION;
const HardExampleMiner_LossType HardExampleMiner::LOCALIZATION;
const HardExampleMiner_LossType HardExampleMiner::LossType_MIN;
const HardExampleMiner_LossType HardExampleMiner::LossType_MAX;
const int HardExampleMiner::LossType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Loss::kLocalizationLossFieldNumber;
const int Loss::kClassificationLossFieldNumber;
const int Loss::kHardExampleMinerFieldNumber;
const int Loss::kClassificationWeightFieldNumber;
const int Loss::kLocalizationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Loss::Loss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Loss)
}
Loss::Loss(const Loss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_localization_loss()) {
    localization_loss_ = new ::second::protos::LocalizationLoss(*from.localization_loss_);
  } else {
    localization_loss_ = NULL;
  }
  if (from.has_classification_loss()) {
    classification_loss_ = new ::second::protos::ClassificationLoss(*from.classification_loss_);
  } else {
    classification_loss_ = NULL;
  }
  if (from.has_hard_example_miner()) {
    hard_example_miner_ = new ::second::protos::HardExampleMiner(*from.hard_example_miner_);
  } else {
    hard_example_miner_ = NULL;
  }
  ::memcpy(&classification_weight_, &from.classification_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&localization_weight_) -
    reinterpret_cast<char*>(&classification_weight_)) + sizeof(localization_weight_));
  // @@protoc_insertion_point(copy_constructor:second.protos.Loss)
}

void Loss::SharedCtor() {
  ::memset(&localization_loss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_weight_) -
      reinterpret_cast<char*>(&localization_loss_)) + sizeof(localization_weight_));
  _cached_size_ = 0;
}

Loss::~Loss() {
  // @@protoc_insertion_point(destructor:second.protos.Loss)
  SharedDtor();
}

void Loss::SharedDtor() {
  if (this != internal_default_instance()) delete localization_loss_;
  if (this != internal_default_instance()) delete classification_loss_;
  if (this != internal_default_instance()) delete hard_example_miner_;
}

void Loss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Loss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Loss& Loss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

Loss* Loss::New(::google::protobuf::Arena* arena) const {
  Loss* n = new Loss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Loss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Loss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && localization_loss_ != NULL) {
    delete localization_loss_;
  }
  localization_loss_ = NULL;
  if (GetArenaNoVirtual() == NULL && classification_loss_ != NULL) {
    delete classification_loss_;
  }
  classification_loss_ = NULL;
  if (GetArenaNoVirtual() == NULL && hard_example_miner_ != NULL) {
    delete hard_example_miner_;
  }
  hard_example_miner_ = NULL;
  ::memset(&classification_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_weight_) -
      reinterpret_cast<char*>(&classification_weight_)) + sizeof(localization_weight_));
  _internal_metadata_.Clear();
}

bool Loss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Loss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.LocalizationLoss localization_loss = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.ClassificationLoss classification_loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.HardExampleMiner hard_example_miner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_example_miner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float classification_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &classification_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float localization_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &localization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Loss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Loss)
  return false;
#undef DO_
}

void Loss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Loss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LocalizationLoss localization_loss = 1;
  if (this->has_localization_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->localization_loss_, output);
  }

  // .second.protos.ClassificationLoss classification_loss = 2;
  if (this->has_classification_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_loss_, output);
  }

  // .second.protos.HardExampleMiner hard_example_miner = 3;
  if (this->has_hard_example_miner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hard_example_miner_, output);
  }

  // float classification_weight = 4;
  if (this->classification_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->classification_weight(), output);
  }

  // float localization_weight = 5;
  if (this->localization_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->localization_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Loss)
}

::google::protobuf::uint8* Loss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Loss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.LocalizationLoss localization_loss = 1;
  if (this->has_localization_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->localization_loss_, deterministic, target);
  }

  // .second.protos.ClassificationLoss classification_loss = 2;
  if (this->has_classification_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classification_loss_, deterministic, target);
  }

  // .second.protos.HardExampleMiner hard_example_miner = 3;
  if (this->has_hard_example_miner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->hard_example_miner_, deterministic, target);
  }

  // float classification_weight = 4;
  if (this->classification_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->classification_weight(), target);
  }

  // float localization_weight = 5;
  if (this->localization_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->localization_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Loss)
  return target;
}

size_t Loss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Loss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .second.protos.LocalizationLoss localization_loss = 1;
  if (this->has_localization_loss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->localization_loss_);
  }

  // .second.protos.ClassificationLoss classification_loss = 2;
  if (this->has_classification_loss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->classification_loss_);
  }

  // .second.protos.HardExampleMiner hard_example_miner = 3;
  if (this->has_hard_example_miner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hard_example_miner_);
  }

  // float classification_weight = 4;
  if (this->classification_weight() != 0) {
    total_size += 1 + 4;
  }

  // float localization_weight = 5;
  if (this->localization_weight() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Loss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  const Loss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Loss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Loss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Loss)
    MergeFrom(*source);
  }
}

void Loss::MergeFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_localization_loss()) {
    mutable_localization_loss()->::second::protos::LocalizationLoss::MergeFrom(from.localization_loss());
  }
  if (from.has_classification_loss()) {
    mutable_classification_loss()->::second::protos::ClassificationLoss::MergeFrom(from.classification_loss());
  }
  if (from.has_hard_example_miner()) {
    mutable_hard_example_miner()->::second::protos::HardExampleMiner::MergeFrom(from.hard_example_miner());
  }
  if (from.classification_weight() != 0) {
    set_classification_weight(from.classification_weight());
  }
  if (from.localization_weight() != 0) {
    set_localization_weight(from.localization_weight());
  }
}

void Loss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Loss::CopyFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loss::IsInitialized() const {
  return true;
}

void Loss::Swap(Loss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Loss::InternalSwap(Loss* other) {
  using std::swap;
  swap(localization_loss_, other->localization_loss_);
  swap(classification_loss_, other->classification_loss_);
  swap(hard_example_miner_, other->hard_example_miner_);
  swap(classification_weight_, other->classification_weight_);
  swap(localization_weight_, other->localization_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Loss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Loss

// .second.protos.LocalizationLoss localization_loss = 1;
bool Loss::has_localization_loss() const {
  return this != internal_default_instance() && localization_loss_ != NULL;
}
void Loss::clear_localization_loss() {
  if (GetArenaNoVirtual() == NULL && localization_loss_ != NULL) delete localization_loss_;
  localization_loss_ = NULL;
}
const ::second::protos::LocalizationLoss& Loss::localization_loss() const {
  const ::second::protos::LocalizationLoss* p = localization_loss_;
  // @@protoc_insertion_point(field_get:second.protos.Loss.localization_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::LocalizationLoss*>(
      &::second::protos::_LocalizationLoss_default_instance_);
}
::second::protos::LocalizationLoss* Loss::mutable_localization_loss() {
  
  if (localization_loss_ == NULL) {
    localization_loss_ = new ::second::protos::LocalizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.Loss.localization_loss)
  return localization_loss_;
}
::second::protos::LocalizationLoss* Loss::release_localization_loss() {
  // @@protoc_insertion_point(field_release:second.protos.Loss.localization_loss)
  
  ::second::protos::LocalizationLoss* temp = localization_loss_;
  localization_loss_ = NULL;
  return temp;
}
void Loss::set_allocated_localization_loss(::second::protos::LocalizationLoss* localization_loss) {
  delete localization_loss_;
  localization_loss_ = localization_loss;
  if (localization_loss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Loss.localization_loss)
}

// .second.protos.ClassificationLoss classification_loss = 2;
bool Loss::has_classification_loss() const {
  return this != internal_default_instance() && classification_loss_ != NULL;
}
void Loss::clear_classification_loss() {
  if (GetArenaNoVirtual() == NULL && classification_loss_ != NULL) delete classification_loss_;
  classification_loss_ = NULL;
}
const ::second::protos::ClassificationLoss& Loss::classification_loss() const {
  const ::second::protos::ClassificationLoss* p = classification_loss_;
  // @@protoc_insertion_point(field_get:second.protos.Loss.classification_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::ClassificationLoss*>(
      &::second::protos::_ClassificationLoss_default_instance_);
}
::second::protos::ClassificationLoss* Loss::mutable_classification_loss() {
  
  if (classification_loss_ == NULL) {
    classification_loss_ = new ::second::protos::ClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.Loss.classification_loss)
  return classification_loss_;
}
::second::protos::ClassificationLoss* Loss::release_classification_loss() {
  // @@protoc_insertion_point(field_release:second.protos.Loss.classification_loss)
  
  ::second::protos::ClassificationLoss* temp = classification_loss_;
  classification_loss_ = NULL;
  return temp;
}
void Loss::set_allocated_classification_loss(::second::protos::ClassificationLoss* classification_loss) {
  delete classification_loss_;
  classification_loss_ = classification_loss;
  if (classification_loss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Loss.classification_loss)
}

// .second.protos.HardExampleMiner hard_example_miner = 3;
bool Loss::has_hard_example_miner() const {
  return this != internal_default_instance() && hard_example_miner_ != NULL;
}
void Loss::clear_hard_example_miner() {
  if (GetArenaNoVirtual() == NULL && hard_example_miner_ != NULL) delete hard_example_miner_;
  hard_example_miner_ = NULL;
}
const ::second::protos::HardExampleMiner& Loss::hard_example_miner() const {
  const ::second::protos::HardExampleMiner* p = hard_example_miner_;
  // @@protoc_insertion_point(field_get:second.protos.Loss.hard_example_miner)
  return p != NULL ? *p : *reinterpret_cast<const ::second::protos::HardExampleMiner*>(
      &::second::protos::_HardExampleMiner_default_instance_);
}
::second::protos::HardExampleMiner* Loss::mutable_hard_example_miner() {
  
  if (hard_example_miner_ == NULL) {
    hard_example_miner_ = new ::second::protos::HardExampleMiner;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.Loss.hard_example_miner)
  return hard_example_miner_;
}
::second::protos::HardExampleMiner* Loss::release_hard_example_miner() {
  // @@protoc_insertion_point(field_release:second.protos.Loss.hard_example_miner)
  
  ::second::protos::HardExampleMiner* temp = hard_example_miner_;
  hard_example_miner_ = NULL;
  return temp;
}
void Loss::set_allocated_hard_example_miner(::second::protos::HardExampleMiner* hard_example_miner) {
  delete hard_example_miner_;
  hard_example_miner_ = hard_example_miner;
  if (hard_example_miner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.Loss.hard_example_miner)
}

// float classification_weight = 4;
void Loss::clear_classification_weight() {
  classification_weight_ = 0;
}
float Loss::classification_weight() const {
  // @@protoc_insertion_point(field_get:second.protos.Loss.classification_weight)
  return classification_weight_;
}
void Loss::set_classification_weight(float value) {
  
  classification_weight_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Loss.classification_weight)
}

// float localization_weight = 5;
void Loss::clear_localization_weight() {
  localization_weight_ = 0;
}
float Loss::localization_weight() const {
  // @@protoc_insertion_point(field_get:second.protos.Loss.localization_weight)
  return localization_weight_;
}
void Loss::set_localization_weight(float value) {
  
  localization_weight_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Loss.localization_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationLoss::kWeightedL2FieldNumber;
const int LocalizationLoss::kWeightedSmoothL1FieldNumber;
const int LocalizationLoss::kEncodeRadErrorBySinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationLoss::LocalizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.LocalizationLoss)
}
LocalizationLoss::LocalizationLoss(const LocalizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encode_rad_error_by_sin_ = from.encode_rad_error_by_sin_;
  clear_has_localization_loss();
  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::second::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::second::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.LocalizationLoss)
}

void LocalizationLoss::SharedCtor() {
  encode_rad_error_by_sin_ = false;
  clear_has_localization_loss();
  _cached_size_ = 0;
}

LocalizationLoss::~LocalizationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.LocalizationLoss)
  SharedDtor();
}

void LocalizationLoss::SharedDtor() {
  if (has_localization_loss()) {
    clear_localization_loss();
  }
}

void LocalizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationLoss& LocalizationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationLoss* LocalizationLoss::New(::google::protobuf::Arena* arena) const {
  LocalizationLoss* n = new LocalizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationLoss::clear_localization_loss() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.LocalizationLoss)
  switch (localization_loss_case()) {
    case kWeightedL2: {
      delete localization_loss_.weighted_l2_;
      break;
    }
    case kWeightedSmoothL1: {
      delete localization_loss_.weighted_smooth_l1_;
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALIZATION_LOSS_NOT_SET;
}


void LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encode_rad_error_by_sin_ = false;
  clear_localization_loss();
  _internal_metadata_.Clear();
}

bool LocalizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.LocalizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_l2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_smooth_l1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encode_rad_error_by_sin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_rad_error_by_sin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.LocalizationLoss)
  return false;
#undef DO_
}

void LocalizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
  if (has_weighted_l2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *localization_loss_.weighted_l2_, output);
  }

  // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
  if (has_weighted_smooth_l1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *localization_loss_.weighted_smooth_l1_, output);
  }

  // bool encode_rad_error_by_sin = 3;
  if (this->encode_rad_error_by_sin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->encode_rad_error_by_sin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.LocalizationLoss)
}

::google::protobuf::uint8* LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
  if (has_weighted_l2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *localization_loss_.weighted_l2_, deterministic, target);
  }

  // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
  if (has_weighted_smooth_l1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *localization_loss_.weighted_smooth_l1_, deterministic, target);
  }

  // bool encode_rad_error_by_sin = 3;
  if (this->encode_rad_error_by_sin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->encode_rad_error_by_sin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.LocalizationLoss)
  return target;
}

size_t LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.LocalizationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool encode_rad_error_by_sin = 3;
  if (this->encode_rad_error_by_sin() != 0) {
    total_size += 1 + 1;
  }

  switch (localization_loss_case()) {
    // .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
    case kWeightedL2: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *localization_loss_.weighted_l2_);
      break;
    }
    // .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
    case kWeightedSmoothL1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *localization_loss_.weighted_smooth_l1_);
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.LocalizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.LocalizationLoss)
    MergeFrom(*source);
  }
}

void LocalizationLoss::MergeFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encode_rad_error_by_sin() != 0) {
    set_encode_rad_error_by_sin(from.encode_rad_error_by_sin());
  }
  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::second::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::second::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void LocalizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationLoss::CopyFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationLoss::IsInitialized() const {
  return true;
}

void LocalizationLoss::Swap(LocalizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationLoss::InternalSwap(LocalizationLoss* other) {
  using std::swap;
  swap(encode_rad_error_by_sin_, other->encode_rad_error_by_sin_);
  swap(localization_loss_, other->localization_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationLoss

// .second.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
bool LocalizationLoss::has_weighted_l2() const {
  return localization_loss_case() == kWeightedL2;
}
void LocalizationLoss::set_has_weighted_l2() {
  _oneof_case_[0] = kWeightedL2;
}
void LocalizationLoss::clear_weighted_l2() {
  if (has_weighted_l2()) {
    delete localization_loss_.weighted_l2_;
    clear_has_localization_loss();
  }
}
 const ::second::protos::WeightedL2LocalizationLoss& LocalizationLoss::weighted_l2() const {
  // @@protoc_insertion_point(field_get:second.protos.LocalizationLoss.weighted_l2)
  return has_weighted_l2()
      ? *localization_loss_.weighted_l2_
      : ::second::protos::WeightedL2LocalizationLoss::default_instance();
}
::second::protos::WeightedL2LocalizationLoss* LocalizationLoss::mutable_weighted_l2() {
  if (!has_weighted_l2()) {
    clear_localization_loss();
    set_has_weighted_l2();
    localization_loss_.weighted_l2_ = new ::second::protos::WeightedL2LocalizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.LocalizationLoss.weighted_l2)
  return localization_loss_.weighted_l2_;
}
::second::protos::WeightedL2LocalizationLoss* LocalizationLoss::release_weighted_l2() {
  // @@protoc_insertion_point(field_release:second.protos.LocalizationLoss.weighted_l2)
  if (has_weighted_l2()) {
    clear_has_localization_loss();
    ::second::protos::WeightedL2LocalizationLoss* temp = localization_loss_.weighted_l2_;
    localization_loss_.weighted_l2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalizationLoss::set_allocated_weighted_l2(::second::protos::WeightedL2LocalizationLoss* weighted_l2) {
  clear_localization_loss();
  if (weighted_l2) {
    set_has_weighted_l2();
    localization_loss_.weighted_l2_ = weighted_l2;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LocalizationLoss.weighted_l2)
}

// .second.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
bool LocalizationLoss::has_weighted_smooth_l1() const {
  return localization_loss_case() == kWeightedSmoothL1;
}
void LocalizationLoss::set_has_weighted_smooth_l1() {
  _oneof_case_[0] = kWeightedSmoothL1;
}
void LocalizationLoss::clear_weighted_smooth_l1() {
  if (has_weighted_smooth_l1()) {
    delete localization_loss_.weighted_smooth_l1_;
    clear_has_localization_loss();
  }
}
 const ::second::protos::WeightedSmoothL1LocalizationLoss& LocalizationLoss::weighted_smooth_l1() const {
  // @@protoc_insertion_point(field_get:second.protos.LocalizationLoss.weighted_smooth_l1)
  return has_weighted_smooth_l1()
      ? *localization_loss_.weighted_smooth_l1_
      : ::second::protos::WeightedSmoothL1LocalizationLoss::default_instance();
}
::second::protos::WeightedSmoothL1LocalizationLoss* LocalizationLoss::mutable_weighted_smooth_l1() {
  if (!has_weighted_smooth_l1()) {
    clear_localization_loss();
    set_has_weighted_smooth_l1();
    localization_loss_.weighted_smooth_l1_ = new ::second::protos::WeightedSmoothL1LocalizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.LocalizationLoss.weighted_smooth_l1)
  return localization_loss_.weighted_smooth_l1_;
}
::second::protos::WeightedSmoothL1LocalizationLoss* LocalizationLoss::release_weighted_smooth_l1() {
  // @@protoc_insertion_point(field_release:second.protos.LocalizationLoss.weighted_smooth_l1)
  if (has_weighted_smooth_l1()) {
    clear_has_localization_loss();
    ::second::protos::WeightedSmoothL1LocalizationLoss* temp = localization_loss_.weighted_smooth_l1_;
    localization_loss_.weighted_smooth_l1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalizationLoss::set_allocated_weighted_smooth_l1(::second::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1) {
  clear_localization_loss();
  if (weighted_smooth_l1) {
    set_has_weighted_smooth_l1();
    localization_loss_.weighted_smooth_l1_ = weighted_smooth_l1;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.LocalizationLoss.weighted_smooth_l1)
}

// bool encode_rad_error_by_sin = 3;
void LocalizationLoss::clear_encode_rad_error_by_sin() {
  encode_rad_error_by_sin_ = false;
}
bool LocalizationLoss::encode_rad_error_by_sin() const {
  // @@protoc_insertion_point(field_get:second.protos.LocalizationLoss.encode_rad_error_by_sin)
  return encode_rad_error_by_sin_;
}
void LocalizationLoss::set_encode_rad_error_by_sin(bool value) {
  
  encode_rad_error_by_sin_ = value;
  // @@protoc_insertion_point(field_set:second.protos.LocalizationLoss.encode_rad_error_by_sin)
}

bool LocalizationLoss::has_localization_loss() const {
  return localization_loss_case() != LOCALIZATION_LOSS_NOT_SET;
}
void LocalizationLoss::clear_has_localization_loss() {
  _oneof_case_[0] = LOCALIZATION_LOSS_NOT_SET;
}
LocalizationLoss::LocalizationLossCase LocalizationLoss::localization_loss_case() const {
  return LocalizationLoss::LocalizationLossCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedL2LocalizationLoss::kAnchorwiseOutputFieldNumber;
const int WeightedL2LocalizationLoss::kCodeWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedL2LocalizationLoss::WeightedL2LocalizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedL2LocalizationLoss)
}
WeightedL2LocalizationLoss::WeightedL2LocalizationLoss(const WeightedL2LocalizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      code_weight_(from.code_weight_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedL2LocalizationLoss)
}

void WeightedL2LocalizationLoss::SharedCtor() {
  anchorwise_output_ = false;
  _cached_size_ = 0;
}

WeightedL2LocalizationLoss::~WeightedL2LocalizationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedL2LocalizationLoss)
  SharedDtor();
}

void WeightedL2LocalizationLoss::SharedDtor() {
}

void WeightedL2LocalizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedL2LocalizationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedL2LocalizationLoss& WeightedL2LocalizationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedL2LocalizationLoss* WeightedL2LocalizationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedL2LocalizationLoss* n = new WeightedL2LocalizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedL2LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedL2LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_weight_.Clear();
  anchorwise_output_ = false;
  _internal_metadata_.Clear();
}

bool WeightedL2LocalizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedL2LocalizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float code_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_code_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_code_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedL2LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedL2LocalizationLoss)
  return false;
#undef DO_
}

void WeightedL2LocalizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedL2LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // repeated float code_weight = 2;
  if (this->code_weight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _code_weight_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->code_weight().data(), this->code_weight_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedL2LocalizationLoss)
}

::google::protobuf::uint8* WeightedL2LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedL2LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // repeated float code_weight = 2;
  if (this->code_weight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _code_weight_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->code_weight_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedL2LocalizationLoss)
  return target;
}

size_t WeightedL2LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedL2LocalizationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float code_weight = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->code_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _code_weight_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedL2LocalizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedL2LocalizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedL2LocalizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedL2LocalizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedL2LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedL2LocalizationLoss::MergeFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  code_weight_.MergeFrom(from.code_weight_);
  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedL2LocalizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedL2LocalizationLoss::CopyFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedL2LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedL2LocalizationLoss::Swap(WeightedL2LocalizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedL2LocalizationLoss::InternalSwap(WeightedL2LocalizationLoss* other) {
  using std::swap;
  code_weight_.InternalSwap(&other->code_weight_);
  swap(anchorwise_output_, other->anchorwise_output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedL2LocalizationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedL2LocalizationLoss

// bool anchorwise_output = 1;
void WeightedL2LocalizationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
}
bool WeightedL2LocalizationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedL2LocalizationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedL2LocalizationLoss::set_anchorwise_output(bool value) {
  
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:second.protos.WeightedL2LocalizationLoss.anchorwise_output)
}

// repeated float code_weight = 2;
int WeightedL2LocalizationLoss::code_weight_size() const {
  return code_weight_.size();
}
void WeightedL2LocalizationLoss::clear_code_weight() {
  code_weight_.Clear();
}
float WeightedL2LocalizationLoss::code_weight(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedL2LocalizationLoss.code_weight)
  return code_weight_.Get(index);
}
void WeightedL2LocalizationLoss::set_code_weight(int index, float value) {
  code_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.WeightedL2LocalizationLoss.code_weight)
}
void WeightedL2LocalizationLoss::add_code_weight(float value) {
  code_weight_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.WeightedL2LocalizationLoss.code_weight)
}
const ::google::protobuf::RepeatedField< float >&
WeightedL2LocalizationLoss::code_weight() const {
  // @@protoc_insertion_point(field_list:second.protos.WeightedL2LocalizationLoss.code_weight)
  return code_weight_;
}
::google::protobuf::RepeatedField< float >*
WeightedL2LocalizationLoss::mutable_code_weight() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.WeightedL2LocalizationLoss.code_weight)
  return &code_weight_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSmoothL1LocalizationLoss::kAnchorwiseOutputFieldNumber;
const int WeightedSmoothL1LocalizationLoss::kSigmaFieldNumber;
const int WeightedSmoothL1LocalizationLoss::kCodeWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedSmoothL1LocalizationLoss)
}
WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss(const WeightedSmoothL1LocalizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      code_weight_(from.code_weight_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedSmoothL1LocalizationLoss)
}

void WeightedSmoothL1LocalizationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(sigma_));
  _cached_size_ = 0;
}

WeightedSmoothL1LocalizationLoss::~WeightedSmoothL1LocalizationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedSmoothL1LocalizationLoss)
  SharedDtor();
}

void WeightedSmoothL1LocalizationLoss::SharedDtor() {
}

void WeightedSmoothL1LocalizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSmoothL1LocalizationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedSmoothL1LocalizationLoss& WeightedSmoothL1LocalizationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedSmoothL1LocalizationLoss* WeightedSmoothL1LocalizationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedSmoothL1LocalizationLoss* n = new WeightedSmoothL1LocalizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSmoothL1LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedSmoothL1LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_weight_.Clear();
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

bool WeightedSmoothL1LocalizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedSmoothL1LocalizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float code_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_code_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_code_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedSmoothL1LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedSmoothL1LocalizationLoss)
  return false;
#undef DO_
}

void WeightedSmoothL1LocalizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedSmoothL1LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float sigma = 2;
  if (this->sigma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sigma(), output);
  }

  // repeated float code_weight = 3;
  if (this->code_weight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _code_weight_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->code_weight().data(), this->code_weight_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedSmoothL1LocalizationLoss)
}

::google::protobuf::uint8* WeightedSmoothL1LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedSmoothL1LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float sigma = 2;
  if (this->sigma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sigma(), target);
  }

  // repeated float code_weight = 3;
  if (this->code_weight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _code_weight_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->code_weight_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedSmoothL1LocalizationLoss)
  return target;
}

size_t WeightedSmoothL1LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedSmoothL1LocalizationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float code_weight = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->code_weight_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _code_weight_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float sigma = 2;
  if (this->sigma() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSmoothL1LocalizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSmoothL1LocalizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedSmoothL1LocalizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedSmoothL1LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  code_weight_.MergeFrom(from.code_weight_);
  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (from.sigma() != 0) {
    set_sigma(from.sigma());
  }
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSmoothL1LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedSmoothL1LocalizationLoss::Swap(WeightedSmoothL1LocalizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSmoothL1LocalizationLoss::InternalSwap(WeightedSmoothL1LocalizationLoss* other) {
  using std::swap;
  code_weight_.InternalSwap(&other->code_weight_);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(sigma_, other->sigma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSmoothL1LocalizationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSmoothL1LocalizationLoss

// bool anchorwise_output = 1;
void WeightedSmoothL1LocalizationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
}
bool WeightedSmoothL1LocalizationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedSmoothL1LocalizationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedSmoothL1LocalizationLoss::set_anchorwise_output(bool value) {
  
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:second.protos.WeightedSmoothL1LocalizationLoss.anchorwise_output)
}

// float sigma = 2;
void WeightedSmoothL1LocalizationLoss::clear_sigma() {
  sigma_ = 0;
}
float WeightedSmoothL1LocalizationLoss::sigma() const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedSmoothL1LocalizationLoss.sigma)
  return sigma_;
}
void WeightedSmoothL1LocalizationLoss::set_sigma(float value) {
  
  sigma_ = value;
  // @@protoc_insertion_point(field_set:second.protos.WeightedSmoothL1LocalizationLoss.sigma)
}

// repeated float code_weight = 3;
int WeightedSmoothL1LocalizationLoss::code_weight_size() const {
  return code_weight_.size();
}
void WeightedSmoothL1LocalizationLoss::clear_code_weight() {
  code_weight_.Clear();
}
float WeightedSmoothL1LocalizationLoss::code_weight(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedSmoothL1LocalizationLoss.code_weight)
  return code_weight_.Get(index);
}
void WeightedSmoothL1LocalizationLoss::set_code_weight(int index, float value) {
  code_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.WeightedSmoothL1LocalizationLoss.code_weight)
}
void WeightedSmoothL1LocalizationLoss::add_code_weight(float value) {
  code_weight_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.WeightedSmoothL1LocalizationLoss.code_weight)
}
const ::google::protobuf::RepeatedField< float >&
WeightedSmoothL1LocalizationLoss::code_weight() const {
  // @@protoc_insertion_point(field_list:second.protos.WeightedSmoothL1LocalizationLoss.code_weight)
  return code_weight_;
}
::google::protobuf::RepeatedField< float >*
WeightedSmoothL1LocalizationLoss::mutable_code_weight() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.WeightedSmoothL1LocalizationLoss.code_weight)
  return &code_weight_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassificationLoss::kWeightedSigmoidFieldNumber;
const int ClassificationLoss::kWeightedSoftmaxFieldNumber;
const int ClassificationLoss::kBootstrappedSigmoidFieldNumber;
const int ClassificationLoss::kWeightedSigmoidFocalFieldNumber;
const int ClassificationLoss::kWeightedSoftmaxFocalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassificationLoss::ClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.ClassificationLoss)
}
ClassificationLoss::ClassificationLoss(const ClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_classification_loss();
  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::second::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::second::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::second::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::second::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case kWeightedSoftmaxFocal: {
      mutable_weighted_softmax_focal()->::second::protos::SoftmaxFocalClassificationLoss::MergeFrom(from.weighted_softmax_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.ClassificationLoss)
}

void ClassificationLoss::SharedCtor() {
  clear_has_classification_loss();
  _cached_size_ = 0;
}

ClassificationLoss::~ClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.ClassificationLoss)
  SharedDtor();
}

void ClassificationLoss::SharedDtor() {
  if (has_classification_loss()) {
    clear_classification_loss();
  }
}

void ClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassificationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClassificationLoss& ClassificationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClassificationLoss* ClassificationLoss::New(::google::protobuf::Arena* arena) const {
  ClassificationLoss* n = new ClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClassificationLoss::clear_classification_loss() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.ClassificationLoss)
  switch (classification_loss_case()) {
    case kWeightedSigmoid: {
      delete classification_loss_.weighted_sigmoid_;
      break;
    }
    case kWeightedSoftmax: {
      delete classification_loss_.weighted_softmax_;
      break;
    }
    case kBootstrappedSigmoid: {
      delete classification_loss_.bootstrapped_sigmoid_;
      break;
    }
    case kWeightedSigmoidFocal: {
      delete classification_loss_.weighted_sigmoid_focal_;
      break;
    }
    case kWeightedSoftmaxFocal: {
      delete classification_loss_.weighted_softmax_focal_;
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLASSIFICATION_LOSS_NOT_SET;
}


void ClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.ClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_classification_loss();
  _internal_metadata_.Clear();
}

bool ClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.ClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bootstrapped_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_sigmoid_focal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_softmax_focal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.ClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.ClassificationLoss)
  return false;
#undef DO_
}

void ClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.ClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
  if (has_weighted_sigmoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *classification_loss_.weighted_sigmoid_, output);
  }

  // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
  if (has_weighted_softmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *classification_loss_.weighted_softmax_, output);
  }

  // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
  if (has_bootstrapped_sigmoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *classification_loss_.bootstrapped_sigmoid_, output);
  }

  // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
  if (has_weighted_sigmoid_focal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *classification_loss_.weighted_sigmoid_focal_, output);
  }

  // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
  if (has_weighted_softmax_focal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *classification_loss_.weighted_softmax_focal_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.ClassificationLoss)
}

::google::protobuf::uint8* ClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.ClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
  if (has_weighted_sigmoid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *classification_loss_.weighted_sigmoid_, deterministic, target);
  }

  // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
  if (has_weighted_softmax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *classification_loss_.weighted_softmax_, deterministic, target);
  }

  // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
  if (has_bootstrapped_sigmoid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *classification_loss_.bootstrapped_sigmoid_, deterministic, target);
  }

  // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
  if (has_weighted_sigmoid_focal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *classification_loss_.weighted_sigmoid_focal_, deterministic, target);
  }

  // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
  if (has_weighted_softmax_focal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *classification_loss_.weighted_softmax_focal_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.ClassificationLoss)
  return target;
}

size_t ClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.ClassificationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (classification_loss_case()) {
    // .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
    case kWeightedSigmoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_sigmoid_);
      break;
    }
    // .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
    case kWeightedSoftmax: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_softmax_);
      break;
    }
    // .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
    case kBootstrappedSigmoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.bootstrapped_sigmoid_);
      break;
    }
    // .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
    case kWeightedSigmoidFocal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_sigmoid_focal_);
      break;
    }
    // .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
    case kWeightedSoftmaxFocal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_softmax_focal_);
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.ClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.ClassificationLoss)
    MergeFrom(*source);
  }
}

void ClassificationLoss::MergeFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::second::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::second::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::second::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::second::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case kWeightedSoftmaxFocal: {
      mutable_weighted_softmax_focal()->::second::protos::SoftmaxFocalClassificationLoss::MergeFrom(from.weighted_softmax_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void ClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationLoss::CopyFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationLoss::IsInitialized() const {
  return true;
}

void ClassificationLoss::Swap(ClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClassificationLoss::InternalSwap(ClassificationLoss* other) {
  using std::swap;
  swap(classification_loss_, other->classification_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassificationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassificationLoss

// .second.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
bool ClassificationLoss::has_weighted_sigmoid() const {
  return classification_loss_case() == kWeightedSigmoid;
}
void ClassificationLoss::set_has_weighted_sigmoid() {
  _oneof_case_[0] = kWeightedSigmoid;
}
void ClassificationLoss::clear_weighted_sigmoid() {
  if (has_weighted_sigmoid()) {
    delete classification_loss_.weighted_sigmoid_;
    clear_has_classification_loss();
  }
}
 const ::second::protos::WeightedSigmoidClassificationLoss& ClassificationLoss::weighted_sigmoid() const {
  // @@protoc_insertion_point(field_get:second.protos.ClassificationLoss.weighted_sigmoid)
  return has_weighted_sigmoid()
      ? *classification_loss_.weighted_sigmoid_
      : ::second::protos::WeightedSigmoidClassificationLoss::default_instance();
}
::second::protos::WeightedSigmoidClassificationLoss* ClassificationLoss::mutable_weighted_sigmoid() {
  if (!has_weighted_sigmoid()) {
    clear_classification_loss();
    set_has_weighted_sigmoid();
    classification_loss_.weighted_sigmoid_ = new ::second::protos::WeightedSigmoidClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.ClassificationLoss.weighted_sigmoid)
  return classification_loss_.weighted_sigmoid_;
}
::second::protos::WeightedSigmoidClassificationLoss* ClassificationLoss::release_weighted_sigmoid() {
  // @@protoc_insertion_point(field_release:second.protos.ClassificationLoss.weighted_sigmoid)
  if (has_weighted_sigmoid()) {
    clear_has_classification_loss();
    ::second::protos::WeightedSigmoidClassificationLoss* temp = classification_loss_.weighted_sigmoid_;
    classification_loss_.weighted_sigmoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_sigmoid(::second::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid) {
  clear_classification_loss();
  if (weighted_sigmoid) {
    set_has_weighted_sigmoid();
    classification_loss_.weighted_sigmoid_ = weighted_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_sigmoid)
}

// .second.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
bool ClassificationLoss::has_weighted_softmax() const {
  return classification_loss_case() == kWeightedSoftmax;
}
void ClassificationLoss::set_has_weighted_softmax() {
  _oneof_case_[0] = kWeightedSoftmax;
}
void ClassificationLoss::clear_weighted_softmax() {
  if (has_weighted_softmax()) {
    delete classification_loss_.weighted_softmax_;
    clear_has_classification_loss();
  }
}
 const ::second::protos::WeightedSoftmaxClassificationLoss& ClassificationLoss::weighted_softmax() const {
  // @@protoc_insertion_point(field_get:second.protos.ClassificationLoss.weighted_softmax)
  return has_weighted_softmax()
      ? *classification_loss_.weighted_softmax_
      : ::second::protos::WeightedSoftmaxClassificationLoss::default_instance();
}
::second::protos::WeightedSoftmaxClassificationLoss* ClassificationLoss::mutable_weighted_softmax() {
  if (!has_weighted_softmax()) {
    clear_classification_loss();
    set_has_weighted_softmax();
    classification_loss_.weighted_softmax_ = new ::second::protos::WeightedSoftmaxClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.ClassificationLoss.weighted_softmax)
  return classification_loss_.weighted_softmax_;
}
::second::protos::WeightedSoftmaxClassificationLoss* ClassificationLoss::release_weighted_softmax() {
  // @@protoc_insertion_point(field_release:second.protos.ClassificationLoss.weighted_softmax)
  if (has_weighted_softmax()) {
    clear_has_classification_loss();
    ::second::protos::WeightedSoftmaxClassificationLoss* temp = classification_loss_.weighted_softmax_;
    classification_loss_.weighted_softmax_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_softmax(::second::protos::WeightedSoftmaxClassificationLoss* weighted_softmax) {
  clear_classification_loss();
  if (weighted_softmax) {
    set_has_weighted_softmax();
    classification_loss_.weighted_softmax_ = weighted_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_softmax)
}

// .second.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
bool ClassificationLoss::has_bootstrapped_sigmoid() const {
  return classification_loss_case() == kBootstrappedSigmoid;
}
void ClassificationLoss::set_has_bootstrapped_sigmoid() {
  _oneof_case_[0] = kBootstrappedSigmoid;
}
void ClassificationLoss::clear_bootstrapped_sigmoid() {
  if (has_bootstrapped_sigmoid()) {
    delete classification_loss_.bootstrapped_sigmoid_;
    clear_has_classification_loss();
  }
}
 const ::second::protos::BootstrappedSigmoidClassificationLoss& ClassificationLoss::bootstrapped_sigmoid() const {
  // @@protoc_insertion_point(field_get:second.protos.ClassificationLoss.bootstrapped_sigmoid)
  return has_bootstrapped_sigmoid()
      ? *classification_loss_.bootstrapped_sigmoid_
      : ::second::protos::BootstrappedSigmoidClassificationLoss::default_instance();
}
::second::protos::BootstrappedSigmoidClassificationLoss* ClassificationLoss::mutable_bootstrapped_sigmoid() {
  if (!has_bootstrapped_sigmoid()) {
    clear_classification_loss();
    set_has_bootstrapped_sigmoid();
    classification_loss_.bootstrapped_sigmoid_ = new ::second::protos::BootstrappedSigmoidClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.ClassificationLoss.bootstrapped_sigmoid)
  return classification_loss_.bootstrapped_sigmoid_;
}
::second::protos::BootstrappedSigmoidClassificationLoss* ClassificationLoss::release_bootstrapped_sigmoid() {
  // @@protoc_insertion_point(field_release:second.protos.ClassificationLoss.bootstrapped_sigmoid)
  if (has_bootstrapped_sigmoid()) {
    clear_has_classification_loss();
    ::second::protos::BootstrappedSigmoidClassificationLoss* temp = classification_loss_.bootstrapped_sigmoid_;
    classification_loss_.bootstrapped_sigmoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_bootstrapped_sigmoid(::second::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid) {
  clear_classification_loss();
  if (bootstrapped_sigmoid) {
    set_has_bootstrapped_sigmoid();
    classification_loss_.bootstrapped_sigmoid_ = bootstrapped_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.bootstrapped_sigmoid)
}

// .second.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
bool ClassificationLoss::has_weighted_sigmoid_focal() const {
  return classification_loss_case() == kWeightedSigmoidFocal;
}
void ClassificationLoss::set_has_weighted_sigmoid_focal() {
  _oneof_case_[0] = kWeightedSigmoidFocal;
}
void ClassificationLoss::clear_weighted_sigmoid_focal() {
  if (has_weighted_sigmoid_focal()) {
    delete classification_loss_.weighted_sigmoid_focal_;
    clear_has_classification_loss();
  }
}
 const ::second::protos::SigmoidFocalClassificationLoss& ClassificationLoss::weighted_sigmoid_focal() const {
  // @@protoc_insertion_point(field_get:second.protos.ClassificationLoss.weighted_sigmoid_focal)
  return has_weighted_sigmoid_focal()
      ? *classification_loss_.weighted_sigmoid_focal_
      : ::second::protos::SigmoidFocalClassificationLoss::default_instance();
}
::second::protos::SigmoidFocalClassificationLoss* ClassificationLoss::mutable_weighted_sigmoid_focal() {
  if (!has_weighted_sigmoid_focal()) {
    clear_classification_loss();
    set_has_weighted_sigmoid_focal();
    classification_loss_.weighted_sigmoid_focal_ = new ::second::protos::SigmoidFocalClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.ClassificationLoss.weighted_sigmoid_focal)
  return classification_loss_.weighted_sigmoid_focal_;
}
::second::protos::SigmoidFocalClassificationLoss* ClassificationLoss::release_weighted_sigmoid_focal() {
  // @@protoc_insertion_point(field_release:second.protos.ClassificationLoss.weighted_sigmoid_focal)
  if (has_weighted_sigmoid_focal()) {
    clear_has_classification_loss();
    ::second::protos::SigmoidFocalClassificationLoss* temp = classification_loss_.weighted_sigmoid_focal_;
    classification_loss_.weighted_sigmoid_focal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_sigmoid_focal(::second::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal) {
  clear_classification_loss();
  if (weighted_sigmoid_focal) {
    set_has_weighted_sigmoid_focal();
    classification_loss_.weighted_sigmoid_focal_ = weighted_sigmoid_focal;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_sigmoid_focal)
}

// .second.protos.SoftmaxFocalClassificationLoss weighted_softmax_focal = 5;
bool ClassificationLoss::has_weighted_softmax_focal() const {
  return classification_loss_case() == kWeightedSoftmaxFocal;
}
void ClassificationLoss::set_has_weighted_softmax_focal() {
  _oneof_case_[0] = kWeightedSoftmaxFocal;
}
void ClassificationLoss::clear_weighted_softmax_focal() {
  if (has_weighted_softmax_focal()) {
    delete classification_loss_.weighted_softmax_focal_;
    clear_has_classification_loss();
  }
}
 const ::second::protos::SoftmaxFocalClassificationLoss& ClassificationLoss::weighted_softmax_focal() const {
  // @@protoc_insertion_point(field_get:second.protos.ClassificationLoss.weighted_softmax_focal)
  return has_weighted_softmax_focal()
      ? *classification_loss_.weighted_softmax_focal_
      : ::second::protos::SoftmaxFocalClassificationLoss::default_instance();
}
::second::protos::SoftmaxFocalClassificationLoss* ClassificationLoss::mutable_weighted_softmax_focal() {
  if (!has_weighted_softmax_focal()) {
    clear_classification_loss();
    set_has_weighted_softmax_focal();
    classification_loss_.weighted_softmax_focal_ = new ::second::protos::SoftmaxFocalClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.ClassificationLoss.weighted_softmax_focal)
  return classification_loss_.weighted_softmax_focal_;
}
::second::protos::SoftmaxFocalClassificationLoss* ClassificationLoss::release_weighted_softmax_focal() {
  // @@protoc_insertion_point(field_release:second.protos.ClassificationLoss.weighted_softmax_focal)
  if (has_weighted_softmax_focal()) {
    clear_has_classification_loss();
    ::second::protos::SoftmaxFocalClassificationLoss* temp = classification_loss_.weighted_softmax_focal_;
    classification_loss_.weighted_softmax_focal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_softmax_focal(::second::protos::SoftmaxFocalClassificationLoss* weighted_softmax_focal) {
  clear_classification_loss();
  if (weighted_softmax_focal) {
    set_has_weighted_softmax_focal();
    classification_loss_.weighted_softmax_focal_ = weighted_softmax_focal;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.ClassificationLoss.weighted_softmax_focal)
}

bool ClassificationLoss::has_classification_loss() const {
  return classification_loss_case() != CLASSIFICATION_LOSS_NOT_SET;
}
void ClassificationLoss::clear_has_classification_loss() {
  _oneof_case_[0] = CLASSIFICATION_LOSS_NOT_SET;
}
ClassificationLoss::ClassificationLossCase ClassificationLoss::classification_loss_case() const {
  return ClassificationLoss::ClassificationLossCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSigmoidClassificationLoss::kAnchorwiseOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedSigmoidClassificationLoss)
}
WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss(const WeightedSigmoidClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedSigmoidClassificationLoss)
}

void WeightedSigmoidClassificationLoss::SharedCtor() {
  anchorwise_output_ = false;
  _cached_size_ = 0;
}

WeightedSigmoidClassificationLoss::~WeightedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedSigmoidClassificationLoss)
  SharedDtor();
}

void WeightedSigmoidClassificationLoss::SharedDtor() {
}

void WeightedSigmoidClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSigmoidClassificationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedSigmoidClassificationLoss& WeightedSigmoidClassificationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedSigmoidClassificationLoss* WeightedSigmoidClassificationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedSigmoidClassificationLoss* n = new WeightedSigmoidClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorwise_output_ = false;
  _internal_metadata_.Clear();
}

bool WeightedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedSigmoidClassificationLoss)
  return false;
#undef DO_
}

void WeightedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedSigmoidClassificationLoss)
}

::google::protobuf::uint8* WeightedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedSigmoidClassificationLoss)
  return target;
}

size_t WeightedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedSigmoidClassificationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSigmoidClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSigmoidClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSigmoidClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedSigmoidClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSigmoidClassificationLoss::MergeFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedSigmoidClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSigmoidClassificationLoss::CopyFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSigmoidClassificationLoss::Swap(WeightedSigmoidClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSigmoidClassificationLoss::InternalSwap(WeightedSigmoidClassificationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSigmoidClassificationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSigmoidClassificationLoss

// bool anchorwise_output = 1;
void WeightedSigmoidClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
}
bool WeightedSigmoidClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedSigmoidClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedSigmoidClassificationLoss::set_anchorwise_output(bool value) {
  
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:second.protos.WeightedSigmoidClassificationLoss.anchorwise_output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidFocalClassificationLoss::kAnchorwiseOutputFieldNumber;
const int SigmoidFocalClassificationLoss::kGammaFieldNumber;
const int SigmoidFocalClassificationLoss::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.SigmoidFocalClassificationLoss)
}
SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss(const SigmoidFocalClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:second.protos.SigmoidFocalClassificationLoss)
}

void SigmoidFocalClassificationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  _cached_size_ = 0;
}

SigmoidFocalClassificationLoss::~SigmoidFocalClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.SigmoidFocalClassificationLoss)
  SharedDtor();
}

void SigmoidFocalClassificationLoss::SharedDtor() {
}

void SigmoidFocalClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidFocalClassificationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SigmoidFocalClassificationLoss& SigmoidFocalClassificationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

SigmoidFocalClassificationLoss* SigmoidFocalClassificationLoss::New(::google::protobuf::Arena* arena) const {
  SigmoidFocalClassificationLoss* n = new SigmoidFocalClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigmoidFocalClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.SigmoidFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  _internal_metadata_.Clear();
}

bool SigmoidFocalClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.SigmoidFocalClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gamma = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float alpha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.SigmoidFocalClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.SigmoidFocalClassificationLoss)
  return false;
#undef DO_
}

void SigmoidFocalClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.SigmoidFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float gamma = 2;
  if (this->gamma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gamma(), output);
  }

  // float alpha = 3;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.SigmoidFocalClassificationLoss)
}

::google::protobuf::uint8* SigmoidFocalClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.SigmoidFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float gamma = 2;
  if (this->gamma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gamma(), target);
  }

  // float alpha = 3;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.SigmoidFocalClassificationLoss)
  return target;
}

size_t SigmoidFocalClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.SigmoidFocalClassificationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float gamma = 2;
  if (this->gamma() != 0) {
    total_size += 1 + 4;
  }

  // float alpha = 3;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidFocalClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidFocalClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SigmoidFocalClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.SigmoidFocalClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.SigmoidFocalClassificationLoss)
    MergeFrom(*source);
  }
}

void SigmoidFocalClassificationLoss::MergeFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (from.gamma() != 0) {
    set_gamma(from.gamma());
  }
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
}

void SigmoidFocalClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidFocalClassificationLoss::CopyFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidFocalClassificationLoss::IsInitialized() const {
  return true;
}

void SigmoidFocalClassificationLoss::Swap(SigmoidFocalClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigmoidFocalClassificationLoss::InternalSwap(SigmoidFocalClassificationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(gamma_, other->gamma_);
  swap(alpha_, other->alpha_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidFocalClassificationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigmoidFocalClassificationLoss

// bool anchorwise_output = 1;
void SigmoidFocalClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
}
bool SigmoidFocalClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:second.protos.SigmoidFocalClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void SigmoidFocalClassificationLoss::set_anchorwise_output(bool value) {
  
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:second.protos.SigmoidFocalClassificationLoss.anchorwise_output)
}

// float gamma = 2;
void SigmoidFocalClassificationLoss::clear_gamma() {
  gamma_ = 0;
}
float SigmoidFocalClassificationLoss::gamma() const {
  // @@protoc_insertion_point(field_get:second.protos.SigmoidFocalClassificationLoss.gamma)
  return gamma_;
}
void SigmoidFocalClassificationLoss::set_gamma(float value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:second.protos.SigmoidFocalClassificationLoss.gamma)
}

// float alpha = 3;
void SigmoidFocalClassificationLoss::clear_alpha() {
  alpha_ = 0;
}
float SigmoidFocalClassificationLoss::alpha() const {
  // @@protoc_insertion_point(field_get:second.protos.SigmoidFocalClassificationLoss.alpha)
  return alpha_;
}
void SigmoidFocalClassificationLoss::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:second.protos.SigmoidFocalClassificationLoss.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxFocalClassificationLoss::kAnchorwiseOutputFieldNumber;
const int SoftmaxFocalClassificationLoss::kGammaFieldNumber;
const int SoftmaxFocalClassificationLoss::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxFocalClassificationLoss::SoftmaxFocalClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.SoftmaxFocalClassificationLoss)
}
SoftmaxFocalClassificationLoss::SoftmaxFocalClassificationLoss(const SoftmaxFocalClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:second.protos.SoftmaxFocalClassificationLoss)
}

void SoftmaxFocalClassificationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  _cached_size_ = 0;
}

SoftmaxFocalClassificationLoss::~SoftmaxFocalClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.SoftmaxFocalClassificationLoss)
  SharedDtor();
}

void SoftmaxFocalClassificationLoss::SharedDtor() {
}

void SoftmaxFocalClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxFocalClassificationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftmaxFocalClassificationLoss& SoftmaxFocalClassificationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftmaxFocalClassificationLoss* SoftmaxFocalClassificationLoss::New(::google::protobuf::Arena* arena) const {
  SoftmaxFocalClassificationLoss* n = new SoftmaxFocalClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxFocalClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.SoftmaxFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  _internal_metadata_.Clear();
}

bool SoftmaxFocalClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.SoftmaxFocalClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gamma = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float alpha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.SoftmaxFocalClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.SoftmaxFocalClassificationLoss)
  return false;
#undef DO_
}

void SoftmaxFocalClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.SoftmaxFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float gamma = 2;
  if (this->gamma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gamma(), output);
  }

  // float alpha = 3;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.SoftmaxFocalClassificationLoss)
}

::google::protobuf::uint8* SoftmaxFocalClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.SoftmaxFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float gamma = 2;
  if (this->gamma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gamma(), target);
  }

  // float alpha = 3;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.SoftmaxFocalClassificationLoss)
  return target;
}

size_t SoftmaxFocalClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.SoftmaxFocalClassificationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float gamma = 2;
  if (this->gamma() != 0) {
    total_size += 1 + 4;
  }

  // float alpha = 3;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxFocalClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.SoftmaxFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxFocalClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxFocalClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.SoftmaxFocalClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.SoftmaxFocalClassificationLoss)
    MergeFrom(*source);
  }
}

void SoftmaxFocalClassificationLoss::MergeFrom(const SoftmaxFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.SoftmaxFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (from.gamma() != 0) {
    set_gamma(from.gamma());
  }
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
}

void SoftmaxFocalClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.SoftmaxFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxFocalClassificationLoss::CopyFrom(const SoftmaxFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.SoftmaxFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxFocalClassificationLoss::IsInitialized() const {
  return true;
}

void SoftmaxFocalClassificationLoss::Swap(SoftmaxFocalClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxFocalClassificationLoss::InternalSwap(SoftmaxFocalClassificationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(gamma_, other->gamma_);
  swap(alpha_, other->alpha_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxFocalClassificationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxFocalClassificationLoss

// bool anchorwise_output = 1;
void SoftmaxFocalClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
}
bool SoftmaxFocalClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:second.protos.SoftmaxFocalClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void SoftmaxFocalClassificationLoss::set_anchorwise_output(bool value) {
  
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:second.protos.SoftmaxFocalClassificationLoss.anchorwise_output)
}

// float gamma = 2;
void SoftmaxFocalClassificationLoss::clear_gamma() {
  gamma_ = 0;
}
float SoftmaxFocalClassificationLoss::gamma() const {
  // @@protoc_insertion_point(field_get:second.protos.SoftmaxFocalClassificationLoss.gamma)
  return gamma_;
}
void SoftmaxFocalClassificationLoss::set_gamma(float value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:second.protos.SoftmaxFocalClassificationLoss.gamma)
}

// float alpha = 3;
void SoftmaxFocalClassificationLoss::clear_alpha() {
  alpha_ = 0;
}
float SoftmaxFocalClassificationLoss::alpha() const {
  // @@protoc_insertion_point(field_get:second.protos.SoftmaxFocalClassificationLoss.alpha)
  return alpha_;
}
void SoftmaxFocalClassificationLoss::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:second.protos.SoftmaxFocalClassificationLoss.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSoftmaxClassificationLoss::kAnchorwiseOutputFieldNumber;
const int WeightedSoftmaxClassificationLoss::kLogitScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.WeightedSoftmaxClassificationLoss)
}
WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss(const WeightedSoftmaxClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:second.protos.WeightedSoftmaxClassificationLoss)
}

void WeightedSoftmaxClassificationLoss::SharedCtor() {
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logit_scale_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  _cached_size_ = 0;
}

WeightedSoftmaxClassificationLoss::~WeightedSoftmaxClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.WeightedSoftmaxClassificationLoss)
  SharedDtor();
}

void WeightedSoftmaxClassificationLoss::SharedDtor() {
}

void WeightedSoftmaxClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSoftmaxClassificationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedSoftmaxClassificationLoss& WeightedSoftmaxClassificationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedSoftmaxClassificationLoss* WeightedSoftmaxClassificationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedSoftmaxClassificationLoss* n = new WeightedSoftmaxClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSoftmaxClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.WeightedSoftmaxClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logit_scale_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  _internal_metadata_.Clear();
}

bool WeightedSoftmaxClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.WeightedSoftmaxClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool anchorwise_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float logit_scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.WeightedSoftmaxClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.WeightedSoftmaxClassificationLoss)
  return false;
#undef DO_
}

void WeightedSoftmaxClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.WeightedSoftmaxClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // float logit_scale = 2;
  if (this->logit_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->logit_scale(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.WeightedSoftmaxClassificationLoss)
}

::google::protobuf::uint8* WeightedSoftmaxClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.WeightedSoftmaxClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // float logit_scale = 2;
  if (this->logit_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->logit_scale(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.WeightedSoftmaxClassificationLoss)
  return target;
}

size_t WeightedSoftmaxClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.WeightedSoftmaxClassificationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool anchorwise_output = 1;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  // float logit_scale = 2;
  if (this->logit_scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSoftmaxClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSoftmaxClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.WeightedSoftmaxClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.WeightedSoftmaxClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
  if (from.logit_scale() != 0) {
    set_logit_scale(from.logit_scale());
  }
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSoftmaxClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSoftmaxClassificationLoss::Swap(WeightedSoftmaxClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSoftmaxClassificationLoss::InternalSwap(WeightedSoftmaxClassificationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(logit_scale_, other->logit_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSoftmaxClassificationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSoftmaxClassificationLoss

// bool anchorwise_output = 1;
void WeightedSoftmaxClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
}
bool WeightedSoftmaxClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedSoftmaxClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedSoftmaxClassificationLoss::set_anchorwise_output(bool value) {
  
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:second.protos.WeightedSoftmaxClassificationLoss.anchorwise_output)
}

// float logit_scale = 2;
void WeightedSoftmaxClassificationLoss::clear_logit_scale() {
  logit_scale_ = 0;
}
float WeightedSoftmaxClassificationLoss::logit_scale() const {
  // @@protoc_insertion_point(field_get:second.protos.WeightedSoftmaxClassificationLoss.logit_scale)
  return logit_scale_;
}
void WeightedSoftmaxClassificationLoss::set_logit_scale(float value) {
  
  logit_scale_ = value;
  // @@protoc_insertion_point(field_set:second.protos.WeightedSoftmaxClassificationLoss.logit_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrappedSigmoidClassificationLoss::kAlphaFieldNumber;
const int BootstrappedSigmoidClassificationLoss::kHardBootstrapFieldNumber;
const int BootstrappedSigmoidClassificationLoss::kAnchorwiseOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.BootstrappedSigmoidClassificationLoss)
}
BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss(const BootstrappedSigmoidClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&anchorwise_output_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  // @@protoc_insertion_point(copy_constructor:second.protos.BootstrappedSigmoidClassificationLoss)
}

void BootstrappedSigmoidClassificationLoss::SharedCtor() {
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchorwise_output_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  _cached_size_ = 0;
}

BootstrappedSigmoidClassificationLoss::~BootstrappedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:second.protos.BootstrappedSigmoidClassificationLoss)
  SharedDtor();
}

void BootstrappedSigmoidClassificationLoss::SharedDtor() {
}

void BootstrappedSigmoidClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrappedSigmoidClassificationLoss::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BootstrappedSigmoidClassificationLoss& BootstrappedSigmoidClassificationLoss::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

BootstrappedSigmoidClassificationLoss* BootstrappedSigmoidClassificationLoss::New(::google::protobuf::Arena* arena) const {
  BootstrappedSigmoidClassificationLoss* n = new BootstrappedSigmoidClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BootstrappedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.BootstrappedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchorwise_output_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  _internal_metadata_.Clear();
}

bool BootstrappedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.BootstrappedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hard_bootstrap = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hard_bootstrap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool anchorwise_output = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.BootstrappedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.BootstrappedSigmoidClassificationLoss)
  return false;
#undef DO_
}

void BootstrappedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.BootstrappedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // bool hard_bootstrap = 2;
  if (this->hard_bootstrap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hard_bootstrap(), output);
  }

  // bool anchorwise_output = 3;
  if (this->anchorwise_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->anchorwise_output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.BootstrappedSigmoidClassificationLoss)
}

::google::protobuf::uint8* BootstrappedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.BootstrappedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // bool hard_bootstrap = 2;
  if (this->hard_bootstrap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hard_bootstrap(), target);
  }

  // bool anchorwise_output = 3;
  if (this->anchorwise_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->anchorwise_output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.BootstrappedSigmoidClassificationLoss)
  return target;
}

size_t BootstrappedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.BootstrappedSigmoidClassificationLoss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // bool hard_bootstrap = 2;
  if (this->hard_bootstrap() != 0) {
    total_size += 1 + 1;
  }

  // bool anchorwise_output = 3;
  if (this->anchorwise_output() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrappedSigmoidClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BootstrappedSigmoidClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.BootstrappedSigmoidClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.BootstrappedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.hard_bootstrap() != 0) {
    set_hard_bootstrap(from.hard_bootstrap());
  }
  if (from.anchorwise_output() != 0) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrappedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void BootstrappedSigmoidClassificationLoss::Swap(BootstrappedSigmoidClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrappedSigmoidClassificationLoss::InternalSwap(BootstrappedSigmoidClassificationLoss* other) {
  using std::swap;
  swap(alpha_, other->alpha_);
  swap(hard_bootstrap_, other->hard_bootstrap_);
  swap(anchorwise_output_, other->anchorwise_output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BootstrappedSigmoidClassificationLoss::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BootstrappedSigmoidClassificationLoss

// float alpha = 1;
void BootstrappedSigmoidClassificationLoss::clear_alpha() {
  alpha_ = 0;
}
float BootstrappedSigmoidClassificationLoss::alpha() const {
  // @@protoc_insertion_point(field_get:second.protos.BootstrappedSigmoidClassificationLoss.alpha)
  return alpha_;
}
void BootstrappedSigmoidClassificationLoss::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:second.protos.BootstrappedSigmoidClassificationLoss.alpha)
}

// bool hard_bootstrap = 2;
void BootstrappedSigmoidClassificationLoss::clear_hard_bootstrap() {
  hard_bootstrap_ = false;
}
bool BootstrappedSigmoidClassificationLoss::hard_bootstrap() const {
  // @@protoc_insertion_point(field_get:second.protos.BootstrappedSigmoidClassificationLoss.hard_bootstrap)
  return hard_bootstrap_;
}
void BootstrappedSigmoidClassificationLoss::set_hard_bootstrap(bool value) {
  
  hard_bootstrap_ = value;
  // @@protoc_insertion_point(field_set:second.protos.BootstrappedSigmoidClassificationLoss.hard_bootstrap)
}

// bool anchorwise_output = 3;
void BootstrappedSigmoidClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
}
bool BootstrappedSigmoidClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:second.protos.BootstrappedSigmoidClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void BootstrappedSigmoidClassificationLoss::set_anchorwise_output(bool value) {
  
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:second.protos.BootstrappedSigmoidClassificationLoss.anchorwise_output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardExampleMiner::kNumHardExamplesFieldNumber;
const int HardExampleMiner::kIouThresholdFieldNumber;
const int HardExampleMiner::kLossTypeFieldNumber;
const int HardExampleMiner::kMaxNegativesPerPositiveFieldNumber;
const int HardExampleMiner::kMinNegativesPerImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardExampleMiner::HardExampleMiner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.HardExampleMiner)
}
HardExampleMiner::HardExampleMiner(const HardExampleMiner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_hard_examples_, &from.num_hard_examples_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_negatives_per_image_) -
    reinterpret_cast<char*>(&num_hard_examples_)) + sizeof(min_negatives_per_image_));
  // @@protoc_insertion_point(copy_constructor:second.protos.HardExampleMiner)
}

void HardExampleMiner::SharedCtor() {
  ::memset(&num_hard_examples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_negatives_per_image_) -
      reinterpret_cast<char*>(&num_hard_examples_)) + sizeof(min_negatives_per_image_));
  _cached_size_ = 0;
}

HardExampleMiner::~HardExampleMiner() {
  // @@protoc_insertion_point(destructor:second.protos.HardExampleMiner)
  SharedDtor();
}

void HardExampleMiner::SharedDtor() {
}

void HardExampleMiner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardExampleMiner::descriptor() {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HardExampleMiner& HardExampleMiner::default_instance() {
  protobuf_second_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

HardExampleMiner* HardExampleMiner::New(::google::protobuf::Arena* arena) const {
  HardExampleMiner* n = new HardExampleMiner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardExampleMiner::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.HardExampleMiner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_hard_examples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_negatives_per_image_) -
      reinterpret_cast<char*>(&num_hard_examples_)) + sizeof(min_negatives_per_image_));
  _internal_metadata_.Clear();
}

bool HardExampleMiner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.HardExampleMiner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_hard_examples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hard_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float iou_threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.HardExampleMiner.LossType loss_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loss_type(static_cast< ::second::protos::HardExampleMiner_LossType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_negatives_per_positive = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_negatives_per_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_negatives_per_image = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_negatives_per_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.HardExampleMiner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.HardExampleMiner)
  return false;
#undef DO_
}

void HardExampleMiner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.HardExampleMiner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_hard_examples = 1;
  if (this->num_hard_examples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hard_examples(), output);
  }

  // float iou_threshold = 2;
  if (this->iou_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->iou_threshold(), output);
  }

  // .second.protos.HardExampleMiner.LossType loss_type = 3;
  if (this->loss_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->loss_type(), output);
  }

  // int32 max_negatives_per_positive = 4;
  if (this->max_negatives_per_positive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_negatives_per_positive(), output);
  }

  // int32 min_negatives_per_image = 5;
  if (this->min_negatives_per_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_negatives_per_image(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.HardExampleMiner)
}

::google::protobuf::uint8* HardExampleMiner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.HardExampleMiner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_hard_examples = 1;
  if (this->num_hard_examples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hard_examples(), target);
  }

  // float iou_threshold = 2;
  if (this->iou_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->iou_threshold(), target);
  }

  // .second.protos.HardExampleMiner.LossType loss_type = 3;
  if (this->loss_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->loss_type(), target);
  }

  // int32 max_negatives_per_positive = 4;
  if (this->max_negatives_per_positive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_negatives_per_positive(), target);
  }

  // int32 min_negatives_per_image = 5;
  if (this->min_negatives_per_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_negatives_per_image(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.HardExampleMiner)
  return target;
}

size_t HardExampleMiner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.HardExampleMiner)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 num_hard_examples = 1;
  if (this->num_hard_examples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_hard_examples());
  }

  // float iou_threshold = 2;
  if (this->iou_threshold() != 0) {
    total_size += 1 + 4;
  }

  // .second.protos.HardExampleMiner.LossType loss_type = 3;
  if (this->loss_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loss_type());
  }

  // int32 max_negatives_per_positive = 4;
  if (this->max_negatives_per_positive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_negatives_per_positive());
  }

  // int32 min_negatives_per_image = 5;
  if (this->min_negatives_per_image() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_negatives_per_image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardExampleMiner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  const HardExampleMiner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HardExampleMiner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.HardExampleMiner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.HardExampleMiner)
    MergeFrom(*source);
  }
}

void HardExampleMiner::MergeFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_hard_examples() != 0) {
    set_num_hard_examples(from.num_hard_examples());
  }
  if (from.iou_threshold() != 0) {
    set_iou_threshold(from.iou_threshold());
  }
  if (from.loss_type() != 0) {
    set_loss_type(from.loss_type());
  }
  if (from.max_negatives_per_positive() != 0) {
    set_max_negatives_per_positive(from.max_negatives_per_positive());
  }
  if (from.min_negatives_per_image() != 0) {
    set_min_negatives_per_image(from.min_negatives_per_image());
  }
}

void HardExampleMiner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardExampleMiner::CopyFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardExampleMiner::IsInitialized() const {
  return true;
}

void HardExampleMiner::Swap(HardExampleMiner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardExampleMiner::InternalSwap(HardExampleMiner* other) {
  using std::swap;
  swap(num_hard_examples_, other->num_hard_examples_);
  swap(iou_threshold_, other->iou_threshold_);
  swap(loss_type_, other->loss_type_);
  swap(max_negatives_per_positive_, other->max_negatives_per_positive_);
  swap(min_negatives_per_image_, other->min_negatives_per_image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardExampleMiner::GetMetadata() const {
  protobuf_second_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardExampleMiner

// int32 num_hard_examples = 1;
void HardExampleMiner::clear_num_hard_examples() {
  num_hard_examples_ = 0;
}
::google::protobuf::int32 HardExampleMiner::num_hard_examples() const {
  // @@protoc_insertion_point(field_get:second.protos.HardExampleMiner.num_hard_examples)
  return num_hard_examples_;
}
void HardExampleMiner::set_num_hard_examples(::google::protobuf::int32 value) {
  
  num_hard_examples_ = value;
  // @@protoc_insertion_point(field_set:second.protos.HardExampleMiner.num_hard_examples)
}

// float iou_threshold = 2;
void HardExampleMiner::clear_iou_threshold() {
  iou_threshold_ = 0;
}
float HardExampleMiner::iou_threshold() const {
  // @@protoc_insertion_point(field_get:second.protos.HardExampleMiner.iou_threshold)
  return iou_threshold_;
}
void HardExampleMiner::set_iou_threshold(float value) {
  
  iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:second.protos.HardExampleMiner.iou_threshold)
}

// .second.protos.HardExampleMiner.LossType loss_type = 3;
void HardExampleMiner::clear_loss_type() {
  loss_type_ = 0;
}
::second::protos::HardExampleMiner_LossType HardExampleMiner::loss_type() const {
  // @@protoc_insertion_point(field_get:second.protos.HardExampleMiner.loss_type)
  return static_cast< ::second::protos::HardExampleMiner_LossType >(loss_type_);
}
void HardExampleMiner::set_loss_type(::second::protos::HardExampleMiner_LossType value) {
  
  loss_type_ = value;
  // @@protoc_insertion_point(field_set:second.protos.HardExampleMiner.loss_type)
}

// int32 max_negatives_per_positive = 4;
void HardExampleMiner::clear_max_negatives_per_positive() {
  max_negatives_per_positive_ = 0;
}
::google::protobuf::int32 HardExampleMiner::max_negatives_per_positive() const {
  // @@protoc_insertion_point(field_get:second.protos.HardExampleMiner.max_negatives_per_positive)
  return max_negatives_per_positive_;
}
void HardExampleMiner::set_max_negatives_per_positive(::google::protobuf::int32 value) {
  
  max_negatives_per_positive_ = value;
  // @@protoc_insertion_point(field_set:second.protos.HardExampleMiner.max_negatives_per_positive)
}

// int32 min_negatives_per_image = 5;
void HardExampleMiner::clear_min_negatives_per_image() {
  min_negatives_per_image_ = 0;
}
::google::protobuf::int32 HardExampleMiner::min_negatives_per_image() const {
  // @@protoc_insertion_point(field_get:second.protos.HardExampleMiner.min_negatives_per_image)
  return min_negatives_per_image_;
}
void HardExampleMiner::set_min_negatives_per_image(::google::protobuf::int32 value) {
  
  min_negatives_per_image_ = value;
  // @@protoc_insertion_point(field_set:second.protos.HardExampleMiner.min_negatives_per_image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)
