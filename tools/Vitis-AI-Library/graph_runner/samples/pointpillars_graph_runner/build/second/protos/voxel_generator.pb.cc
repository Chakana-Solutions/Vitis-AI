// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/voxel_generator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "second/protos/voxel_generator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace second {
namespace protos {
class VoxelGeneratorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VoxelGenerator>
     _instance;
} _VoxelGenerator_default_instance_;

namespace protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelGenerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelGenerator, voxel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelGenerator, point_cloud_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelGenerator, max_number_of_points_per_voxel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelGenerator, submanifold_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelGenerator, submanifold_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelGenerator, submanifold_max_points_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(VoxelGenerator)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoxelGenerator_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "second/protos/voxel_generator.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VoxelGenerator_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VoxelGenerator_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#second/protos/voxel_generator.proto\022\rs"
      "econd.protos\"\274\001\n\016VoxelGenerator\022\022\n\nvoxel"
      "_size\030\001 \003(\002\022\031\n\021point_cloud_range\030\002 \003(\002\022&"
      "\n\036max_number_of_points_per_voxel\030\003 \001(\r\022\031"
      "\n\021submanifold_group\030\004 \001(\010\022\030\n\020submanifold"
      "_size\030\005 \003(\r\022\036\n\026submanifold_max_points\030\006 "
      "\001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "second/protos/voxel_generator.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoxelGenerator::kVoxelSizeFieldNumber;
const int VoxelGenerator::kPointCloudRangeFieldNumber;
const int VoxelGenerator::kMaxNumberOfPointsPerVoxelFieldNumber;
const int VoxelGenerator::kSubmanifoldGroupFieldNumber;
const int VoxelGenerator::kSubmanifoldSizeFieldNumber;
const int VoxelGenerator::kSubmanifoldMaxPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoxelGenerator::VoxelGenerator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.VoxelGenerator)
}
VoxelGenerator::VoxelGenerator(const VoxelGenerator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      voxel_size_(from.voxel_size_),
      point_cloud_range_(from.point_cloud_range_),
      submanifold_size_(from.submanifold_size_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_number_of_points_per_voxel_, &from.max_number_of_points_per_voxel_,
    static_cast<size_t>(reinterpret_cast<char*>(&submanifold_max_points_) -
    reinterpret_cast<char*>(&max_number_of_points_per_voxel_)) + sizeof(submanifold_max_points_));
  // @@protoc_insertion_point(copy_constructor:second.protos.VoxelGenerator)
}

void VoxelGenerator::SharedCtor() {
  ::memset(&max_number_of_points_per_voxel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submanifold_max_points_) -
      reinterpret_cast<char*>(&max_number_of_points_per_voxel_)) + sizeof(submanifold_max_points_));
  _cached_size_ = 0;
}

VoxelGenerator::~VoxelGenerator() {
  // @@protoc_insertion_point(destructor:second.protos.VoxelGenerator)
  SharedDtor();
}

void VoxelGenerator::SharedDtor() {
}

void VoxelGenerator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoxelGenerator::descriptor() {
  protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoxelGenerator& VoxelGenerator::default_instance() {
  protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoxelGenerator* VoxelGenerator::New(::google::protobuf::Arena* arena) const {
  VoxelGenerator* n = new VoxelGenerator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoxelGenerator::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.VoxelGenerator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voxel_size_.Clear();
  point_cloud_range_.Clear();
  submanifold_size_.Clear();
  ::memset(&max_number_of_points_per_voxel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submanifold_max_points_) -
      reinterpret_cast<char*>(&max_number_of_points_per_voxel_)) + sizeof(submanifold_max_points_));
  _internal_metadata_.Clear();
}

bool VoxelGenerator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.VoxelGenerator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float voxel_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_voxel_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_voxel_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float point_cloud_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_point_cloud_range())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_point_cloud_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_number_of_points_per_voxel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_points_per_voxel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool submanifold_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &submanifold_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 submanifold_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_submanifold_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_submanifold_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 submanifold_max_points = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submanifold_max_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.VoxelGenerator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.VoxelGenerator)
  return false;
#undef DO_
}

void VoxelGenerator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.VoxelGenerator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float voxel_size = 1;
  if (this->voxel_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _voxel_size_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->voxel_size().data(), this->voxel_size_size(), output);
  }

  // repeated float point_cloud_range = 2;
  if (this->point_cloud_range_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _point_cloud_range_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->point_cloud_range().data(), this->point_cloud_range_size(), output);
  }

  // uint32 max_number_of_points_per_voxel = 3;
  if (this->max_number_of_points_per_voxel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_number_of_points_per_voxel(), output);
  }

  // bool submanifold_group = 4;
  if (this->submanifold_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->submanifold_group(), output);
  }

  // repeated uint32 submanifold_size = 5;
  if (this->submanifold_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _submanifold_size_cached_byte_size_));
  }
  for (int i = 0, n = this->submanifold_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->submanifold_size(i), output);
  }

  // uint32 submanifold_max_points = 6;
  if (this->submanifold_max_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->submanifold_max_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.VoxelGenerator)
}

::google::protobuf::uint8* VoxelGenerator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.VoxelGenerator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float voxel_size = 1;
  if (this->voxel_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _voxel_size_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->voxel_size_, target);
  }

  // repeated float point_cloud_range = 2;
  if (this->point_cloud_range_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _point_cloud_range_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->point_cloud_range_, target);
  }

  // uint32 max_number_of_points_per_voxel = 3;
  if (this->max_number_of_points_per_voxel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_number_of_points_per_voxel(), target);
  }

  // bool submanifold_group = 4;
  if (this->submanifold_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->submanifold_group(), target);
  }

  // repeated uint32 submanifold_size = 5;
  if (this->submanifold_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _submanifold_size_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->submanifold_size_, target);
  }

  // uint32 submanifold_max_points = 6;
  if (this->submanifold_max_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->submanifold_max_points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.VoxelGenerator)
  return target;
}

size_t VoxelGenerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.VoxelGenerator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float voxel_size = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->voxel_size_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _voxel_size_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float point_cloud_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->point_cloud_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_cloud_range_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 submanifold_size = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->submanifold_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _submanifold_size_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 max_number_of_points_per_voxel = 3;
  if (this->max_number_of_points_per_voxel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_number_of_points_per_voxel());
  }

  // bool submanifold_group = 4;
  if (this->submanifold_group() != 0) {
    total_size += 1 + 1;
  }

  // uint32 submanifold_max_points = 6;
  if (this->submanifold_max_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->submanifold_max_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoxelGenerator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.VoxelGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  const VoxelGenerator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoxelGenerator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.VoxelGenerator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.VoxelGenerator)
    MergeFrom(*source);
  }
}

void VoxelGenerator::MergeFrom(const VoxelGenerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.VoxelGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  voxel_size_.MergeFrom(from.voxel_size_);
  point_cloud_range_.MergeFrom(from.point_cloud_range_);
  submanifold_size_.MergeFrom(from.submanifold_size_);
  if (from.max_number_of_points_per_voxel() != 0) {
    set_max_number_of_points_per_voxel(from.max_number_of_points_per_voxel());
  }
  if (from.submanifold_group() != 0) {
    set_submanifold_group(from.submanifold_group());
  }
  if (from.submanifold_max_points() != 0) {
    set_submanifold_max_points(from.submanifold_max_points());
  }
}

void VoxelGenerator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.VoxelGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelGenerator::CopyFrom(const VoxelGenerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.VoxelGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelGenerator::IsInitialized() const {
  return true;
}

void VoxelGenerator::Swap(VoxelGenerator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoxelGenerator::InternalSwap(VoxelGenerator* other) {
  using std::swap;
  voxel_size_.InternalSwap(&other->voxel_size_);
  point_cloud_range_.InternalSwap(&other->point_cloud_range_);
  submanifold_size_.InternalSwap(&other->submanifold_size_);
  swap(max_number_of_points_per_voxel_, other->max_number_of_points_per_voxel_);
  swap(submanifold_group_, other->submanifold_group_);
  swap(submanifold_max_points_, other->submanifold_max_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoxelGenerator::GetMetadata() const {
  protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fvoxel_5fgenerator_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoxelGenerator

// repeated float voxel_size = 1;
int VoxelGenerator::voxel_size_size() const {
  return voxel_size_.size();
}
void VoxelGenerator::clear_voxel_size() {
  voxel_size_.Clear();
}
float VoxelGenerator::voxel_size(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.voxel_size)
  return voxel_size_.Get(index);
}
void VoxelGenerator::set_voxel_size(int index, float value) {
  voxel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.voxel_size)
}
void VoxelGenerator::add_voxel_size(float value) {
  voxel_size_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.voxel_size)
}
const ::google::protobuf::RepeatedField< float >&
VoxelGenerator::voxel_size() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.voxel_size)
  return voxel_size_;
}
::google::protobuf::RepeatedField< float >*
VoxelGenerator::mutable_voxel_size() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.voxel_size)
  return &voxel_size_;
}

// repeated float point_cloud_range = 2;
int VoxelGenerator::point_cloud_range_size() const {
  return point_cloud_range_.size();
}
void VoxelGenerator::clear_point_cloud_range() {
  point_cloud_range_.Clear();
}
float VoxelGenerator::point_cloud_range(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.point_cloud_range)
  return point_cloud_range_.Get(index);
}
void VoxelGenerator::set_point_cloud_range(int index, float value) {
  point_cloud_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.point_cloud_range)
}
void VoxelGenerator::add_point_cloud_range(float value) {
  point_cloud_range_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.point_cloud_range)
}
const ::google::protobuf::RepeatedField< float >&
VoxelGenerator::point_cloud_range() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.point_cloud_range)
  return point_cloud_range_;
}
::google::protobuf::RepeatedField< float >*
VoxelGenerator::mutable_point_cloud_range() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.point_cloud_range)
  return &point_cloud_range_;
}

// uint32 max_number_of_points_per_voxel = 3;
void VoxelGenerator::clear_max_number_of_points_per_voxel() {
  max_number_of_points_per_voxel_ = 0u;
}
::google::protobuf::uint32 VoxelGenerator::max_number_of_points_per_voxel() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.max_number_of_points_per_voxel)
  return max_number_of_points_per_voxel_;
}
void VoxelGenerator::set_max_number_of_points_per_voxel(::google::protobuf::uint32 value) {
  
  max_number_of_points_per_voxel_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.max_number_of_points_per_voxel)
}

// bool submanifold_group = 4;
void VoxelGenerator::clear_submanifold_group() {
  submanifold_group_ = false;
}
bool VoxelGenerator::submanifold_group() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_group)
  return submanifold_group_;
}
void VoxelGenerator::set_submanifold_group(bool value) {
  
  submanifold_group_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_group)
}

// repeated uint32 submanifold_size = 5;
int VoxelGenerator::submanifold_size_size() const {
  return submanifold_size_.size();
}
void VoxelGenerator::clear_submanifold_size() {
  submanifold_size_.Clear();
}
::google::protobuf::uint32 VoxelGenerator::submanifold_size(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_size)
  return submanifold_size_.Get(index);
}
void VoxelGenerator::set_submanifold_size(int index, ::google::protobuf::uint32 value) {
  submanifold_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_size)
}
void VoxelGenerator::add_submanifold_size(::google::protobuf::uint32 value) {
  submanifold_size_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.VoxelGenerator.submanifold_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VoxelGenerator::submanifold_size() const {
  // @@protoc_insertion_point(field_list:second.protos.VoxelGenerator.submanifold_size)
  return submanifold_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VoxelGenerator::mutable_submanifold_size() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.VoxelGenerator.submanifold_size)
  return &submanifold_size_;
}

// uint32 submanifold_max_points = 6;
void VoxelGenerator::clear_submanifold_max_points() {
  submanifold_max_points_ = 0u;
}
::google::protobuf::uint32 VoxelGenerator::submanifold_max_points() const {
  // @@protoc_insertion_point(field_get:second.protos.VoxelGenerator.submanifold_max_points)
  return submanifold_max_points_;
}
void VoxelGenerator::set_submanifold_max_points(::google::protobuf::uint32 value) {
  
  submanifold_max_points_ = value;
  // @@protoc_insertion_point(field_set:second.protos.VoxelGenerator.submanifold_max_points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)
