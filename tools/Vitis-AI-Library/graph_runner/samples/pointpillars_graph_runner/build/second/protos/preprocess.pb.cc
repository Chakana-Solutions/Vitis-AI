// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: second/protos/preprocess.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "second/protos/preprocess.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace second {
namespace protos {
class PreprocessDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Preprocess>
     _instance;
} _Preprocess_default_instance_;
class DatabasePreprocessingStepDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DatabasePreprocessingStep>
     _instance;
  const ::second::protos::DBFilterByDifficulty* filter_by_difficulty_;
  const ::second::protos::DBFilterByMinNumPointInGroundTruth* filter_by_min_num_points_;
} _DatabasePreprocessingStep_default_instance_;
class DBFilterByDifficultyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DBFilterByDifficulty>
     _instance;
} _DBFilterByDifficulty_default_instance_;
class DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry>
     _instance;
} _DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_;
class DBFilterByMinNumPointInGroundTruthDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DBFilterByMinNumPointInGroundTruth>
     _instance;
} _DBFilterByMinNumPointInGroundTruth_default_instance_;
class PreprocessingStepDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PreprocessingStep>
     _instance;
  const ::second::protos::RandomGlobalScaling* random_global_scaling_;
  const ::second::protos::RandomGlobalRotation* random_global_rotation_;
} _PreprocessingStep_default_instance_;
class RandomGlobalScalingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomGlobalScaling>
     _instance;
} _RandomGlobalScaling_default_instance_;
class RandomGlobalRotationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomGlobalRotation>
     _instance;
} _RandomGlobalRotation_default_instance_;

namespace protobuf_second_2fprotos_2fpreprocess_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, random_global_rotation_min_rad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, random_global_rotation_max_rad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, random_global_scaling_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, random_global_scaling_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, random_noise_per_groundtruth_min_rad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, random_noise_per_groundtruth_max_rad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preprocess, random_noise_per_groundtruth_position_std_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabasePreprocessingStep, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabasePreprocessingStep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(DatabasePreprocessingStepDefaultTypeInternal, filter_by_difficulty_),
  offsetof(DatabasePreprocessingStepDefaultTypeInternal, filter_by_min_num_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabasePreprocessingStep, database_preprocessing_step_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFilterByDifficulty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFilterByDifficulty, removed_difficulties_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFilterByMinNumPointInGroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBFilterByMinNumPointInGroundTruth, min_num_point_pairs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessingStep, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessingStep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(PreprocessingStepDefaultTypeInternal, random_global_scaling_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_global_rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessingStep, preprocessing_step_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomGlobalScaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomGlobalScaling, min_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomGlobalScaling, max_scale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomGlobalRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomGlobalRotation, min_rad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomGlobalRotation, max_rad_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Preprocess)},
  { 12, -1, sizeof(DatabasePreprocessingStep)},
  { 20, -1, sizeof(DBFilterByDifficulty)},
  { 26, -1, sizeof(DBFilterByMinNumPointInGroundTruth)},
  { 32, -1, sizeof(PreprocessingStep)},
  { 40, -1, sizeof(RandomGlobalScaling)},
  { 47, -1, sizeof(RandomGlobalRotation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Preprocess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatabasePreprocessingStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBFilterByDifficulty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DBFilterByMinNumPointInGroundTruth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreprocessingStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomGlobalScaling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomGlobalRotation_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "second/protos/preprocess.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[3].reflection = DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry::CreateReflection(file_level_metadata[3].descriptor, _DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Preprocess_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Preprocess_default_instance_);_DatabasePreprocessingStep_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DatabasePreprocessingStep_default_instance_);_DBFilterByDifficulty_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DBFilterByDifficulty_default_instance_);_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_);_DBFilterByMinNumPointInGroundTruth_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DBFilterByMinNumPointInGroundTruth_default_instance_);_PreprocessingStep_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PreprocessingStep_default_instance_);_RandomGlobalScaling_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomGlobalScaling_default_instance_);_RandomGlobalRotation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomGlobalRotation_default_instance_);_DatabasePreprocessingStep_default_instance_.filter_by_difficulty_ = const_cast< ::second::protos::DBFilterByDifficulty*>(
      ::second::protos::DBFilterByDifficulty::internal_default_instance());
  _DatabasePreprocessingStep_default_instance_.filter_by_min_num_points_ = const_cast< ::second::protos::DBFilterByMinNumPointInGroundTruth*>(
      ::second::protos::DBFilterByMinNumPointInGroundTruth::internal_default_instance());
  _DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_._instance.get_mutable()->set_default_instance(_DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_._instance.get_mutable());
  _DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _PreprocessingStep_default_instance_.random_global_scaling_ = const_cast< ::second::protos::RandomGlobalScaling*>(
      ::second::protos::RandomGlobalScaling::internal_default_instance());
  _PreprocessingStep_default_instance_.random_global_rotation_ = const_cast< ::second::protos::RandomGlobalRotation*>(
      ::second::protos::RandomGlobalRotation::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036second/protos/preprocess.proto\022\rsecond"
      ".protos\"\261\002\n\nPreprocess\022&\n\036random_global_"
      "rotation_min_rad\030\001 \001(\002\022&\n\036random_global_"
      "rotation_max_rad\030\002 \001(\002\022!\n\031random_global_"
      "scaling_min\030\003 \001(\002\022!\n\031random_global_scali"
      "ng_max\030\004 \001(\002\022,\n$random_noise_per_groundt"
      "ruth_min_rad\030\005 \001(\002\022,\n$random_noise_per_g"
      "roundtruth_max_rad\030\006 \001(\002\0221\n)random_noise"
      "_per_groundtruth_position_std\030\007 \001(\002\"\326\001\n\031"
      "DatabasePreprocessingStep\022C\n\024filter_by_d"
      "ifficulty\030\001 \001(\0132#.second.protos.DBFilter"
      "ByDifficultyH\000\022U\n\030filter_by_min_num_poin"
      "ts\030\002 \001(\01321.second.protos.DBFilterByMinNu"
      "mPointInGroundTruthH\000B\035\n\033database_prepro"
      "cessing_step\"4\n\024DBFilterByDifficulty\022\034\n\024"
      "removed_difficulties\030\001 \003(\005\"\303\001\n\"DBFilterB"
      "yMinNumPointInGroundTruth\022d\n\023min_num_poi"
      "nt_pairs\030\001 \003(\0132G.second.protos.DBFilterB"
      "yMinNumPointInGroundTruth.MinNumPointPai"
      "rsEntry\0327\n\025MinNumPointPairsEntry\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\"\265\001\n\021Preprocessi"
      "ngStep\022C\n\025random_global_scaling\030\001 \001(\0132\"."
      "second.protos.RandomGlobalScalingH\000\022E\n\026r"
      "andom_global_rotation\030\002 \001(\0132#.second.pro"
      "tos.RandomGlobalRotationH\000B\024\n\022preprocess"
      "ing_step\";\n\023RandomGlobalScaling\022\021\n\tmin_s"
      "cale\030\001 \001(\002\022\021\n\tmax_scale\030\002 \001(\002\"8\n\024RandomG"
      "lobalRotation\022\017\n\007min_rad\030\001 \001(\002\022\017\n\007max_ra"
      "d\030\002 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "second/protos/preprocess.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_second_2fprotos_2fpreprocess_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Preprocess::kRandomGlobalRotationMinRadFieldNumber;
const int Preprocess::kRandomGlobalRotationMaxRadFieldNumber;
const int Preprocess::kRandomGlobalScalingMinFieldNumber;
const int Preprocess::kRandomGlobalScalingMaxFieldNumber;
const int Preprocess::kRandomNoisePerGroundtruthMinRadFieldNumber;
const int Preprocess::kRandomNoisePerGroundtruthMaxRadFieldNumber;
const int Preprocess::kRandomNoisePerGroundtruthPositionStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Preprocess::Preprocess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.Preprocess)
}
Preprocess::Preprocess(const Preprocess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_global_rotation_min_rad_, &from.random_global_rotation_min_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_noise_per_groundtruth_position_std_) -
    reinterpret_cast<char*>(&random_global_rotation_min_rad_)) + sizeof(random_noise_per_groundtruth_position_std_));
  // @@protoc_insertion_point(copy_constructor:second.protos.Preprocess)
}

void Preprocess::SharedCtor() {
  ::memset(&random_global_rotation_min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_noise_per_groundtruth_position_std_) -
      reinterpret_cast<char*>(&random_global_rotation_min_rad_)) + sizeof(random_noise_per_groundtruth_position_std_));
  _cached_size_ = 0;
}

Preprocess::~Preprocess() {
  // @@protoc_insertion_point(destructor:second.protos.Preprocess)
  SharedDtor();
}

void Preprocess::SharedDtor() {
}

void Preprocess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Preprocess::descriptor() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Preprocess& Preprocess::default_instance() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  return *internal_default_instance();
}

Preprocess* Preprocess::New(::google::protobuf::Arena* arena) const {
  Preprocess* n = new Preprocess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Preprocess::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.Preprocess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&random_global_rotation_min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_noise_per_groundtruth_position_std_) -
      reinterpret_cast<char*>(&random_global_rotation_min_rad_)) + sizeof(random_noise_per_groundtruth_position_std_));
  _internal_metadata_.Clear();
}

bool Preprocess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.Preprocess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float random_global_rotation_min_rad = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_rotation_min_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_global_rotation_max_rad = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_rotation_max_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_global_scaling_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_scaling_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_global_scaling_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_global_scaling_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_noise_per_groundtruth_min_rad = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_noise_per_groundtruth_min_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_noise_per_groundtruth_max_rad = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_noise_per_groundtruth_max_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float random_noise_per_groundtruth_position_std = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_noise_per_groundtruth_position_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.Preprocess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.Preprocess)
  return false;
#undef DO_
}

void Preprocess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.Preprocess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float random_global_rotation_min_rad = 1;
  if (this->random_global_rotation_min_rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->random_global_rotation_min_rad(), output);
  }

  // float random_global_rotation_max_rad = 2;
  if (this->random_global_rotation_max_rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->random_global_rotation_max_rad(), output);
  }

  // float random_global_scaling_min = 3;
  if (this->random_global_scaling_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->random_global_scaling_min(), output);
  }

  // float random_global_scaling_max = 4;
  if (this->random_global_scaling_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->random_global_scaling_max(), output);
  }

  // float random_noise_per_groundtruth_min_rad = 5;
  if (this->random_noise_per_groundtruth_min_rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->random_noise_per_groundtruth_min_rad(), output);
  }

  // float random_noise_per_groundtruth_max_rad = 6;
  if (this->random_noise_per_groundtruth_max_rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->random_noise_per_groundtruth_max_rad(), output);
  }

  // float random_noise_per_groundtruth_position_std = 7;
  if (this->random_noise_per_groundtruth_position_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->random_noise_per_groundtruth_position_std(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.Preprocess)
}

::google::protobuf::uint8* Preprocess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.Preprocess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float random_global_rotation_min_rad = 1;
  if (this->random_global_rotation_min_rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->random_global_rotation_min_rad(), target);
  }

  // float random_global_rotation_max_rad = 2;
  if (this->random_global_rotation_max_rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->random_global_rotation_max_rad(), target);
  }

  // float random_global_scaling_min = 3;
  if (this->random_global_scaling_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->random_global_scaling_min(), target);
  }

  // float random_global_scaling_max = 4;
  if (this->random_global_scaling_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->random_global_scaling_max(), target);
  }

  // float random_noise_per_groundtruth_min_rad = 5;
  if (this->random_noise_per_groundtruth_min_rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->random_noise_per_groundtruth_min_rad(), target);
  }

  // float random_noise_per_groundtruth_max_rad = 6;
  if (this->random_noise_per_groundtruth_max_rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->random_noise_per_groundtruth_max_rad(), target);
  }

  // float random_noise_per_groundtruth_position_std = 7;
  if (this->random_noise_per_groundtruth_position_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->random_noise_per_groundtruth_position_std(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.Preprocess)
  return target;
}

size_t Preprocess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.Preprocess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float random_global_rotation_min_rad = 1;
  if (this->random_global_rotation_min_rad() != 0) {
    total_size += 1 + 4;
  }

  // float random_global_rotation_max_rad = 2;
  if (this->random_global_rotation_max_rad() != 0) {
    total_size += 1 + 4;
  }

  // float random_global_scaling_min = 3;
  if (this->random_global_scaling_min() != 0) {
    total_size += 1 + 4;
  }

  // float random_global_scaling_max = 4;
  if (this->random_global_scaling_max() != 0) {
    total_size += 1 + 4;
  }

  // float random_noise_per_groundtruth_min_rad = 5;
  if (this->random_noise_per_groundtruth_min_rad() != 0) {
    total_size += 1 + 4;
  }

  // float random_noise_per_groundtruth_max_rad = 6;
  if (this->random_noise_per_groundtruth_max_rad() != 0) {
    total_size += 1 + 4;
  }

  // float random_noise_per_groundtruth_position_std = 7;
  if (this->random_noise_per_groundtruth_position_std() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Preprocess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.Preprocess)
  GOOGLE_DCHECK_NE(&from, this);
  const Preprocess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Preprocess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.Preprocess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.Preprocess)
    MergeFrom(*source);
  }
}

void Preprocess::MergeFrom(const Preprocess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.Preprocess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.random_global_rotation_min_rad() != 0) {
    set_random_global_rotation_min_rad(from.random_global_rotation_min_rad());
  }
  if (from.random_global_rotation_max_rad() != 0) {
    set_random_global_rotation_max_rad(from.random_global_rotation_max_rad());
  }
  if (from.random_global_scaling_min() != 0) {
    set_random_global_scaling_min(from.random_global_scaling_min());
  }
  if (from.random_global_scaling_max() != 0) {
    set_random_global_scaling_max(from.random_global_scaling_max());
  }
  if (from.random_noise_per_groundtruth_min_rad() != 0) {
    set_random_noise_per_groundtruth_min_rad(from.random_noise_per_groundtruth_min_rad());
  }
  if (from.random_noise_per_groundtruth_max_rad() != 0) {
    set_random_noise_per_groundtruth_max_rad(from.random_noise_per_groundtruth_max_rad());
  }
  if (from.random_noise_per_groundtruth_position_std() != 0) {
    set_random_noise_per_groundtruth_position_std(from.random_noise_per_groundtruth_position_std());
  }
}

void Preprocess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.Preprocess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preprocess::CopyFrom(const Preprocess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.Preprocess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preprocess::IsInitialized() const {
  return true;
}

void Preprocess::Swap(Preprocess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Preprocess::InternalSwap(Preprocess* other) {
  using std::swap;
  swap(random_global_rotation_min_rad_, other->random_global_rotation_min_rad_);
  swap(random_global_rotation_max_rad_, other->random_global_rotation_max_rad_);
  swap(random_global_scaling_min_, other->random_global_scaling_min_);
  swap(random_global_scaling_max_, other->random_global_scaling_max_);
  swap(random_noise_per_groundtruth_min_rad_, other->random_noise_per_groundtruth_min_rad_);
  swap(random_noise_per_groundtruth_max_rad_, other->random_noise_per_groundtruth_max_rad_);
  swap(random_noise_per_groundtruth_position_std_, other->random_noise_per_groundtruth_position_std_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Preprocess::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Preprocess

// float random_global_rotation_min_rad = 1;
void Preprocess::clear_random_global_rotation_min_rad() {
  random_global_rotation_min_rad_ = 0;
}
float Preprocess::random_global_rotation_min_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_rotation_min_rad)
  return random_global_rotation_min_rad_;
}
void Preprocess::set_random_global_rotation_min_rad(float value) {
  
  random_global_rotation_min_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_rotation_min_rad)
}

// float random_global_rotation_max_rad = 2;
void Preprocess::clear_random_global_rotation_max_rad() {
  random_global_rotation_max_rad_ = 0;
}
float Preprocess::random_global_rotation_max_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_rotation_max_rad)
  return random_global_rotation_max_rad_;
}
void Preprocess::set_random_global_rotation_max_rad(float value) {
  
  random_global_rotation_max_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_rotation_max_rad)
}

// float random_global_scaling_min = 3;
void Preprocess::clear_random_global_scaling_min() {
  random_global_scaling_min_ = 0;
}
float Preprocess::random_global_scaling_min() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_scaling_min)
  return random_global_scaling_min_;
}
void Preprocess::set_random_global_scaling_min(float value) {
  
  random_global_scaling_min_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_scaling_min)
}

// float random_global_scaling_max = 4;
void Preprocess::clear_random_global_scaling_max() {
  random_global_scaling_max_ = 0;
}
float Preprocess::random_global_scaling_max() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_global_scaling_max)
  return random_global_scaling_max_;
}
void Preprocess::set_random_global_scaling_max(float value) {
  
  random_global_scaling_max_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_global_scaling_max)
}

// float random_noise_per_groundtruth_min_rad = 5;
void Preprocess::clear_random_noise_per_groundtruth_min_rad() {
  random_noise_per_groundtruth_min_rad_ = 0;
}
float Preprocess::random_noise_per_groundtruth_min_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_noise_per_groundtruth_min_rad)
  return random_noise_per_groundtruth_min_rad_;
}
void Preprocess::set_random_noise_per_groundtruth_min_rad(float value) {
  
  random_noise_per_groundtruth_min_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_noise_per_groundtruth_min_rad)
}

// float random_noise_per_groundtruth_max_rad = 6;
void Preprocess::clear_random_noise_per_groundtruth_max_rad() {
  random_noise_per_groundtruth_max_rad_ = 0;
}
float Preprocess::random_noise_per_groundtruth_max_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_noise_per_groundtruth_max_rad)
  return random_noise_per_groundtruth_max_rad_;
}
void Preprocess::set_random_noise_per_groundtruth_max_rad(float value) {
  
  random_noise_per_groundtruth_max_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_noise_per_groundtruth_max_rad)
}

// float random_noise_per_groundtruth_position_std = 7;
void Preprocess::clear_random_noise_per_groundtruth_position_std() {
  random_noise_per_groundtruth_position_std_ = 0;
}
float Preprocess::random_noise_per_groundtruth_position_std() const {
  // @@protoc_insertion_point(field_get:second.protos.Preprocess.random_noise_per_groundtruth_position_std)
  return random_noise_per_groundtruth_position_std_;
}
void Preprocess::set_random_noise_per_groundtruth_position_std(float value) {
  
  random_noise_per_groundtruth_position_std_ = value;
  // @@protoc_insertion_point(field_set:second.protos.Preprocess.random_noise_per_groundtruth_position_std)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabasePreprocessingStep::kFilterByDifficultyFieldNumber;
const int DatabasePreprocessingStep::kFilterByMinNumPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabasePreprocessingStep::DatabasePreprocessingStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DatabasePreprocessingStep)
}
DatabasePreprocessingStep::DatabasePreprocessingStep(const DatabasePreprocessingStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_database_preprocessing_step();
  switch (from.database_preprocessing_step_case()) {
    case kFilterByDifficulty: {
      mutable_filter_by_difficulty()->::second::protos::DBFilterByDifficulty::MergeFrom(from.filter_by_difficulty());
      break;
    }
    case kFilterByMinNumPoints: {
      mutable_filter_by_min_num_points()->::second::protos::DBFilterByMinNumPointInGroundTruth::MergeFrom(from.filter_by_min_num_points());
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.DatabasePreprocessingStep)
}

void DatabasePreprocessingStep::SharedCtor() {
  clear_has_database_preprocessing_step();
  _cached_size_ = 0;
}

DatabasePreprocessingStep::~DatabasePreprocessingStep() {
  // @@protoc_insertion_point(destructor:second.protos.DatabasePreprocessingStep)
  SharedDtor();
}

void DatabasePreprocessingStep::SharedDtor() {
  if (has_database_preprocessing_step()) {
    clear_database_preprocessing_step();
  }
}

void DatabasePreprocessingStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabasePreprocessingStep::descriptor() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatabasePreprocessingStep& DatabasePreprocessingStep::default_instance() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatabasePreprocessingStep* DatabasePreprocessingStep::New(::google::protobuf::Arena* arena) const {
  DatabasePreprocessingStep* n = new DatabasePreprocessingStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabasePreprocessingStep::clear_database_preprocessing_step() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.DatabasePreprocessingStep)
  switch (database_preprocessing_step_case()) {
    case kFilterByDifficulty: {
      delete database_preprocessing_step_.filter_by_difficulty_;
      break;
    }
    case kFilterByMinNumPoints: {
      delete database_preprocessing_step_.filter_by_min_num_points_;
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATABASE_PREPROCESSING_STEP_NOT_SET;
}


void DatabasePreprocessingStep::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DatabasePreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_database_preprocessing_step();
  _internal_metadata_.Clear();
}

bool DatabasePreprocessingStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DatabasePreprocessingStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_by_difficulty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_by_min_num_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DatabasePreprocessingStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DatabasePreprocessingStep)
  return false;
#undef DO_
}

void DatabasePreprocessingStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DatabasePreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
  if (has_filter_by_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *database_preprocessing_step_.filter_by_difficulty_, output);
  }

  // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
  if (has_filter_by_min_num_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *database_preprocessing_step_.filter_by_min_num_points_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DatabasePreprocessingStep)
}

::google::protobuf::uint8* DatabasePreprocessingStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DatabasePreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
  if (has_filter_by_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *database_preprocessing_step_.filter_by_difficulty_, deterministic, target);
  }

  // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
  if (has_filter_by_min_num_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *database_preprocessing_step_.filter_by_min_num_points_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DatabasePreprocessingStep)
  return target;
}

size_t DatabasePreprocessingStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DatabasePreprocessingStep)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (database_preprocessing_step_case()) {
    // .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
    case kFilterByDifficulty: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *database_preprocessing_step_.filter_by_difficulty_);
      break;
    }
    // .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
    case kFilterByMinNumPoints: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *database_preprocessing_step_.filter_by_min_num_points_);
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabasePreprocessingStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DatabasePreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabasePreprocessingStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabasePreprocessingStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DatabasePreprocessingStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DatabasePreprocessingStep)
    MergeFrom(*source);
  }
}

void DatabasePreprocessingStep::MergeFrom(const DatabasePreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DatabasePreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.database_preprocessing_step_case()) {
    case kFilterByDifficulty: {
      mutable_filter_by_difficulty()->::second::protos::DBFilterByDifficulty::MergeFrom(from.filter_by_difficulty());
      break;
    }
    case kFilterByMinNumPoints: {
      mutable_filter_by_min_num_points()->::second::protos::DBFilterByMinNumPointInGroundTruth::MergeFrom(from.filter_by_min_num_points());
      break;
    }
    case DATABASE_PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
}

void DatabasePreprocessingStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DatabasePreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabasePreprocessingStep::CopyFrom(const DatabasePreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DatabasePreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabasePreprocessingStep::IsInitialized() const {
  return true;
}

void DatabasePreprocessingStep::Swap(DatabasePreprocessingStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabasePreprocessingStep::InternalSwap(DatabasePreprocessingStep* other) {
  using std::swap;
  swap(database_preprocessing_step_, other->database_preprocessing_step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatabasePreprocessingStep::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabasePreprocessingStep

// .second.protos.DBFilterByDifficulty filter_by_difficulty = 1;
bool DatabasePreprocessingStep::has_filter_by_difficulty() const {
  return database_preprocessing_step_case() == kFilterByDifficulty;
}
void DatabasePreprocessingStep::set_has_filter_by_difficulty() {
  _oneof_case_[0] = kFilterByDifficulty;
}
void DatabasePreprocessingStep::clear_filter_by_difficulty() {
  if (has_filter_by_difficulty()) {
    delete database_preprocessing_step_.filter_by_difficulty_;
    clear_has_database_preprocessing_step();
  }
}
 const ::second::protos::DBFilterByDifficulty& DatabasePreprocessingStep::filter_by_difficulty() const {
  // @@protoc_insertion_point(field_get:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
  return has_filter_by_difficulty()
      ? *database_preprocessing_step_.filter_by_difficulty_
      : ::second::protos::DBFilterByDifficulty::default_instance();
}
::second::protos::DBFilterByDifficulty* DatabasePreprocessingStep::mutable_filter_by_difficulty() {
  if (!has_filter_by_difficulty()) {
    clear_database_preprocessing_step();
    set_has_filter_by_difficulty();
    database_preprocessing_step_.filter_by_difficulty_ = new ::second::protos::DBFilterByDifficulty;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
  return database_preprocessing_step_.filter_by_difficulty_;
}
::second::protos::DBFilterByDifficulty* DatabasePreprocessingStep::release_filter_by_difficulty() {
  // @@protoc_insertion_point(field_release:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
  if (has_filter_by_difficulty()) {
    clear_has_database_preprocessing_step();
    ::second::protos::DBFilterByDifficulty* temp = database_preprocessing_step_.filter_by_difficulty_;
    database_preprocessing_step_.filter_by_difficulty_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DatabasePreprocessingStep::set_allocated_filter_by_difficulty(::second::protos::DBFilterByDifficulty* filter_by_difficulty) {
  clear_database_preprocessing_step();
  if (filter_by_difficulty) {
    set_has_filter_by_difficulty();
    database_preprocessing_step_.filter_by_difficulty_ = filter_by_difficulty;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.DatabasePreprocessingStep.filter_by_difficulty)
}

// .second.protos.DBFilterByMinNumPointInGroundTruth filter_by_min_num_points = 2;
bool DatabasePreprocessingStep::has_filter_by_min_num_points() const {
  return database_preprocessing_step_case() == kFilterByMinNumPoints;
}
void DatabasePreprocessingStep::set_has_filter_by_min_num_points() {
  _oneof_case_[0] = kFilterByMinNumPoints;
}
void DatabasePreprocessingStep::clear_filter_by_min_num_points() {
  if (has_filter_by_min_num_points()) {
    delete database_preprocessing_step_.filter_by_min_num_points_;
    clear_has_database_preprocessing_step();
  }
}
 const ::second::protos::DBFilterByMinNumPointInGroundTruth& DatabasePreprocessingStep::filter_by_min_num_points() const {
  // @@protoc_insertion_point(field_get:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
  return has_filter_by_min_num_points()
      ? *database_preprocessing_step_.filter_by_min_num_points_
      : ::second::protos::DBFilterByMinNumPointInGroundTruth::default_instance();
}
::second::protos::DBFilterByMinNumPointInGroundTruth* DatabasePreprocessingStep::mutable_filter_by_min_num_points() {
  if (!has_filter_by_min_num_points()) {
    clear_database_preprocessing_step();
    set_has_filter_by_min_num_points();
    database_preprocessing_step_.filter_by_min_num_points_ = new ::second::protos::DBFilterByMinNumPointInGroundTruth;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
  return database_preprocessing_step_.filter_by_min_num_points_;
}
::second::protos::DBFilterByMinNumPointInGroundTruth* DatabasePreprocessingStep::release_filter_by_min_num_points() {
  // @@protoc_insertion_point(field_release:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
  if (has_filter_by_min_num_points()) {
    clear_has_database_preprocessing_step();
    ::second::protos::DBFilterByMinNumPointInGroundTruth* temp = database_preprocessing_step_.filter_by_min_num_points_;
    database_preprocessing_step_.filter_by_min_num_points_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DatabasePreprocessingStep::set_allocated_filter_by_min_num_points(::second::protos::DBFilterByMinNumPointInGroundTruth* filter_by_min_num_points) {
  clear_database_preprocessing_step();
  if (filter_by_min_num_points) {
    set_has_filter_by_min_num_points();
    database_preprocessing_step_.filter_by_min_num_points_ = filter_by_min_num_points;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.DatabasePreprocessingStep.filter_by_min_num_points)
}

bool DatabasePreprocessingStep::has_database_preprocessing_step() const {
  return database_preprocessing_step_case() != DATABASE_PREPROCESSING_STEP_NOT_SET;
}
void DatabasePreprocessingStep::clear_has_database_preprocessing_step() {
  _oneof_case_[0] = DATABASE_PREPROCESSING_STEP_NOT_SET;
}
DatabasePreprocessingStep::DatabasePreprocessingStepCase DatabasePreprocessingStep::database_preprocessing_step_case() const {
  return DatabasePreprocessingStep::DatabasePreprocessingStepCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBFilterByDifficulty::kRemovedDifficultiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBFilterByDifficulty::DBFilterByDifficulty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DBFilterByDifficulty)
}
DBFilterByDifficulty::DBFilterByDifficulty(const DBFilterByDifficulty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      removed_difficulties_(from.removed_difficulties_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:second.protos.DBFilterByDifficulty)
}

void DBFilterByDifficulty::SharedCtor() {
  _cached_size_ = 0;
}

DBFilterByDifficulty::~DBFilterByDifficulty() {
  // @@protoc_insertion_point(destructor:second.protos.DBFilterByDifficulty)
  SharedDtor();
}

void DBFilterByDifficulty::SharedDtor() {
}

void DBFilterByDifficulty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBFilterByDifficulty::descriptor() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBFilterByDifficulty& DBFilterByDifficulty::default_instance() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  return *internal_default_instance();
}

DBFilterByDifficulty* DBFilterByDifficulty::New(::google::protobuf::Arena* arena) const {
  DBFilterByDifficulty* n = new DBFilterByDifficulty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBFilterByDifficulty::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DBFilterByDifficulty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removed_difficulties_.Clear();
  _internal_metadata_.Clear();
}

bool DBFilterByDifficulty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DBFilterByDifficulty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 removed_difficulties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_removed_difficulties())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_removed_difficulties())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DBFilterByDifficulty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DBFilterByDifficulty)
  return false;
#undef DO_
}

void DBFilterByDifficulty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DBFilterByDifficulty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 removed_difficulties = 1;
  if (this->removed_difficulties_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _removed_difficulties_cached_byte_size_));
  }
  for (int i = 0, n = this->removed_difficulties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->removed_difficulties(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DBFilterByDifficulty)
}

::google::protobuf::uint8* DBFilterByDifficulty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DBFilterByDifficulty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 removed_difficulties = 1;
  if (this->removed_difficulties_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _removed_difficulties_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->removed_difficulties_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DBFilterByDifficulty)
  return target;
}

size_t DBFilterByDifficulty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DBFilterByDifficulty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 removed_difficulties = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->removed_difficulties_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _removed_difficulties_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBFilterByDifficulty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DBFilterByDifficulty)
  GOOGLE_DCHECK_NE(&from, this);
  const DBFilterByDifficulty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBFilterByDifficulty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DBFilterByDifficulty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DBFilterByDifficulty)
    MergeFrom(*source);
  }
}

void DBFilterByDifficulty::MergeFrom(const DBFilterByDifficulty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DBFilterByDifficulty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  removed_difficulties_.MergeFrom(from.removed_difficulties_);
}

void DBFilterByDifficulty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DBFilterByDifficulty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFilterByDifficulty::CopyFrom(const DBFilterByDifficulty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DBFilterByDifficulty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFilterByDifficulty::IsInitialized() const {
  return true;
}

void DBFilterByDifficulty::Swap(DBFilterByDifficulty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBFilterByDifficulty::InternalSwap(DBFilterByDifficulty* other) {
  using std::swap;
  removed_difficulties_.InternalSwap(&other->removed_difficulties_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBFilterByDifficulty::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBFilterByDifficulty

// repeated int32 removed_difficulties = 1;
int DBFilterByDifficulty::removed_difficulties_size() const {
  return removed_difficulties_.size();
}
void DBFilterByDifficulty::clear_removed_difficulties() {
  removed_difficulties_.Clear();
}
::google::protobuf::int32 DBFilterByDifficulty::removed_difficulties(int index) const {
  // @@protoc_insertion_point(field_get:second.protos.DBFilterByDifficulty.removed_difficulties)
  return removed_difficulties_.Get(index);
}
void DBFilterByDifficulty::set_removed_difficulties(int index, ::google::protobuf::int32 value) {
  removed_difficulties_.Set(index, value);
  // @@protoc_insertion_point(field_set:second.protos.DBFilterByDifficulty.removed_difficulties)
}
void DBFilterByDifficulty::add_removed_difficulties(::google::protobuf::int32 value) {
  removed_difficulties_.Add(value);
  // @@protoc_insertion_point(field_add:second.protos.DBFilterByDifficulty.removed_difficulties)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DBFilterByDifficulty::removed_difficulties() const {
  // @@protoc_insertion_point(field_list:second.protos.DBFilterByDifficulty.removed_difficulties)
  return removed_difficulties_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DBFilterByDifficulty::mutable_removed_difficulties() {
  // @@protoc_insertion_point(field_mutable_list:second.protos.DBFilterByDifficulty.removed_difficulties)
  return &removed_difficulties_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry() {}
DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[3];
}
void DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry::MergeFrom(const DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBFilterByMinNumPointInGroundTruth::kMinNumPointPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.DBFilterByMinNumPointInGroundTruth)
}
DBFilterByMinNumPointInGroundTruth::DBFilterByMinNumPointInGroundTruth(const DBFilterByMinNumPointInGroundTruth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_num_point_pairs_.MergeFrom(from.min_num_point_pairs_);
  // @@protoc_insertion_point(copy_constructor:second.protos.DBFilterByMinNumPointInGroundTruth)
}

void DBFilterByMinNumPointInGroundTruth::SharedCtor() {
  _cached_size_ = 0;
}

DBFilterByMinNumPointInGroundTruth::~DBFilterByMinNumPointInGroundTruth() {
  // @@protoc_insertion_point(destructor:second.protos.DBFilterByMinNumPointInGroundTruth)
  SharedDtor();
}

void DBFilterByMinNumPointInGroundTruth::SharedDtor() {
}

void DBFilterByMinNumPointInGroundTruth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBFilterByMinNumPointInGroundTruth::descriptor() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DBFilterByMinNumPointInGroundTruth& DBFilterByMinNumPointInGroundTruth::default_instance() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  return *internal_default_instance();
}

DBFilterByMinNumPointInGroundTruth* DBFilterByMinNumPointInGroundTruth::New(::google::protobuf::Arena* arena) const {
  DBFilterByMinNumPointInGroundTruth* n = new DBFilterByMinNumPointInGroundTruth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBFilterByMinNumPointInGroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_num_point_pairs_.Clear();
  _internal_metadata_.Clear();
}

bool DBFilterByMinNumPointInGroundTruth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, uint32> min_num_point_pairs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry::Parser< ::google::protobuf::internal::MapField<
              DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry,
              ::std::string, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 > > parser(&min_num_point_pairs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "second.protos.DBFilterByMinNumPointInGroundTruth.MinNumPointPairsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.DBFilterByMinNumPointInGroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.DBFilterByMinNumPointInGroundTruth)
  return false;
#undef DO_
}

void DBFilterByMinNumPointInGroundTruth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> min_num_point_pairs = 1;
  if (!this->min_num_point_pairs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "second.protos.DBFilterByMinNumPointInGroundTruth.MinNumPointPairsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->min_num_point_pairs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->min_num_point_pairs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(min_num_point_pairs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it) {
        entry.reset(min_num_point_pairs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.DBFilterByMinNumPointInGroundTruth)
}

::google::protobuf::uint8* DBFilterByMinNumPointInGroundTruth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> min_num_point_pairs = 1;
  if (!this->min_num_point_pairs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "second.protos.DBFilterByMinNumPointInGroundTruth.MinNumPointPairsEntry.key");
      }
    };

    if (deterministic &&
        this->min_num_point_pairs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->min_num_point_pairs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(min_num_point_pairs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->min_num_point_pairs().begin();
          it != this->min_num_point_pairs().end(); ++it) {
        entry.reset(min_num_point_pairs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.DBFilterByMinNumPointInGroundTruth)
  return target;
}

size_t DBFilterByMinNumPointInGroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, uint32> min_num_point_pairs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->min_num_point_pairs_size());
  {
    ::google::protobuf::scoped_ptr<DBFilterByMinNumPointInGroundTruth_MinNumPointPairsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
        it = this->min_num_point_pairs().begin();
        it != this->min_num_point_pairs().end(); ++it) {
      entry.reset(min_num_point_pairs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBFilterByMinNumPointInGroundTruth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const DBFilterByMinNumPointInGroundTruth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DBFilterByMinNumPointInGroundTruth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.DBFilterByMinNumPointInGroundTruth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.DBFilterByMinNumPointInGroundTruth)
    MergeFrom(*source);
  }
}

void DBFilterByMinNumPointInGroundTruth::MergeFrom(const DBFilterByMinNumPointInGroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_num_point_pairs_.MergeFrom(from.min_num_point_pairs_);
}

void DBFilterByMinNumPointInGroundTruth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFilterByMinNumPointInGroundTruth::CopyFrom(const DBFilterByMinNumPointInGroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.DBFilterByMinNumPointInGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFilterByMinNumPointInGroundTruth::IsInitialized() const {
  return true;
}

void DBFilterByMinNumPointInGroundTruth::Swap(DBFilterByMinNumPointInGroundTruth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBFilterByMinNumPointInGroundTruth::InternalSwap(DBFilterByMinNumPointInGroundTruth* other) {
  using std::swap;
  min_num_point_pairs_.Swap(&other->min_num_point_pairs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBFilterByMinNumPointInGroundTruth::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBFilterByMinNumPointInGroundTruth

// map<string, uint32> min_num_point_pairs = 1;
int DBFilterByMinNumPointInGroundTruth::min_num_point_pairs_size() const {
  return min_num_point_pairs_.size();
}
void DBFilterByMinNumPointInGroundTruth::clear_min_num_point_pairs() {
  min_num_point_pairs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
DBFilterByMinNumPointInGroundTruth::min_num_point_pairs() const {
  // @@protoc_insertion_point(field_map:second.protos.DBFilterByMinNumPointInGroundTruth.min_num_point_pairs)
  return min_num_point_pairs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
DBFilterByMinNumPointInGroundTruth::mutable_min_num_point_pairs() {
  // @@protoc_insertion_point(field_mutable_map:second.protos.DBFilterByMinNumPointInGroundTruth.min_num_point_pairs)
  return min_num_point_pairs_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreprocessingStep::kRandomGlobalScalingFieldNumber;
const int PreprocessingStep::kRandomGlobalRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreprocessingStep::PreprocessingStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.PreprocessingStep)
}
PreprocessingStep::PreprocessingStep(const PreprocessingStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_preprocessing_step();
  switch (from.preprocessing_step_case()) {
    case kRandomGlobalScaling: {
      mutable_random_global_scaling()->::second::protos::RandomGlobalScaling::MergeFrom(from.random_global_scaling());
      break;
    }
    case kRandomGlobalRotation: {
      mutable_random_global_rotation()->::second::protos::RandomGlobalRotation::MergeFrom(from.random_global_rotation());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:second.protos.PreprocessingStep)
}

void PreprocessingStep::SharedCtor() {
  clear_has_preprocessing_step();
  _cached_size_ = 0;
}

PreprocessingStep::~PreprocessingStep() {
  // @@protoc_insertion_point(destructor:second.protos.PreprocessingStep)
  SharedDtor();
}

void PreprocessingStep::SharedDtor() {
  if (has_preprocessing_step()) {
    clear_preprocessing_step();
  }
}

void PreprocessingStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreprocessingStep::descriptor() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreprocessingStep& PreprocessingStep::default_instance() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreprocessingStep* PreprocessingStep::New(::google::protobuf::Arena* arena) const {
  PreprocessingStep* n = new PreprocessingStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreprocessingStep::clear_preprocessing_step() {
// @@protoc_insertion_point(one_of_clear_start:second.protos.PreprocessingStep)
  switch (preprocessing_step_case()) {
    case kRandomGlobalScaling: {
      delete preprocessing_step_.random_global_scaling_;
      break;
    }
    case kRandomGlobalRotation: {
      delete preprocessing_step_.random_global_rotation_;
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREPROCESSING_STEP_NOT_SET;
}


void PreprocessingStep::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.PreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_preprocessing_step();
  _internal_metadata_.Clear();
}

bool PreprocessingStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.PreprocessingStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .second.protos.RandomGlobalScaling random_global_scaling = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_global_scaling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .second.protos.RandomGlobalRotation random_global_rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_global_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.PreprocessingStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.PreprocessingStep)
  return false;
#undef DO_
}

void PreprocessingStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.PreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RandomGlobalScaling random_global_scaling = 1;
  if (has_random_global_scaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *preprocessing_step_.random_global_scaling_, output);
  }

  // .second.protos.RandomGlobalRotation random_global_rotation = 2;
  if (has_random_global_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *preprocessing_step_.random_global_rotation_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.PreprocessingStep)
}

::google::protobuf::uint8* PreprocessingStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.PreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .second.protos.RandomGlobalScaling random_global_scaling = 1;
  if (has_random_global_scaling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *preprocessing_step_.random_global_scaling_, deterministic, target);
  }

  // .second.protos.RandomGlobalRotation random_global_rotation = 2;
  if (has_random_global_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *preprocessing_step_.random_global_rotation_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.PreprocessingStep)
  return target;
}

size_t PreprocessingStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.PreprocessingStep)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (preprocessing_step_case()) {
    // .second.protos.RandomGlobalScaling random_global_scaling = 1;
    case kRandomGlobalScaling: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_global_scaling_);
      break;
    }
    // .second.protos.RandomGlobalRotation random_global_rotation = 2;
    case kRandomGlobalRotation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_global_rotation_);
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreprocessingStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  const PreprocessingStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreprocessingStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.PreprocessingStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.PreprocessingStep)
    MergeFrom(*source);
  }
}

void PreprocessingStep::MergeFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.preprocessing_step_case()) {
    case kRandomGlobalScaling: {
      mutable_random_global_scaling()->::second::protos::RandomGlobalScaling::MergeFrom(from.random_global_scaling());
      break;
    }
    case kRandomGlobalRotation: {
      mutable_random_global_rotation()->::second::protos::RandomGlobalRotation::MergeFrom(from.random_global_rotation());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
}

void PreprocessingStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessingStep::CopyFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessingStep::IsInitialized() const {
  return true;
}

void PreprocessingStep::Swap(PreprocessingStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreprocessingStep::InternalSwap(PreprocessingStep* other) {
  using std::swap;
  swap(preprocessing_step_, other->preprocessing_step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreprocessingStep::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreprocessingStep

// .second.protos.RandomGlobalScaling random_global_scaling = 1;
bool PreprocessingStep::has_random_global_scaling() const {
  return preprocessing_step_case() == kRandomGlobalScaling;
}
void PreprocessingStep::set_has_random_global_scaling() {
  _oneof_case_[0] = kRandomGlobalScaling;
}
void PreprocessingStep::clear_random_global_scaling() {
  if (has_random_global_scaling()) {
    delete preprocessing_step_.random_global_scaling_;
    clear_has_preprocessing_step();
  }
}
 const ::second::protos::RandomGlobalScaling& PreprocessingStep::random_global_scaling() const {
  // @@protoc_insertion_point(field_get:second.protos.PreprocessingStep.random_global_scaling)
  return has_random_global_scaling()
      ? *preprocessing_step_.random_global_scaling_
      : ::second::protos::RandomGlobalScaling::default_instance();
}
::second::protos::RandomGlobalScaling* PreprocessingStep::mutable_random_global_scaling() {
  if (!has_random_global_scaling()) {
    clear_preprocessing_step();
    set_has_random_global_scaling();
    preprocessing_step_.random_global_scaling_ = new ::second::protos::RandomGlobalScaling;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.PreprocessingStep.random_global_scaling)
  return preprocessing_step_.random_global_scaling_;
}
::second::protos::RandomGlobalScaling* PreprocessingStep::release_random_global_scaling() {
  // @@protoc_insertion_point(field_release:second.protos.PreprocessingStep.random_global_scaling)
  if (has_random_global_scaling()) {
    clear_has_preprocessing_step();
    ::second::protos::RandomGlobalScaling* temp = preprocessing_step_.random_global_scaling_;
    preprocessing_step_.random_global_scaling_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_global_scaling(::second::protos::RandomGlobalScaling* random_global_scaling) {
  clear_preprocessing_step();
  if (random_global_scaling) {
    set_has_random_global_scaling();
    preprocessing_step_.random_global_scaling_ = random_global_scaling;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.PreprocessingStep.random_global_scaling)
}

// .second.protos.RandomGlobalRotation random_global_rotation = 2;
bool PreprocessingStep::has_random_global_rotation() const {
  return preprocessing_step_case() == kRandomGlobalRotation;
}
void PreprocessingStep::set_has_random_global_rotation() {
  _oneof_case_[0] = kRandomGlobalRotation;
}
void PreprocessingStep::clear_random_global_rotation() {
  if (has_random_global_rotation()) {
    delete preprocessing_step_.random_global_rotation_;
    clear_has_preprocessing_step();
  }
}
 const ::second::protos::RandomGlobalRotation& PreprocessingStep::random_global_rotation() const {
  // @@protoc_insertion_point(field_get:second.protos.PreprocessingStep.random_global_rotation)
  return has_random_global_rotation()
      ? *preprocessing_step_.random_global_rotation_
      : ::second::protos::RandomGlobalRotation::default_instance();
}
::second::protos::RandomGlobalRotation* PreprocessingStep::mutable_random_global_rotation() {
  if (!has_random_global_rotation()) {
    clear_preprocessing_step();
    set_has_random_global_rotation();
    preprocessing_step_.random_global_rotation_ = new ::second::protos::RandomGlobalRotation;
  }
  // @@protoc_insertion_point(field_mutable:second.protos.PreprocessingStep.random_global_rotation)
  return preprocessing_step_.random_global_rotation_;
}
::second::protos::RandomGlobalRotation* PreprocessingStep::release_random_global_rotation() {
  // @@protoc_insertion_point(field_release:second.protos.PreprocessingStep.random_global_rotation)
  if (has_random_global_rotation()) {
    clear_has_preprocessing_step();
    ::second::protos::RandomGlobalRotation* temp = preprocessing_step_.random_global_rotation_;
    preprocessing_step_.random_global_rotation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_global_rotation(::second::protos::RandomGlobalRotation* random_global_rotation) {
  clear_preprocessing_step();
  if (random_global_rotation) {
    set_has_random_global_rotation();
    preprocessing_step_.random_global_rotation_ = random_global_rotation;
  }
  // @@protoc_insertion_point(field_set_allocated:second.protos.PreprocessingStep.random_global_rotation)
}

bool PreprocessingStep::has_preprocessing_step() const {
  return preprocessing_step_case() != PREPROCESSING_STEP_NOT_SET;
}
void PreprocessingStep::clear_has_preprocessing_step() {
  _oneof_case_[0] = PREPROCESSING_STEP_NOT_SET;
}
PreprocessingStep::PreprocessingStepCase PreprocessingStep::preprocessing_step_case() const {
  return PreprocessingStep::PreprocessingStepCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomGlobalScaling::kMinScaleFieldNumber;
const int RandomGlobalScaling::kMaxScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomGlobalScaling::RandomGlobalScaling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RandomGlobalScaling)
}
RandomGlobalScaling::RandomGlobalScaling(const RandomGlobalScaling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_scale_, &from.min_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_scale_) -
    reinterpret_cast<char*>(&min_scale_)) + sizeof(max_scale_));
  // @@protoc_insertion_point(copy_constructor:second.protos.RandomGlobalScaling)
}

void RandomGlobalScaling::SharedCtor() {
  ::memset(&min_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_scale_) -
      reinterpret_cast<char*>(&min_scale_)) + sizeof(max_scale_));
  _cached_size_ = 0;
}

RandomGlobalScaling::~RandomGlobalScaling() {
  // @@protoc_insertion_point(destructor:second.protos.RandomGlobalScaling)
  SharedDtor();
}

void RandomGlobalScaling::SharedDtor() {
}

void RandomGlobalScaling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomGlobalScaling::descriptor() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomGlobalScaling& RandomGlobalScaling::default_instance() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomGlobalScaling* RandomGlobalScaling::New(::google::protobuf::Arena* arena) const {
  RandomGlobalScaling* n = new RandomGlobalScaling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomGlobalScaling::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RandomGlobalScaling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_scale_) -
      reinterpret_cast<char*>(&min_scale_)) + sizeof(max_scale_));
  _internal_metadata_.Clear();
}

bool RandomGlobalScaling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RandomGlobalScaling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RandomGlobalScaling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RandomGlobalScaling)
  return false;
#undef DO_
}

void RandomGlobalScaling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RandomGlobalScaling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_scale = 1;
  if (this->min_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_scale(), output);
  }

  // float max_scale = 2;
  if (this->max_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_scale(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RandomGlobalScaling)
}

::google::protobuf::uint8* RandomGlobalScaling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RandomGlobalScaling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_scale = 1;
  if (this->min_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_scale(), target);
  }

  // float max_scale = 2;
  if (this->max_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_scale(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RandomGlobalScaling)
  return target;
}

size_t RandomGlobalScaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RandomGlobalScaling)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float min_scale = 1;
  if (this->min_scale() != 0) {
    total_size += 1 + 4;
  }

  // float max_scale = 2;
  if (this->max_scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomGlobalScaling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RandomGlobalScaling)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomGlobalScaling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomGlobalScaling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RandomGlobalScaling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RandomGlobalScaling)
    MergeFrom(*source);
  }
}

void RandomGlobalScaling::MergeFrom(const RandomGlobalScaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RandomGlobalScaling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_scale() != 0) {
    set_min_scale(from.min_scale());
  }
  if (from.max_scale() != 0) {
    set_max_scale(from.max_scale());
  }
}

void RandomGlobalScaling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RandomGlobalScaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomGlobalScaling::CopyFrom(const RandomGlobalScaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RandomGlobalScaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomGlobalScaling::IsInitialized() const {
  return true;
}

void RandomGlobalScaling::Swap(RandomGlobalScaling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomGlobalScaling::InternalSwap(RandomGlobalScaling* other) {
  using std::swap;
  swap(min_scale_, other->min_scale_);
  swap(max_scale_, other->max_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomGlobalScaling::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomGlobalScaling

// float min_scale = 1;
void RandomGlobalScaling::clear_min_scale() {
  min_scale_ = 0;
}
float RandomGlobalScaling::min_scale() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalScaling.min_scale)
  return min_scale_;
}
void RandomGlobalScaling::set_min_scale(float value) {
  
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalScaling.min_scale)
}

// float max_scale = 2;
void RandomGlobalScaling::clear_max_scale() {
  max_scale_ = 0;
}
float RandomGlobalScaling::max_scale() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalScaling.max_scale)
  return max_scale_;
}
void RandomGlobalScaling::set_max_scale(float value) {
  
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalScaling.max_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomGlobalRotation::kMinRadFieldNumber;
const int RandomGlobalRotation::kMaxRadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomGlobalRotation::RandomGlobalRotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:second.protos.RandomGlobalRotation)
}
RandomGlobalRotation::RandomGlobalRotation(const RandomGlobalRotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_rad_, &from.min_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_rad_) -
    reinterpret_cast<char*>(&min_rad_)) + sizeof(max_rad_));
  // @@protoc_insertion_point(copy_constructor:second.protos.RandomGlobalRotation)
}

void RandomGlobalRotation::SharedCtor() {
  ::memset(&min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_rad_) -
      reinterpret_cast<char*>(&min_rad_)) + sizeof(max_rad_));
  _cached_size_ = 0;
}

RandomGlobalRotation::~RandomGlobalRotation() {
  // @@protoc_insertion_point(destructor:second.protos.RandomGlobalRotation)
  SharedDtor();
}

void RandomGlobalRotation::SharedDtor() {
}

void RandomGlobalRotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomGlobalRotation::descriptor() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomGlobalRotation& RandomGlobalRotation::default_instance() {
  protobuf_second_2fprotos_2fpreprocess_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomGlobalRotation* RandomGlobalRotation::New(::google::protobuf::Arena* arena) const {
  RandomGlobalRotation* n = new RandomGlobalRotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomGlobalRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:second.protos.RandomGlobalRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_rad_) -
      reinterpret_cast<char*>(&min_rad_)) + sizeof(max_rad_));
  _internal_metadata_.Clear();
}

bool RandomGlobalRotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:second.protos.RandomGlobalRotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_rad = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_rad = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:second.protos.RandomGlobalRotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:second.protos.RandomGlobalRotation)
  return false;
#undef DO_
}

void RandomGlobalRotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:second.protos.RandomGlobalRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_rad = 1;
  if (this->min_rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_rad(), output);
  }

  // float max_rad = 2;
  if (this->max_rad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_rad(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:second.protos.RandomGlobalRotation)
}

::google::protobuf::uint8* RandomGlobalRotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:second.protos.RandomGlobalRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_rad = 1;
  if (this->min_rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_rad(), target);
  }

  // float max_rad = 2;
  if (this->max_rad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_rad(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:second.protos.RandomGlobalRotation)
  return target;
}

size_t RandomGlobalRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:second.protos.RandomGlobalRotation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float min_rad = 1;
  if (this->min_rad() != 0) {
    total_size += 1 + 4;
  }

  // float max_rad = 2;
  if (this->max_rad() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomGlobalRotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:second.protos.RandomGlobalRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomGlobalRotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomGlobalRotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:second.protos.RandomGlobalRotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:second.protos.RandomGlobalRotation)
    MergeFrom(*source);
  }
}

void RandomGlobalRotation::MergeFrom(const RandomGlobalRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:second.protos.RandomGlobalRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_rad() != 0) {
    set_min_rad(from.min_rad());
  }
  if (from.max_rad() != 0) {
    set_max_rad(from.max_rad());
  }
}

void RandomGlobalRotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:second.protos.RandomGlobalRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomGlobalRotation::CopyFrom(const RandomGlobalRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:second.protos.RandomGlobalRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomGlobalRotation::IsInitialized() const {
  return true;
}

void RandomGlobalRotation::Swap(RandomGlobalRotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomGlobalRotation::InternalSwap(RandomGlobalRotation* other) {
  using std::swap;
  swap(min_rad_, other->min_rad_);
  swap(max_rad_, other->max_rad_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomGlobalRotation::GetMetadata() const {
  protobuf_second_2fprotos_2fpreprocess_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_second_2fprotos_2fpreprocess_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomGlobalRotation

// float min_rad = 1;
void RandomGlobalRotation::clear_min_rad() {
  min_rad_ = 0;
}
float RandomGlobalRotation::min_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalRotation.min_rad)
  return min_rad_;
}
void RandomGlobalRotation::set_min_rad(float value) {
  
  min_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalRotation.min_rad)
}

// float max_rad = 2;
void RandomGlobalRotation::clear_max_rad() {
  max_rad_ = 0;
}
float RandomGlobalRotation::max_rad() const {
  // @@protoc_insertion_point(field_get:second.protos.RandomGlobalRotation.max_rad)
  return max_rad_;
}
void RandomGlobalRotation::set_max_rad(float value) {
  
  max_rad_ = value;
  // @@protoc_insertion_point(field_set:second.protos.RandomGlobalRotation.max_rad)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace second

// @@protoc_insertion_point(global_scope)
